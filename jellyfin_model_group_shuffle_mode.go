/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinGroupShuffleMode Enum GroupShuffleMode.
type JellyfinGroupShuffleMode string

// List of GroupShuffleMode
const (
	SORTED JellyfinGroupShuffleMode = "Sorted"
	SHUFFLE JellyfinGroupShuffleMode = "Shuffle"
)

// All allowed values of JellyfinGroupShuffleMode enum
var AllowedJellyfinGroupShuffleModeEnumValues = []JellyfinGroupShuffleMode{
	"Sorted",
	"Shuffle",
}

func (v *JellyfinGroupShuffleMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinGroupShuffleMode(value)
	for _, existing := range AllowedJellyfinGroupShuffleModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinGroupShuffleMode", value)
}

// NewJellyfinGroupShuffleModeFromValue returns a pointer to a valid JellyfinGroupShuffleMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinGroupShuffleModeFromValue(v string) (*JellyfinGroupShuffleMode, error) {
	ev := JellyfinGroupShuffleMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinGroupShuffleMode: valid values are %v", v, AllowedJellyfinGroupShuffleModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinGroupShuffleMode) IsValid() bool {
	for _, existing := range AllowedJellyfinGroupShuffleModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupShuffleMode value
func (v JellyfinGroupShuffleMode) Ptr() *JellyfinGroupShuffleMode {
	return &v
}

type NullableJellyfinGroupShuffleMode struct {
	value *JellyfinGroupShuffleMode
	isSet bool
}

func (v NullableJellyfinGroupShuffleMode) Get() *JellyfinGroupShuffleMode {
	return v.value
}

func (v *NullableJellyfinGroupShuffleMode) Set(val *JellyfinGroupShuffleMode) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinGroupShuffleMode) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinGroupShuffleMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinGroupShuffleMode(val *JellyfinGroupShuffleMode) *NullableJellyfinGroupShuffleMode {
	return &NullableJellyfinGroupShuffleMode{value: val, isSet: true}
}

func (v NullableJellyfinGroupShuffleMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinGroupShuffleMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

