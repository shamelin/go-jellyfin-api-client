/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinLogLevel the model 'JellyfinLogLevel'
type JellyfinLogLevel string

// List of LogLevel
const (
	JELLYFINLOGLEVEL_TRACE JellyfinLogLevel = "Trace"
	JELLYFINLOGLEVEL_DEBUG JellyfinLogLevel = "Debug"
	JELLYFINLOGLEVEL_INFORMATION JellyfinLogLevel = "Information"
	JELLYFINLOGLEVEL_WARNING JellyfinLogLevel = "Warning"
	JELLYFINLOGLEVEL_ERROR JellyfinLogLevel = "Error"
	JELLYFINLOGLEVEL_CRITICAL JellyfinLogLevel = "Critical"
	JELLYFINLOGLEVEL_NONE JellyfinLogLevel = "None"
)

// All allowed values of JellyfinLogLevel enum
var AllowedJellyfinLogLevelEnumValues = []JellyfinLogLevel{
	"Trace",
	"Debug",
	"Information",
	"Warning",
	"Error",
	"Critical",
	"None",
}

func (v *JellyfinLogLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinLogLevel(value)
	for _, existing := range AllowedJellyfinLogLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinLogLevel", value)
}

// NewJellyfinLogLevelFromValue returns a pointer to a valid JellyfinLogLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinLogLevelFromValue(v string) (*JellyfinLogLevel, error) {
	ev := JellyfinLogLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinLogLevel: valid values are %v", v, AllowedJellyfinLogLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinLogLevel) IsValid() bool {
	for _, existing := range AllowedJellyfinLogLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogLevel value
func (v JellyfinLogLevel) Ptr() *JellyfinLogLevel {
	return &v
}

type NullableJellyfinLogLevel struct {
	value *JellyfinLogLevel
	isSet bool
}

func (v NullableJellyfinLogLevel) Get() *JellyfinLogLevel {
	return v.value
}

func (v *NullableJellyfinLogLevel) Set(val *JellyfinLogLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinLogLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinLogLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinLogLevel(val *JellyfinLogLevel) *NullableJellyfinLogLevel {
	return &NullableJellyfinLogLevel{value: val, isSet: true}
}

func (v NullableJellyfinLogLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinLogLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

