/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinSubtitlePlaybackMode An enum representing a subtitle playback mode.
type JellyfinSubtitlePlaybackMode string

// List of SubtitlePlaybackMode
const (
	JELLYFINSUBTITLEPLAYBACKMODE_DEFAULT JellyfinSubtitlePlaybackMode = "Default"
	JELLYFINSUBTITLEPLAYBACKMODE_ALWAYS JellyfinSubtitlePlaybackMode = "Always"
	JELLYFINSUBTITLEPLAYBACKMODE_ONLY_FORCED JellyfinSubtitlePlaybackMode = "OnlyForced"
	JELLYFINSUBTITLEPLAYBACKMODE_NONE JellyfinSubtitlePlaybackMode = "None"
	JELLYFINSUBTITLEPLAYBACKMODE_SMART JellyfinSubtitlePlaybackMode = "Smart"
)

// All allowed values of JellyfinSubtitlePlaybackMode enum
var AllowedJellyfinSubtitlePlaybackModeEnumValues = []JellyfinSubtitlePlaybackMode{
	"Default",
	"Always",
	"OnlyForced",
	"None",
	"Smart",
}

func (v *JellyfinSubtitlePlaybackMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinSubtitlePlaybackMode(value)
	for _, existing := range AllowedJellyfinSubtitlePlaybackModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinSubtitlePlaybackMode", value)
}

// NewJellyfinSubtitlePlaybackModeFromValue returns a pointer to a valid JellyfinSubtitlePlaybackMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinSubtitlePlaybackModeFromValue(v string) (*JellyfinSubtitlePlaybackMode, error) {
	ev := JellyfinSubtitlePlaybackMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinSubtitlePlaybackMode: valid values are %v", v, AllowedJellyfinSubtitlePlaybackModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinSubtitlePlaybackMode) IsValid() bool {
	for _, existing := range AllowedJellyfinSubtitlePlaybackModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubtitlePlaybackMode value
func (v JellyfinSubtitlePlaybackMode) Ptr() *JellyfinSubtitlePlaybackMode {
	return &v
}

type NullableJellyfinSubtitlePlaybackMode struct {
	value *JellyfinSubtitlePlaybackMode
	isSet bool
}

func (v NullableJellyfinSubtitlePlaybackMode) Get() *JellyfinSubtitlePlaybackMode {
	return v.value
}

func (v *NullableJellyfinSubtitlePlaybackMode) Set(val *JellyfinSubtitlePlaybackMode) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinSubtitlePlaybackMode) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinSubtitlePlaybackMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinSubtitlePlaybackMode(val *JellyfinSubtitlePlaybackMode) *NullableJellyfinSubtitlePlaybackMode {
	return &NullableJellyfinSubtitlePlaybackMode{value: val, isSet: true}
}

func (v NullableJellyfinSubtitlePlaybackMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinSubtitlePlaybackMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

