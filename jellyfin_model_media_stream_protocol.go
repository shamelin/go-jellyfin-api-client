/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinMediaStreamProtocol Media streaming protocol.  Lowercase for backwards compatibility.
type JellyfinMediaStreamProtocol string

// List of MediaStreamProtocol
const (
	HTTP JellyfinMediaStreamProtocol = "http"
	HLS JellyfinMediaStreamProtocol = "hls"
)

// All allowed values of JellyfinMediaStreamProtocol enum
var AllowedJellyfinMediaStreamProtocolEnumValues = []JellyfinMediaStreamProtocol{
	"http",
	"hls",
}

func (v *JellyfinMediaStreamProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinMediaStreamProtocol(value)
	for _, existing := range AllowedJellyfinMediaStreamProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinMediaStreamProtocol", value)
}

// NewJellyfinMediaStreamProtocolFromValue returns a pointer to a valid JellyfinMediaStreamProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinMediaStreamProtocolFromValue(v string) (*JellyfinMediaStreamProtocol, error) {
	ev := JellyfinMediaStreamProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinMediaStreamProtocol: valid values are %v", v, AllowedJellyfinMediaStreamProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinMediaStreamProtocol) IsValid() bool {
	for _, existing := range AllowedJellyfinMediaStreamProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MediaStreamProtocol value
func (v JellyfinMediaStreamProtocol) Ptr() *JellyfinMediaStreamProtocol {
	return &v
}

type NullableJellyfinMediaStreamProtocol struct {
	value *JellyfinMediaStreamProtocol
	isSet bool
}

func (v NullableJellyfinMediaStreamProtocol) Get() *JellyfinMediaStreamProtocol {
	return v.value
}

func (v *NullableJellyfinMediaStreamProtocol) Set(val *JellyfinMediaStreamProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinMediaStreamProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinMediaStreamProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinMediaStreamProtocol(val *JellyfinMediaStreamProtocol) *NullableJellyfinMediaStreamProtocol {
	return &NullableJellyfinMediaStreamProtocol{value: val, isSet: true}
}

func (v NullableJellyfinMediaStreamProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinMediaStreamProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

