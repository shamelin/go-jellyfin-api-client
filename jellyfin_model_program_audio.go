/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinProgramAudio the model 'JellyfinProgramAudio'
type JellyfinProgramAudio string

// List of ProgramAudio
const (
	JELLYFINPROGRAMAUDIO_MONO JellyfinProgramAudio = "Mono"
	JELLYFINPROGRAMAUDIO_STEREO JellyfinProgramAudio = "Stereo"
	JELLYFINPROGRAMAUDIO_DOLBY JellyfinProgramAudio = "Dolby"
	JELLYFINPROGRAMAUDIO_DOLBY_DIGITAL JellyfinProgramAudio = "DolbyDigital"
	JELLYFINPROGRAMAUDIO_THX JellyfinProgramAudio = "Thx"
	JELLYFINPROGRAMAUDIO_ATMOS JellyfinProgramAudio = "Atmos"
)

// All allowed values of JellyfinProgramAudio enum
var AllowedJellyfinProgramAudioEnumValues = []JellyfinProgramAudio{
	"Mono",
	"Stereo",
	"Dolby",
	"DolbyDigital",
	"Thx",
	"Atmos",
}

func (v *JellyfinProgramAudio) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinProgramAudio(value)
	for _, existing := range AllowedJellyfinProgramAudioEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinProgramAudio", value)
}

// NewJellyfinProgramAudioFromValue returns a pointer to a valid JellyfinProgramAudio
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinProgramAudioFromValue(v string) (*JellyfinProgramAudio, error) {
	ev := JellyfinProgramAudio(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinProgramAudio: valid values are %v", v, AllowedJellyfinProgramAudioEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinProgramAudio) IsValid() bool {
	for _, existing := range AllowedJellyfinProgramAudioEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgramAudio value
func (v JellyfinProgramAudio) Ptr() *JellyfinProgramAudio {
	return &v
}

type NullableJellyfinProgramAudio struct {
	value *JellyfinProgramAudio
	isSet bool
}

func (v NullableJellyfinProgramAudio) Get() *JellyfinProgramAudio {
	return v.value
}

func (v *NullableJellyfinProgramAudio) Set(val *JellyfinProgramAudio) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinProgramAudio) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinProgramAudio) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinProgramAudio(val *JellyfinProgramAudio) *NullableJellyfinProgramAudio {
	return &NullableJellyfinProgramAudio{value: val, isSet: true}
}

func (v NullableJellyfinProgramAudio) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinProgramAudio) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

