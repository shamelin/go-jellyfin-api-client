/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinForgotPasswordAction the model 'JellyfinForgotPasswordAction'
type JellyfinForgotPasswordAction string

// List of ForgotPasswordAction
const (
	JELLYFINFORGOTPASSWORDACTION_CONTACT_ADMIN JellyfinForgotPasswordAction = "ContactAdmin"
	JELLYFINFORGOTPASSWORDACTION_PIN_CODE JellyfinForgotPasswordAction = "PinCode"
	JELLYFINFORGOTPASSWORDACTION_IN_NETWORK_REQUIRED JellyfinForgotPasswordAction = "InNetworkRequired"
)

// All allowed values of JellyfinForgotPasswordAction enum
var AllowedJellyfinForgotPasswordActionEnumValues = []JellyfinForgotPasswordAction{
	"ContactAdmin",
	"PinCode",
	"InNetworkRequired",
}

func (v *JellyfinForgotPasswordAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinForgotPasswordAction(value)
	for _, existing := range AllowedJellyfinForgotPasswordActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinForgotPasswordAction", value)
}

// NewJellyfinForgotPasswordActionFromValue returns a pointer to a valid JellyfinForgotPasswordAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinForgotPasswordActionFromValue(v string) (*JellyfinForgotPasswordAction, error) {
	ev := JellyfinForgotPasswordAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinForgotPasswordAction: valid values are %v", v, AllowedJellyfinForgotPasswordActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinForgotPasswordAction) IsValid() bool {
	for _, existing := range AllowedJellyfinForgotPasswordActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ForgotPasswordAction value
func (v JellyfinForgotPasswordAction) Ptr() *JellyfinForgotPasswordAction {
	return &v
}

type NullableJellyfinForgotPasswordAction struct {
	value *JellyfinForgotPasswordAction
	isSet bool
}

func (v NullableJellyfinForgotPasswordAction) Get() *JellyfinForgotPasswordAction {
	return v.value
}

func (v *NullableJellyfinForgotPasswordAction) Set(val *JellyfinForgotPasswordAction) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinForgotPasswordAction) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinForgotPasswordAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinForgotPasswordAction(val *JellyfinForgotPasswordAction) *NullableJellyfinForgotPasswordAction {
	return &NullableJellyfinForgotPasswordAction{value: val, isSet: true}
}

func (v NullableJellyfinForgotPasswordAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinForgotPasswordAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

