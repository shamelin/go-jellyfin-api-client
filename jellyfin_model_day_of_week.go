/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinDayOfWeek the model 'JellyfinDayOfWeek'
type JellyfinDayOfWeek string

// List of DayOfWeek
const (
	SUNDAY JellyfinDayOfWeek = "Sunday"
	MONDAY JellyfinDayOfWeek = "Monday"
	TUESDAY JellyfinDayOfWeek = "Tuesday"
	WEDNESDAY JellyfinDayOfWeek = "Wednesday"
	THURSDAY JellyfinDayOfWeek = "Thursday"
	FRIDAY JellyfinDayOfWeek = "Friday"
	SATURDAY JellyfinDayOfWeek = "Saturday"
)

// All allowed values of JellyfinDayOfWeek enum
var AllowedJellyfinDayOfWeekEnumValues = []JellyfinDayOfWeek{
	"Sunday",
	"Monday",
	"Tuesday",
	"Wednesday",
	"Thursday",
	"Friday",
	"Saturday",
}

func (v *JellyfinDayOfWeek) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinDayOfWeek(value)
	for _, existing := range AllowedJellyfinDayOfWeekEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinDayOfWeek", value)
}

// NewJellyfinDayOfWeekFromValue returns a pointer to a valid JellyfinDayOfWeek
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinDayOfWeekFromValue(v string) (*JellyfinDayOfWeek, error) {
	ev := JellyfinDayOfWeek(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinDayOfWeek: valid values are %v", v, AllowedJellyfinDayOfWeekEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinDayOfWeek) IsValid() bool {
	for _, existing := range AllowedJellyfinDayOfWeekEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DayOfWeek value
func (v JellyfinDayOfWeek) Ptr() *JellyfinDayOfWeek {
	return &v
}

type NullableJellyfinDayOfWeek struct {
	value *JellyfinDayOfWeek
	isSet bool
}

func (v NullableJellyfinDayOfWeek) Get() *JellyfinDayOfWeek {
	return v.value
}

func (v *NullableJellyfinDayOfWeek) Set(val *JellyfinDayOfWeek) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinDayOfWeek) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinDayOfWeek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinDayOfWeek(val *JellyfinDayOfWeek) *NullableJellyfinDayOfWeek {
	return &NullableJellyfinDayOfWeek{value: val, isSet: true}
}

func (v NullableJellyfinDayOfWeek) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinDayOfWeek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

