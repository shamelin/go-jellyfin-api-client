/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinTonemappingAlgorithm Enum containing tonemapping algorithms.
type JellyfinTonemappingAlgorithm string

// List of TonemappingAlgorithm
const (
	NONE JellyfinTonemappingAlgorithm = "none"
	CLIP JellyfinTonemappingAlgorithm = "clip"
	LINEAR JellyfinTonemappingAlgorithm = "linear"
	GAMMA JellyfinTonemappingAlgorithm = "gamma"
	REINHARD JellyfinTonemappingAlgorithm = "reinhard"
	HABLE JellyfinTonemappingAlgorithm = "hable"
	MOBIUS JellyfinTonemappingAlgorithm = "mobius"
	BT2390 JellyfinTonemappingAlgorithm = "bt2390"
)

// All allowed values of JellyfinTonemappingAlgorithm enum
var AllowedJellyfinTonemappingAlgorithmEnumValues = []JellyfinTonemappingAlgorithm{
	"none",
	"clip",
	"linear",
	"gamma",
	"reinhard",
	"hable",
	"mobius",
	"bt2390",
}

func (v *JellyfinTonemappingAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinTonemappingAlgorithm(value)
	for _, existing := range AllowedJellyfinTonemappingAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinTonemappingAlgorithm", value)
}

// NewJellyfinTonemappingAlgorithmFromValue returns a pointer to a valid JellyfinTonemappingAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinTonemappingAlgorithmFromValue(v string) (*JellyfinTonemappingAlgorithm, error) {
	ev := JellyfinTonemappingAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinTonemappingAlgorithm: valid values are %v", v, AllowedJellyfinTonemappingAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinTonemappingAlgorithm) IsValid() bool {
	for _, existing := range AllowedJellyfinTonemappingAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TonemappingAlgorithm value
func (v JellyfinTonemappingAlgorithm) Ptr() *JellyfinTonemappingAlgorithm {
	return &v
}

type NullableJellyfinTonemappingAlgorithm struct {
	value *JellyfinTonemappingAlgorithm
	isSet bool
}

func (v NullableJellyfinTonemappingAlgorithm) Get() *JellyfinTonemappingAlgorithm {
	return v.value
}

func (v *NullableJellyfinTonemappingAlgorithm) Set(val *JellyfinTonemappingAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinTonemappingAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinTonemappingAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinTonemappingAlgorithm(val *JellyfinTonemappingAlgorithm) *NullableJellyfinTonemappingAlgorithm {
	return &NullableJellyfinTonemappingAlgorithm{value: val, isSet: true}
}

func (v NullableJellyfinTonemappingAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinTonemappingAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

