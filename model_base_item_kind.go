/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BaseItemKind The base item kind.
type BaseItemKind string

// List of BaseItemKind
const (
	AGGREGATE_FOLDER BaseItemKind = "AggregateFolder"
	AUDIO BaseItemKind = "Audio"
	AUDIO_BOOK BaseItemKind = "AudioBook"
	BASE_PLUGIN_FOLDER BaseItemKind = "BasePluginFolder"
	BOOK BaseItemKind = "Book"
	BOX_SET BaseItemKind = "BoxSet"
	CHANNEL BaseItemKind = "Channel"
	CHANNEL_FOLDER_ITEM BaseItemKind = "ChannelFolderItem"
	COLLECTION_FOLDER BaseItemKind = "CollectionFolder"
	EPISODE BaseItemKind = "Episode"
	FOLDER BaseItemKind = "Folder"
	GENRE BaseItemKind = "Genre"
	MANUAL_PLAYLISTS_FOLDER BaseItemKind = "ManualPlaylistsFolder"
	MOVIE BaseItemKind = "Movie"
	LIVE_TV_CHANNEL BaseItemKind = "LiveTvChannel"
	LIVE_TV_PROGRAM BaseItemKind = "LiveTvProgram"
	MUSIC_ALBUM BaseItemKind = "MusicAlbum"
	MUSIC_ARTIST BaseItemKind = "MusicArtist"
	MUSIC_GENRE BaseItemKind = "MusicGenre"
	MUSIC_VIDEO BaseItemKind = "MusicVideo"
	PERSON BaseItemKind = "Person"
	PHOTO BaseItemKind = "Photo"
	PHOTO_ALBUM BaseItemKind = "PhotoAlbum"
	PLAYLIST BaseItemKind = "Playlist"
	PLAYLISTS_FOLDER BaseItemKind = "PlaylistsFolder"
	PROGRAM BaseItemKind = "Program"
	RECORDING BaseItemKind = "Recording"
	SEASON BaseItemKind = "Season"
	SERIES BaseItemKind = "Series"
	STUDIO BaseItemKind = "Studio"
	TRAILER BaseItemKind = "Trailer"
	TV_CHANNEL BaseItemKind = "TvChannel"
	TV_PROGRAM BaseItemKind = "TvProgram"
	USER_ROOT_FOLDER BaseItemKind = "UserRootFolder"
	USER_VIEW BaseItemKind = "UserView"
	VIDEO BaseItemKind = "Video"
	YEAR BaseItemKind = "Year"
)

// All allowed values of BaseItemKind enum
var AllowedBaseItemKindEnumValues = []BaseItemKind{
	"AggregateFolder",
	"Audio",
	"AudioBook",
	"BasePluginFolder",
	"Book",
	"BoxSet",
	"Channel",
	"ChannelFolderItem",
	"CollectionFolder",
	"Episode",
	"Folder",
	"Genre",
	"ManualPlaylistsFolder",
	"Movie",
	"LiveTvChannel",
	"LiveTvProgram",
	"MusicAlbum",
	"MusicArtist",
	"MusicGenre",
	"MusicVideo",
	"Person",
	"Photo",
	"PhotoAlbum",
	"Playlist",
	"PlaylistsFolder",
	"Program",
	"Recording",
	"Season",
	"Series",
	"Studio",
	"Trailer",
	"TvChannel",
	"TvProgram",
	"UserRootFolder",
	"UserView",
	"Video",
	"Year",
}

func (v *BaseItemKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BaseItemKind(value)
	for _, existing := range AllowedBaseItemKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BaseItemKind", value)
}

// NewBaseItemKindFromValue returns a pointer to a valid BaseItemKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBaseItemKindFromValue(v string) (*BaseItemKind, error) {
	ev := BaseItemKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BaseItemKind: valid values are %v", v, AllowedBaseItemKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BaseItemKind) IsValid() bool {
	for _, existing := range AllowedBaseItemKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BaseItemKind value
func (v BaseItemKind) Ptr() *BaseItemKind {
	return &v
}

type NullableBaseItemKind struct {
	value *BaseItemKind
	isSet bool
}

func (v NullableBaseItemKind) Get() *BaseItemKind {
	return v.value
}

func (v *NullableBaseItemKind) Set(val *BaseItemKind) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseItemKind) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseItemKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseItemKind(val *BaseItemKind) *NullableBaseItemKind {
	return &NullableBaseItemKind{value: val, isSet: true}
}

func (v NullableBaseItemKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseItemKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

