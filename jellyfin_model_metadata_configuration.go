/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinMetadataConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinMetadataConfiguration{}

// JellyfinMetadataConfiguration struct for JellyfinMetadataConfiguration
type JellyfinMetadataConfiguration struct {
	UseFileCreationTimeForDateAdded *bool `json:"UseFileCreationTimeForDateAdded,omitempty"`
}

// NewJellyfinMetadataConfiguration instantiates a new JellyfinMetadataConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinMetadataConfiguration() *JellyfinMetadataConfiguration {
	this := JellyfinMetadataConfiguration{}
	return &this
}

// NewJellyfinMetadataConfigurationWithDefaults instantiates a new JellyfinMetadataConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinMetadataConfigurationWithDefaults() *JellyfinMetadataConfiguration {
	this := JellyfinMetadataConfiguration{}
	return &this
}

// GetUseFileCreationTimeForDateAdded returns the UseFileCreationTimeForDateAdded field value if set, zero value otherwise.
func (o *JellyfinMetadataConfiguration) GetUseFileCreationTimeForDateAdded() bool {
	if o == nil || IsNil(o.UseFileCreationTimeForDateAdded) {
		var ret bool
		return ret
	}
	return *o.UseFileCreationTimeForDateAdded
}

// GetUseFileCreationTimeForDateAddedOk returns a tuple with the UseFileCreationTimeForDateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinMetadataConfiguration) GetUseFileCreationTimeForDateAddedOk() (*bool, bool) {
	if o == nil || IsNil(o.UseFileCreationTimeForDateAdded) {
		return nil, false
	}
	return o.UseFileCreationTimeForDateAdded, true
}

// HasUseFileCreationTimeForDateAdded returns a boolean if a field has been set.
func (o *JellyfinMetadataConfiguration) HasUseFileCreationTimeForDateAdded() bool {
	if o != nil && !IsNil(o.UseFileCreationTimeForDateAdded) {
		return true
	}

	return false
}

// SetUseFileCreationTimeForDateAdded gets a reference to the given bool and assigns it to the UseFileCreationTimeForDateAdded field.
func (o *JellyfinMetadataConfiguration) SetUseFileCreationTimeForDateAdded(v bool) {
	o.UseFileCreationTimeForDateAdded = &v
}

func (o JellyfinMetadataConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinMetadataConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UseFileCreationTimeForDateAdded) {
		toSerialize["UseFileCreationTimeForDateAdded"] = o.UseFileCreationTimeForDateAdded
	}
	return toSerialize, nil
}

type NullableJellyfinMetadataConfiguration struct {
	value *JellyfinMetadataConfiguration
	isSet bool
}

func (v NullableJellyfinMetadataConfiguration) Get() *JellyfinMetadataConfiguration {
	return v.value
}

func (v *NullableJellyfinMetadataConfiguration) Set(val *JellyfinMetadataConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinMetadataConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinMetadataConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinMetadataConfiguration(val *JellyfinMetadataConfiguration) *NullableJellyfinMetadataConfiguration {
	return &NullableJellyfinMetadataConfiguration{value: val, isSet: true}
}

func (v NullableJellyfinMetadataConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinMetadataConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


