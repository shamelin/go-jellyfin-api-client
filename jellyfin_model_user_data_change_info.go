/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinUserDataChangeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinUserDataChangeInfo{}

// JellyfinUserDataChangeInfo Class UserDataChangeInfo.
type JellyfinUserDataChangeInfo struct {
	// Gets or sets the user id.
	UserId *string `json:"UserId,omitempty"`
	// Gets or sets the user data list.
	UserDataList []JellyfinUserItemDataDto `json:"UserDataList,omitempty"`
}

// NewJellyfinUserDataChangeInfo instantiates a new JellyfinUserDataChangeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinUserDataChangeInfo() *JellyfinUserDataChangeInfo {
	this := JellyfinUserDataChangeInfo{}
	return &this
}

// NewJellyfinUserDataChangeInfoWithDefaults instantiates a new JellyfinUserDataChangeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinUserDataChangeInfoWithDefaults() *JellyfinUserDataChangeInfo {
	this := JellyfinUserDataChangeInfo{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *JellyfinUserDataChangeInfo) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinUserDataChangeInfo) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *JellyfinUserDataChangeInfo) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *JellyfinUserDataChangeInfo) SetUserId(v string) {
	o.UserId = &v
}

// GetUserDataList returns the UserDataList field value if set, zero value otherwise.
func (o *JellyfinUserDataChangeInfo) GetUserDataList() []JellyfinUserItemDataDto {
	if o == nil || IsNil(o.UserDataList) {
		var ret []JellyfinUserItemDataDto
		return ret
	}
	return o.UserDataList
}

// GetUserDataListOk returns a tuple with the UserDataList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinUserDataChangeInfo) GetUserDataListOk() ([]JellyfinUserItemDataDto, bool) {
	if o == nil || IsNil(o.UserDataList) {
		return nil, false
	}
	return o.UserDataList, true
}

// HasUserDataList returns a boolean if a field has been set.
func (o *JellyfinUserDataChangeInfo) HasUserDataList() bool {
	if o != nil && !IsNil(o.UserDataList) {
		return true
	}

	return false
}

// SetUserDataList gets a reference to the given []JellyfinUserItemDataDto and assigns it to the UserDataList field.
func (o *JellyfinUserDataChangeInfo) SetUserDataList(v []JellyfinUserItemDataDto) {
	o.UserDataList = v
}

func (o JellyfinUserDataChangeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinUserDataChangeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["UserId"] = o.UserId
	}
	if !IsNil(o.UserDataList) {
		toSerialize["UserDataList"] = o.UserDataList
	}
	return toSerialize, nil
}

type NullableJellyfinUserDataChangeInfo struct {
	value *JellyfinUserDataChangeInfo
	isSet bool
}

func (v NullableJellyfinUserDataChangeInfo) Get() *JellyfinUserDataChangeInfo {
	return v.value
}

func (v *NullableJellyfinUserDataChangeInfo) Set(val *JellyfinUserDataChangeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinUserDataChangeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinUserDataChangeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinUserDataChangeInfo(val *JellyfinUserDataChangeInfo) *NullableJellyfinUserDataChangeInfo {
	return &NullableJellyfinUserDataChangeInfo{value: val, isSet: true}
}

func (v NullableJellyfinUserDataChangeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinUserDataChangeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


