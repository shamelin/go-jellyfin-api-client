/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinPersonKind The person kind.
type JellyfinPersonKind string

// List of PersonKind
const (
	JELLYFINPERSONKIND_UNKNOWN JellyfinPersonKind = "Unknown"
	JELLYFINPERSONKIND_ACTOR JellyfinPersonKind = "Actor"
	JELLYFINPERSONKIND_DIRECTOR JellyfinPersonKind = "Director"
	JELLYFINPERSONKIND_COMPOSER JellyfinPersonKind = "Composer"
	JELLYFINPERSONKIND_WRITER JellyfinPersonKind = "Writer"
	JELLYFINPERSONKIND_GUEST_STAR JellyfinPersonKind = "GuestStar"
	JELLYFINPERSONKIND_PRODUCER JellyfinPersonKind = "Producer"
	JELLYFINPERSONKIND_CONDUCTOR JellyfinPersonKind = "Conductor"
	JELLYFINPERSONKIND_LYRICIST JellyfinPersonKind = "Lyricist"
	JELLYFINPERSONKIND_ARRANGER JellyfinPersonKind = "Arranger"
	JELLYFINPERSONKIND_ENGINEER JellyfinPersonKind = "Engineer"
	JELLYFINPERSONKIND_MIXER JellyfinPersonKind = "Mixer"
	JELLYFINPERSONKIND_REMIXER JellyfinPersonKind = "Remixer"
	JELLYFINPERSONKIND_CREATOR JellyfinPersonKind = "Creator"
	JELLYFINPERSONKIND_ARTIST JellyfinPersonKind = "Artist"
	JELLYFINPERSONKIND_ALBUM_ARTIST JellyfinPersonKind = "AlbumArtist"
	JELLYFINPERSONKIND_AUTHOR JellyfinPersonKind = "Author"
	JELLYFINPERSONKIND_ILLUSTRATOR JellyfinPersonKind = "Illustrator"
	JELLYFINPERSONKIND_PENCILLER JellyfinPersonKind = "Penciller"
	JELLYFINPERSONKIND_INKER JellyfinPersonKind = "Inker"
	JELLYFINPERSONKIND_COLORIST JellyfinPersonKind = "Colorist"
	JELLYFINPERSONKIND_LETTERER JellyfinPersonKind = "Letterer"
	JELLYFINPERSONKIND_COVER_ARTIST JellyfinPersonKind = "CoverArtist"
	JELLYFINPERSONKIND_EDITOR JellyfinPersonKind = "Editor"
	JELLYFINPERSONKIND_TRANSLATOR JellyfinPersonKind = "Translator"
)

// All allowed values of JellyfinPersonKind enum
var AllowedJellyfinPersonKindEnumValues = []JellyfinPersonKind{
	"Unknown",
	"Actor",
	"Director",
	"Composer",
	"Writer",
	"GuestStar",
	"Producer",
	"Conductor",
	"Lyricist",
	"Arranger",
	"Engineer",
	"Mixer",
	"Remixer",
	"Creator",
	"Artist",
	"AlbumArtist",
	"Author",
	"Illustrator",
	"Penciller",
	"Inker",
	"Colorist",
	"Letterer",
	"CoverArtist",
	"Editor",
	"Translator",
}

func (v *JellyfinPersonKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinPersonKind(value)
	for _, existing := range AllowedJellyfinPersonKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinPersonKind", value)
}

// NewJellyfinPersonKindFromValue returns a pointer to a valid JellyfinPersonKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinPersonKindFromValue(v string) (*JellyfinPersonKind, error) {
	ev := JellyfinPersonKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinPersonKind: valid values are %v", v, AllowedJellyfinPersonKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinPersonKind) IsValid() bool {
	for _, existing := range AllowedJellyfinPersonKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PersonKind value
func (v JellyfinPersonKind) Ptr() *JellyfinPersonKind {
	return &v
}

type NullableJellyfinPersonKind struct {
	value *JellyfinPersonKind
	isSet bool
}

func (v NullableJellyfinPersonKind) Get() *JellyfinPersonKind {
	return v.value
}

func (v *NullableJellyfinPersonKind) Set(val *JellyfinPersonKind) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinPersonKind) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinPersonKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinPersonKind(val *JellyfinPersonKind) *NullableJellyfinPersonKind {
	return &NullableJellyfinPersonKind{value: val, isSet: true}
}

func (v NullableJellyfinPersonKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinPersonKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

