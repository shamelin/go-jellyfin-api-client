/*
Jellyfin API

Testing SubtitleAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_SubtitleAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SubtitleAPIService DeleteSubtitle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var index int32

		httpRes, err := apiClient.SubtitleAPI.DeleteSubtitle(context.Background(), itemId, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleAPIService DownloadRemoteSubtitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var subtitleId string

		httpRes, err := apiClient.SubtitleAPI.DownloadRemoteSubtitles(context.Background(), itemId, subtitleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleAPIService GetFallbackFont", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.SubtitleAPI.GetFallbackFont(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleAPIService GetFallbackFontList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SubtitleAPI.GetFallbackFontList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleAPIService GetRemoteSubtitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subtitleId string

		resp, httpRes, err := apiClient.SubtitleAPI.GetRemoteSubtitles(context.Background(), subtitleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleAPIService GetSubtitle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var routeItemId string
		var routeMediaSourceId string
		var routeIndex int32
		var routeFormat string

		resp, httpRes, err := apiClient.SubtitleAPI.GetSubtitle(context.Background(), routeItemId, routeMediaSourceId, routeIndex, routeFormat).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleAPIService GetSubtitlePlaylist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var index int32
		var mediaSourceId string

		resp, httpRes, err := apiClient.SubtitleAPI.GetSubtitlePlaylist(context.Background(), itemId, index, mediaSourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleAPIService GetSubtitleWithTicks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var routeItemId string
		var routeMediaSourceId string
		var routeIndex int32
		var routeStartPositionTicks int64
		var routeFormat string

		resp, httpRes, err := apiClient.SubtitleAPI.GetSubtitleWithTicks(context.Background(), routeItemId, routeMediaSourceId, routeIndex, routeStartPositionTicks, routeFormat).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleAPIService SearchRemoteSubtitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var language string

		resp, httpRes, err := apiClient.SubtitleAPI.SearchRemoteSubtitles(context.Background(), itemId, language).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleAPIService UploadSubtitle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		httpRes, err := apiClient.SubtitleAPI.UploadSubtitle(context.Background(), itemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
