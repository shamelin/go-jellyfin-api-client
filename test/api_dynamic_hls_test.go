/*
Jellyfin API

Testing DynamicHlsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DynamicHlsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DynamicHlsAPIService GetHlsAudioSegment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var playlistId string
		var segmentId int32
		var container string

		resp, httpRes, err := apiClient.DynamicHlsAPI.GetHlsAudioSegment(context.Background(), itemId, playlistId, segmentId, container).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicHlsAPIService GetHlsVideoSegment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var playlistId string
		var segmentId int32
		var container string

		resp, httpRes, err := apiClient.DynamicHlsAPI.GetHlsVideoSegment(context.Background(), itemId, playlistId, segmentId, container).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicHlsAPIService GetLiveHlsStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		resp, httpRes, err := apiClient.DynamicHlsAPI.GetLiveHlsStream(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicHlsAPIService GetMasterHlsAudioPlaylist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		resp, httpRes, err := apiClient.DynamicHlsAPI.GetMasterHlsAudioPlaylist(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicHlsAPIService GetMasterHlsVideoPlaylist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		resp, httpRes, err := apiClient.DynamicHlsAPI.GetMasterHlsVideoPlaylist(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicHlsAPIService GetVariantHlsAudioPlaylist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		resp, httpRes, err := apiClient.DynamicHlsAPI.GetVariantHlsAudioPlaylist(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicHlsAPIService GetVariantHlsVideoPlaylist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		resp, httpRes, err := apiClient.DynamicHlsAPI.GetVariantHlsVideoPlaylist(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicHlsAPIService HeadMasterHlsAudioPlaylist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		resp, httpRes, err := apiClient.DynamicHlsAPI.HeadMasterHlsAudioPlaylist(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicHlsAPIService HeadMasterHlsVideoPlaylist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		resp, httpRes, err := apiClient.DynamicHlsAPI.HeadMasterHlsVideoPlaylist(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
