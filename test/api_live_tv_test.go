/*
Jellyfin API

Testing LiveTvAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package jellyfin

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/shamelin/go-jellyfin-api-client"
)

func Test_jellyfin_LiveTvAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LiveTvAPIService AddListingProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.AddListingProvider(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService AddTunerHost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.AddTunerHost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService CancelSeriesTimer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var timerId string

		httpRes, err := apiClient.LiveTvAPI.CancelSeriesTimer(context.Background(), timerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService CancelTimer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var timerId string

		httpRes, err := apiClient.LiveTvAPI.CancelTimer(context.Background(), timerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService CreateSeriesTimer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.LiveTvAPI.CreateSeriesTimer(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService CreateTimer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.LiveTvAPI.CreateTimer(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService DeleteListingProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.LiveTvAPI.DeleteListingProvider(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService DeleteRecording", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var recordingId string

		httpRes, err := apiClient.LiveTvAPI.DeleteRecording(context.Background(), recordingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService DeleteTunerHost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.LiveTvAPI.DeleteTunerHost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService DiscoverTuners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.DiscoverTuners(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService DiscvoverTuners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.DiscvoverTuners(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.LiveTvAPI.GetChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetChannelMappingOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetChannelMappingOptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetDefaultListingProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetDefaultListingProvider(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetDefaultTimer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetDefaultTimer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetGuideInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetGuideInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetLineups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetLineups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetLiveRecordingFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var recordingId string

		resp, httpRes, err := apiClient.LiveTvAPI.GetLiveRecordingFile(context.Background(), recordingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetLiveStreamFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string
		var container string

		resp, httpRes, err := apiClient.LiveTvAPI.GetLiveStreamFile(context.Background(), streamId, container).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetLiveTvChannels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetLiveTvChannels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetLiveTvInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetLiveTvInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetLiveTvPrograms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetLiveTvPrograms(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetProgram", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var programId string

		resp, httpRes, err := apiClient.LiveTvAPI.GetProgram(context.Background(), programId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetPrograms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetPrograms(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetRecommendedPrograms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetRecommendedPrograms(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetRecording", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var recordingId string

		resp, httpRes, err := apiClient.LiveTvAPI.GetRecording(context.Background(), recordingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetRecordingFolders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetRecordingFolders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetRecordingGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId string

		httpRes, err := apiClient.LiveTvAPI.GetRecordingGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetRecordingGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetRecordingGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetRecordings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetRecordings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetRecordingsSeries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetRecordingsSeries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetSchedulesDirectCountries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetSchedulesDirectCountries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetSeriesTimer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var timerId string

		resp, httpRes, err := apiClient.LiveTvAPI.GetSeriesTimer(context.Background(), timerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetSeriesTimers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetSeriesTimers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetTimer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var timerId string

		resp, httpRes, err := apiClient.LiveTvAPI.GetTimer(context.Background(), timerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetTimers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetTimers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService GetTunerHostTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.GetTunerHostTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService ResetTuner", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tunerId string

		httpRes, err := apiClient.LiveTvAPI.ResetTuner(context.Background(), tunerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService SetChannelMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LiveTvAPI.SetChannelMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService UpdateSeriesTimer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var timerId string

		httpRes, err := apiClient.LiveTvAPI.UpdateSeriesTimer(context.Background(), timerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LiveTvAPIService UpdateTimer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var timerId string

		httpRes, err := apiClient.LiveTvAPI.UpdateTimer(context.Background(), timerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
