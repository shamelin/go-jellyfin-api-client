/*
Jellyfin API

Testing PlaystateAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_PlaystateAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PlaystateAPIService MarkPlayedItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		resp, httpRes, err := apiClient.PlaystateAPI.MarkPlayedItem(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateAPIService MarkUnplayedItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		resp, httpRes, err := apiClient.PlaystateAPI.MarkUnplayedItem(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateAPIService OnPlaybackProgress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		httpRes, err := apiClient.PlaystateAPI.OnPlaybackProgress(context.Background(), itemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateAPIService OnPlaybackStart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		httpRes, err := apiClient.PlaystateAPI.OnPlaybackStart(context.Background(), itemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateAPIService OnPlaybackStopped", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		httpRes, err := apiClient.PlaystateAPI.OnPlaybackStopped(context.Background(), itemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateAPIService PingPlaybackSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PlaystateAPI.PingPlaybackSession(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateAPIService ReportPlaybackProgress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PlaystateAPI.ReportPlaybackProgress(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateAPIService ReportPlaybackStart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PlaystateAPI.ReportPlaybackStart(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateAPIService ReportPlaybackStopped", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PlaystateAPI.ReportPlaybackStopped(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
