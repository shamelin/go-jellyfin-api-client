/*
Jellyfin API

Testing SessionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_SessionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SessionAPIService AddUserToSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string
		var userId string

		httpRes, err := apiClient.SessionAPI.AddUserToSession(context.Background(), sessionId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService DisplayContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string

		httpRes, err := apiClient.SessionAPI.DisplayContent(context.Background(), sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService GetAuthProviders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SessionAPI.GetAuthProviders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService GetPasswordResetProviders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SessionAPI.GetPasswordResetProviders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService GetSessions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SessionAPI.GetSessions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService Play", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string

		httpRes, err := apiClient.SessionAPI.Play(context.Background(), sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService PostCapabilities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SessionAPI.PostCapabilities(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService PostFullCapabilities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SessionAPI.PostFullCapabilities(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService RemoveUserFromSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string
		var userId string

		httpRes, err := apiClient.SessionAPI.RemoveUserFromSession(context.Background(), sessionId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService ReportSessionEnded", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SessionAPI.ReportSessionEnded(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService ReportViewing", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SessionAPI.ReportViewing(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService SendFullGeneralCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string

		httpRes, err := apiClient.SessionAPI.SendFullGeneralCommand(context.Background(), sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService SendGeneralCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string
		var command GeneralCommandType

		httpRes, err := apiClient.SessionAPI.SendGeneralCommand(context.Background(), sessionId, command).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService SendMessageCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string

		httpRes, err := apiClient.SessionAPI.SendMessageCommand(context.Background(), sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService SendPlaystateCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string
		var command PlaystateCommand

		httpRes, err := apiClient.SessionAPI.SendPlaystateCommand(context.Background(), sessionId, command).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionAPIService SendSystemCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string
		var command GeneralCommandType

		httpRes, err := apiClient.SessionAPI.SendSystemCommand(context.Background(), sessionId, command).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
