/*
Jellyfin API

Testing PluginsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package jellyfin

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/shamelin/go-jellyfin-api-client"
)

func Test_jellyfin_PluginsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PluginsAPIService DisablePlugin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string
		var version string

		httpRes, err := apiClient.PluginsAPI.DisablePlugin(context.Background(), pluginId, version).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService EnablePlugin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string
		var version string

		httpRes, err := apiClient.PluginsAPI.EnablePlugin(context.Background(), pluginId, version).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPluginConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string

		resp, httpRes, err := apiClient.PluginsAPI.GetPluginConfiguration(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPluginImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string
		var version string

		resp, httpRes, err := apiClient.PluginsAPI.GetPluginImage(context.Background(), pluginId, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPluginManifest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string

		httpRes, err := apiClient.PluginsAPI.GetPluginManifest(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService GetPlugins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PluginsAPI.GetPlugins(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService UninstallPlugin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string

		httpRes, err := apiClient.PluginsAPI.UninstallPlugin(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService UninstallPluginByVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string
		var version string

		httpRes, err := apiClient.PluginsAPI.UninstallPluginByVersion(context.Background(), pluginId, version).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PluginsAPIService UpdatePluginConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string

		httpRes, err := apiClient.PluginsAPI.UpdatePluginConfiguration(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
