/*
Jellyfin API

Testing ImageAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ImageAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ImageAPIService DeleteCustomSplashscreen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ImageAPI.DeleteCustomSplashscreen(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService DeleteItemImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var imageType ImageType

		httpRes, err := apiClient.ImageAPI.DeleteItemImage(context.Background(), itemId, imageType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService DeleteItemImageByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var imageType ImageType
		var imageIndex int32

		httpRes, err := apiClient.ImageAPI.DeleteItemImageByIndex(context.Background(), itemId, imageType, imageIndex).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService DeleteUserImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ImageAPI.DeleteUserImage(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetArtistImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.GetArtistImage(context.Background(), name, imageType, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetGenreImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType

		resp, httpRes, err := apiClient.ImageAPI.GetGenreImage(context.Background(), name, imageType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetGenreImageByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.GetGenreImageByIndex(context.Background(), name, imageType, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetItemImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var imageType ImageType

		resp, httpRes, err := apiClient.ImageAPI.GetItemImage(context.Background(), itemId, imageType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetItemImage2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var imageType ImageType
		var maxWidth int32
		var maxHeight int32
		var tag string
		var format ImageFormat
		var percentPlayed float64
		var unplayedCount int32
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.GetItemImage2(context.Background(), itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetItemImageByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var imageType ImageType
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.GetItemImageByIndex(context.Background(), itemId, imageType, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetItemImageInfos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string

		resp, httpRes, err := apiClient.ImageAPI.GetItemImageInfos(context.Background(), itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetMusicGenreImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType

		resp, httpRes, err := apiClient.ImageAPI.GetMusicGenreImage(context.Background(), name, imageType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetMusicGenreImageByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.GetMusicGenreImageByIndex(context.Background(), name, imageType, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetPersonImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType

		resp, httpRes, err := apiClient.ImageAPI.GetPersonImage(context.Background(), name, imageType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetPersonImageByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.GetPersonImageByIndex(context.Background(), name, imageType, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetSplashscreen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ImageAPI.GetSplashscreen(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetStudioImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType

		resp, httpRes, err := apiClient.ImageAPI.GetStudioImage(context.Background(), name, imageType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetStudioImageByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.GetStudioImageByIndex(context.Background(), name, imageType, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService GetUserImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ImageAPI.GetUserImage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadArtistImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.HeadArtistImage(context.Background(), name, imageType, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadGenreImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType

		resp, httpRes, err := apiClient.ImageAPI.HeadGenreImage(context.Background(), name, imageType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadGenreImageByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.HeadGenreImageByIndex(context.Background(), name, imageType, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadItemImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var imageType ImageType

		resp, httpRes, err := apiClient.ImageAPI.HeadItemImage(context.Background(), itemId, imageType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadItemImage2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var imageType ImageType
		var maxWidth int32
		var maxHeight int32
		var tag string
		var format ImageFormat
		var percentPlayed float64
		var unplayedCount int32
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.HeadItemImage2(context.Background(), itemId, imageType, maxWidth, maxHeight, tag, format, percentPlayed, unplayedCount, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadItemImageByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var imageType ImageType
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.HeadItemImageByIndex(context.Background(), itemId, imageType, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadMusicGenreImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType

		resp, httpRes, err := apiClient.ImageAPI.HeadMusicGenreImage(context.Background(), name, imageType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadMusicGenreImageByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.HeadMusicGenreImageByIndex(context.Background(), name, imageType, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadPersonImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType

		resp, httpRes, err := apiClient.ImageAPI.HeadPersonImage(context.Background(), name, imageType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadPersonImageByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.HeadPersonImageByIndex(context.Background(), name, imageType, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadStudioImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType

		resp, httpRes, err := apiClient.ImageAPI.HeadStudioImage(context.Background(), name, imageType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadStudioImageByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var imageType ImageType
		var imageIndex int32

		resp, httpRes, err := apiClient.ImageAPI.HeadStudioImageByIndex(context.Background(), name, imageType, imageIndex).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService HeadUserImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ImageAPI.HeadUserImage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService PostUserImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ImageAPI.PostUserImage(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService SetItemImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var imageType ImageType

		httpRes, err := apiClient.ImageAPI.SetItemImage(context.Background(), itemId, imageType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService SetItemImageByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var imageType ImageType
		var imageIndex int32

		httpRes, err := apiClient.ImageAPI.SetItemImageByIndex(context.Background(), itemId, imageType, imageIndex).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService UpdateItemImageIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var imageType ImageType
		var imageIndex int32

		httpRes, err := apiClient.ImageAPI.UpdateItemImageIndex(context.Background(), itemId, imageType, imageIndex).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageAPIService UploadCustomSplashscreen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ImageAPI.UploadCustomSplashscreen(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
