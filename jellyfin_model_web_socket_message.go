/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// JellyfinWebSocketMessage - Represents the possible websocket types
type JellyfinWebSocketMessage struct {
	JellyfinInboundWebSocketMessage *JellyfinInboundWebSocketMessage
	JellyfinOutboundWebSocketMessage *JellyfinOutboundWebSocketMessage
}

// JellyfinInboundWebSocketMessageAsJellyfinWebSocketMessage is a convenience function that returns JellyfinInboundWebSocketMessage wrapped in JellyfinWebSocketMessage
func JellyfinInboundWebSocketMessageAsJellyfinWebSocketMessage(v *JellyfinInboundWebSocketMessage) JellyfinWebSocketMessage {
	return JellyfinWebSocketMessage{
		JellyfinInboundWebSocketMessage: v,
	}
}

// JellyfinOutboundWebSocketMessageAsJellyfinWebSocketMessage is a convenience function that returns JellyfinOutboundWebSocketMessage wrapped in JellyfinWebSocketMessage
func JellyfinOutboundWebSocketMessageAsJellyfinWebSocketMessage(v *JellyfinOutboundWebSocketMessage) JellyfinWebSocketMessage {
	return JellyfinWebSocketMessage{
		JellyfinOutboundWebSocketMessage: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *JellyfinWebSocketMessage) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into JellyfinInboundWebSocketMessage
	err = newStrictDecoder(data).Decode(&dst.JellyfinInboundWebSocketMessage)
	if err == nil {
		jsonJellyfinInboundWebSocketMessage, _ := json.Marshal(dst.JellyfinInboundWebSocketMessage)
		if string(jsonJellyfinInboundWebSocketMessage) == "{}" { // empty struct
			dst.JellyfinInboundWebSocketMessage = nil
		} else {
			if err = validator.Validate(dst.JellyfinInboundWebSocketMessage); err != nil {
				dst.JellyfinInboundWebSocketMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.JellyfinInboundWebSocketMessage = nil
	}

	// try to unmarshal data into JellyfinOutboundWebSocketMessage
	err = newStrictDecoder(data).Decode(&dst.JellyfinOutboundWebSocketMessage)
	if err == nil {
		jsonJellyfinOutboundWebSocketMessage, _ := json.Marshal(dst.JellyfinOutboundWebSocketMessage)
		if string(jsonJellyfinOutboundWebSocketMessage) == "{}" { // empty struct
			dst.JellyfinOutboundWebSocketMessage = nil
		} else {
			if err = validator.Validate(dst.JellyfinOutboundWebSocketMessage); err != nil {
				dst.JellyfinOutboundWebSocketMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.JellyfinOutboundWebSocketMessage = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.JellyfinInboundWebSocketMessage = nil
		dst.JellyfinOutboundWebSocketMessage = nil

		return fmt.Errorf("data matches more than one schema in oneOf(JellyfinWebSocketMessage)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(JellyfinWebSocketMessage)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JellyfinWebSocketMessage) MarshalJSON() ([]byte, error) {
	if src.JellyfinInboundWebSocketMessage != nil {
		return json.Marshal(&src.JellyfinInboundWebSocketMessage)
	}

	if src.JellyfinOutboundWebSocketMessage != nil {
		return json.Marshal(&src.JellyfinOutboundWebSocketMessage)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JellyfinWebSocketMessage) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.JellyfinInboundWebSocketMessage != nil {
		return obj.JellyfinInboundWebSocketMessage
	}

	if obj.JellyfinOutboundWebSocketMessage != nil {
		return obj.JellyfinOutboundWebSocketMessage
	}

	// all schemas are nil
	return nil
}

type NullableJellyfinWebSocketMessage struct {
	value *JellyfinWebSocketMessage
	isSet bool
}

func (v NullableJellyfinWebSocketMessage) Get() *JellyfinWebSocketMessage {
	return v.value
}

func (v *NullableJellyfinWebSocketMessage) Set(val *JellyfinWebSocketMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinWebSocketMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinWebSocketMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinWebSocketMessage(val *JellyfinWebSocketMessage) *NullableJellyfinWebSocketMessage {
	return &NullableJellyfinWebSocketMessage{value: val, isSet: true}
}

func (v NullableJellyfinWebSocketMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinWebSocketMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


