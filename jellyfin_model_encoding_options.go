/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinEncodingOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinEncodingOptions{}

// JellyfinEncodingOptions Class EncodingOptions.
type JellyfinEncodingOptions struct {
	// Gets or sets the thread count used for encoding.
	EncodingThreadCount *int32 `json:"EncodingThreadCount,omitempty"`
	// Gets or sets the temporary transcoding path.
	TranscodingTempPath NullableString `json:"TranscodingTempPath,omitempty"`
	// Gets or sets the path to the fallback font.
	FallbackFontPath NullableString `json:"FallbackFontPath,omitempty"`
	// Gets or sets a value indicating whether to use the fallback font.
	EnableFallbackFont *bool `json:"EnableFallbackFont,omitempty"`
	// Gets or sets a value indicating whether audio VBR is enabled.
	EnableAudioVbr *bool `json:"EnableAudioVbr,omitempty"`
	// Gets or sets the audio boost applied when downmixing audio.
	DownMixAudioBoost *float64 `json:"DownMixAudioBoost,omitempty"`
	// Gets or sets the algorithm used for downmixing audio to stereo.
	DownMixStereoAlgorithm *JellyfinDownMixStereoAlgorithms `json:"DownMixStereoAlgorithm,omitempty"`
	// Gets or sets the maximum size of the muxing queue.
	MaxMuxingQueueSize *int32 `json:"MaxMuxingQueueSize,omitempty"`
	// Gets or sets a value indicating whether throttling is enabled.
	EnableThrottling *bool `json:"EnableThrottling,omitempty"`
	// Gets or sets the delay after which throttling happens.
	ThrottleDelaySeconds *int32 `json:"ThrottleDelaySeconds,omitempty"`
	// Gets or sets a value indicating whether segment deletion is enabled.
	EnableSegmentDeletion *bool `json:"EnableSegmentDeletion,omitempty"`
	// Gets or sets seconds for which segments should be kept before being deleted.
	SegmentKeepSeconds *int32 `json:"SegmentKeepSeconds,omitempty"`
	// Gets or sets the hardware acceleration type.
	HardwareAccelerationType *JellyfinHardwareAccelerationType `json:"HardwareAccelerationType,omitempty"`
	// Gets or sets the FFmpeg path as set by the user via the UI.
	EncoderAppPath NullableString `json:"EncoderAppPath,omitempty"`
	// Gets or sets the current FFmpeg path being used by the system and displayed on the transcode page.
	EncoderAppPathDisplay NullableString `json:"EncoderAppPathDisplay,omitempty"`
	// Gets or sets the VA-API device.
	VaapiDevice NullableString `json:"VaapiDevice,omitempty"`
	// Gets or sets the QSV device.
	QsvDevice NullableString `json:"QsvDevice,omitempty"`
	// Gets or sets a value indicating whether tonemapping is enabled.
	EnableTonemapping *bool `json:"EnableTonemapping,omitempty"`
	// Gets or sets a value indicating whether VPP tonemapping is enabled.
	EnableVppTonemapping *bool `json:"EnableVppTonemapping,omitempty"`
	// Gets or sets a value indicating whether videotoolbox tonemapping is enabled.
	EnableVideoToolboxTonemapping *bool `json:"EnableVideoToolboxTonemapping,omitempty"`
	// Gets or sets the tone-mapping algorithm.
	TonemappingAlgorithm *JellyfinTonemappingAlgorithm `json:"TonemappingAlgorithm,omitempty"`
	// Gets or sets the tone-mapping mode.
	TonemappingMode *JellyfinTonemappingMode `json:"TonemappingMode,omitempty"`
	// Gets or sets the tone-mapping range.
	TonemappingRange *JellyfinTonemappingRange `json:"TonemappingRange,omitempty"`
	// Gets or sets the tone-mapping desaturation.
	TonemappingDesat *float64 `json:"TonemappingDesat,omitempty"`
	// Gets or sets the tone-mapping peak.
	TonemappingPeak *float64 `json:"TonemappingPeak,omitempty"`
	// Gets or sets the tone-mapping parameters.
	TonemappingParam *float64 `json:"TonemappingParam,omitempty"`
	// Gets or sets the VPP tone-mapping brightness.
	VppTonemappingBrightness *float64 `json:"VppTonemappingBrightness,omitempty"`
	// Gets or sets the VPP tone-mapping contrast.
	VppTonemappingContrast *float64 `json:"VppTonemappingContrast,omitempty"`
	// Gets or sets the H264 CRF.
	H264Crf *int32 `json:"H264Crf,omitempty"`
	// Gets or sets the H265 CRF.
	H265Crf *int32 `json:"H265Crf,omitempty"`
	// Gets or sets the encoder preset.
	EncoderPreset NullableJellyfinEncoderPreset `json:"EncoderPreset,omitempty"`
	// Gets or sets a value indicating whether the framerate is doubled when deinterlacing.
	DeinterlaceDoubleRate *bool `json:"DeinterlaceDoubleRate,omitempty"`
	// Gets or sets the deinterlace method.
	DeinterlaceMethod *JellyfinDeinterlaceMethod `json:"DeinterlaceMethod,omitempty"`
	// Gets or sets a value indicating whether 10bit HEVC decoding is enabled.
	EnableDecodingColorDepth10Hevc *bool `json:"EnableDecodingColorDepth10Hevc,omitempty"`
	// Gets or sets a value indicating whether 10bit VP9 decoding is enabled.
	EnableDecodingColorDepth10Vp9 *bool `json:"EnableDecodingColorDepth10Vp9,omitempty"`
	// Gets or sets a value indicating whether 8/10bit HEVC RExt decoding is enabled.
	EnableDecodingColorDepth10HevcRext *bool `json:"EnableDecodingColorDepth10HevcRext,omitempty"`
	// Gets or sets a value indicating whether 12bit HEVC RExt decoding is enabled.
	EnableDecodingColorDepth12HevcRext *bool `json:"EnableDecodingColorDepth12HevcRext,omitempty"`
	// Gets or sets a value indicating whether the enhanced NVDEC is enabled.
	EnableEnhancedNvdecDecoder *bool `json:"EnableEnhancedNvdecDecoder,omitempty"`
	// Gets or sets a value indicating whether the system native hardware decoder should be used.
	PreferSystemNativeHwDecoder *bool `json:"PreferSystemNativeHwDecoder,omitempty"`
	// Gets or sets a value indicating whether the Intel H264 low-power hardware encoder should be used.
	EnableIntelLowPowerH264HwEncoder *bool `json:"EnableIntelLowPowerH264HwEncoder,omitempty"`
	// Gets or sets a value indicating whether the Intel HEVC low-power hardware encoder should be used.
	EnableIntelLowPowerHevcHwEncoder *bool `json:"EnableIntelLowPowerHevcHwEncoder,omitempty"`
	// Gets or sets a value indicating whether hardware encoding is enabled.
	EnableHardwareEncoding *bool `json:"EnableHardwareEncoding,omitempty"`
	// Gets or sets a value indicating whether HEVC encoding is enabled.
	AllowHevcEncoding *bool `json:"AllowHevcEncoding,omitempty"`
	// Gets or sets a value indicating whether AV1 encoding is enabled.
	AllowAv1Encoding *bool `json:"AllowAv1Encoding,omitempty"`
	// Gets or sets a value indicating whether subtitle extraction is enabled.
	EnableSubtitleExtraction *bool `json:"EnableSubtitleExtraction,omitempty"`
	// Gets or sets the codecs hardware encoding is used for.
	HardwareDecodingCodecs []string `json:"HardwareDecodingCodecs,omitempty"`
	// Gets or sets the file extensions on-demand metadata based keyframe extraction is enabled for.
	AllowOnDemandMetadataBasedKeyframeExtractionForExtensions []string `json:"AllowOnDemandMetadataBasedKeyframeExtractionForExtensions,omitempty"`
}

// NewJellyfinEncodingOptions instantiates a new JellyfinEncodingOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinEncodingOptions() *JellyfinEncodingOptions {
	this := JellyfinEncodingOptions{}
	return &this
}

// NewJellyfinEncodingOptionsWithDefaults instantiates a new JellyfinEncodingOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinEncodingOptionsWithDefaults() *JellyfinEncodingOptions {
	this := JellyfinEncodingOptions{}
	return &this
}

// GetEncodingThreadCount returns the EncodingThreadCount field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEncodingThreadCount() int32 {
	if o == nil || IsNil(o.EncodingThreadCount) {
		var ret int32
		return ret
	}
	return *o.EncodingThreadCount
}

// GetEncodingThreadCountOk returns a tuple with the EncodingThreadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEncodingThreadCountOk() (*int32, bool) {
	if o == nil || IsNil(o.EncodingThreadCount) {
		return nil, false
	}
	return o.EncodingThreadCount, true
}

// HasEncodingThreadCount returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEncodingThreadCount() bool {
	if o != nil && !IsNil(o.EncodingThreadCount) {
		return true
	}

	return false
}

// SetEncodingThreadCount gets a reference to the given int32 and assigns it to the EncodingThreadCount field.
func (o *JellyfinEncodingOptions) SetEncodingThreadCount(v int32) {
	o.EncodingThreadCount = &v
}

// GetTranscodingTempPath returns the TranscodingTempPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinEncodingOptions) GetTranscodingTempPath() string {
	if o == nil || IsNil(o.TranscodingTempPath.Get()) {
		var ret string
		return ret
	}
	return *o.TranscodingTempPath.Get()
}

// GetTranscodingTempPathOk returns a tuple with the TranscodingTempPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinEncodingOptions) GetTranscodingTempPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TranscodingTempPath.Get(), o.TranscodingTempPath.IsSet()
}

// HasTranscodingTempPath returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasTranscodingTempPath() bool {
	if o != nil && o.TranscodingTempPath.IsSet() {
		return true
	}

	return false
}

// SetTranscodingTempPath gets a reference to the given NullableString and assigns it to the TranscodingTempPath field.
func (o *JellyfinEncodingOptions) SetTranscodingTempPath(v string) {
	o.TranscodingTempPath.Set(&v)
}
// SetTranscodingTempPathNil sets the value for TranscodingTempPath to be an explicit nil
func (o *JellyfinEncodingOptions) SetTranscodingTempPathNil() {
	o.TranscodingTempPath.Set(nil)
}

// UnsetTranscodingTempPath ensures that no value is present for TranscodingTempPath, not even an explicit nil
func (o *JellyfinEncodingOptions) UnsetTranscodingTempPath() {
	o.TranscodingTempPath.Unset()
}

// GetFallbackFontPath returns the FallbackFontPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinEncodingOptions) GetFallbackFontPath() string {
	if o == nil || IsNil(o.FallbackFontPath.Get()) {
		var ret string
		return ret
	}
	return *o.FallbackFontPath.Get()
}

// GetFallbackFontPathOk returns a tuple with the FallbackFontPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinEncodingOptions) GetFallbackFontPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FallbackFontPath.Get(), o.FallbackFontPath.IsSet()
}

// HasFallbackFontPath returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasFallbackFontPath() bool {
	if o != nil && o.FallbackFontPath.IsSet() {
		return true
	}

	return false
}

// SetFallbackFontPath gets a reference to the given NullableString and assigns it to the FallbackFontPath field.
func (o *JellyfinEncodingOptions) SetFallbackFontPath(v string) {
	o.FallbackFontPath.Set(&v)
}
// SetFallbackFontPathNil sets the value for FallbackFontPath to be an explicit nil
func (o *JellyfinEncodingOptions) SetFallbackFontPathNil() {
	o.FallbackFontPath.Set(nil)
}

// UnsetFallbackFontPath ensures that no value is present for FallbackFontPath, not even an explicit nil
func (o *JellyfinEncodingOptions) UnsetFallbackFontPath() {
	o.FallbackFontPath.Unset()
}

// GetEnableFallbackFont returns the EnableFallbackFont field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableFallbackFont() bool {
	if o == nil || IsNil(o.EnableFallbackFont) {
		var ret bool
		return ret
	}
	return *o.EnableFallbackFont
}

// GetEnableFallbackFontOk returns a tuple with the EnableFallbackFont field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableFallbackFontOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFallbackFont) {
		return nil, false
	}
	return o.EnableFallbackFont, true
}

// HasEnableFallbackFont returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableFallbackFont() bool {
	if o != nil && !IsNil(o.EnableFallbackFont) {
		return true
	}

	return false
}

// SetEnableFallbackFont gets a reference to the given bool and assigns it to the EnableFallbackFont field.
func (o *JellyfinEncodingOptions) SetEnableFallbackFont(v bool) {
	o.EnableFallbackFont = &v
}

// GetEnableAudioVbr returns the EnableAudioVbr field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableAudioVbr() bool {
	if o == nil || IsNil(o.EnableAudioVbr) {
		var ret bool
		return ret
	}
	return *o.EnableAudioVbr
}

// GetEnableAudioVbrOk returns a tuple with the EnableAudioVbr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableAudioVbrOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAudioVbr) {
		return nil, false
	}
	return o.EnableAudioVbr, true
}

// HasEnableAudioVbr returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableAudioVbr() bool {
	if o != nil && !IsNil(o.EnableAudioVbr) {
		return true
	}

	return false
}

// SetEnableAudioVbr gets a reference to the given bool and assigns it to the EnableAudioVbr field.
func (o *JellyfinEncodingOptions) SetEnableAudioVbr(v bool) {
	o.EnableAudioVbr = &v
}

// GetDownMixAudioBoost returns the DownMixAudioBoost field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetDownMixAudioBoost() float64 {
	if o == nil || IsNil(o.DownMixAudioBoost) {
		var ret float64
		return ret
	}
	return *o.DownMixAudioBoost
}

// GetDownMixAudioBoostOk returns a tuple with the DownMixAudioBoost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetDownMixAudioBoostOk() (*float64, bool) {
	if o == nil || IsNil(o.DownMixAudioBoost) {
		return nil, false
	}
	return o.DownMixAudioBoost, true
}

// HasDownMixAudioBoost returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasDownMixAudioBoost() bool {
	if o != nil && !IsNil(o.DownMixAudioBoost) {
		return true
	}

	return false
}

// SetDownMixAudioBoost gets a reference to the given float64 and assigns it to the DownMixAudioBoost field.
func (o *JellyfinEncodingOptions) SetDownMixAudioBoost(v float64) {
	o.DownMixAudioBoost = &v
}

// GetDownMixStereoAlgorithm returns the DownMixStereoAlgorithm field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetDownMixStereoAlgorithm() JellyfinDownMixStereoAlgorithms {
	if o == nil || IsNil(o.DownMixStereoAlgorithm) {
		var ret JellyfinDownMixStereoAlgorithms
		return ret
	}
	return *o.DownMixStereoAlgorithm
}

// GetDownMixStereoAlgorithmOk returns a tuple with the DownMixStereoAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetDownMixStereoAlgorithmOk() (*JellyfinDownMixStereoAlgorithms, bool) {
	if o == nil || IsNil(o.DownMixStereoAlgorithm) {
		return nil, false
	}
	return o.DownMixStereoAlgorithm, true
}

// HasDownMixStereoAlgorithm returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasDownMixStereoAlgorithm() bool {
	if o != nil && !IsNil(o.DownMixStereoAlgorithm) {
		return true
	}

	return false
}

// SetDownMixStereoAlgorithm gets a reference to the given JellyfinDownMixStereoAlgorithms and assigns it to the DownMixStereoAlgorithm field.
func (o *JellyfinEncodingOptions) SetDownMixStereoAlgorithm(v JellyfinDownMixStereoAlgorithms) {
	o.DownMixStereoAlgorithm = &v
}

// GetMaxMuxingQueueSize returns the MaxMuxingQueueSize field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetMaxMuxingQueueSize() int32 {
	if o == nil || IsNil(o.MaxMuxingQueueSize) {
		var ret int32
		return ret
	}
	return *o.MaxMuxingQueueSize
}

// GetMaxMuxingQueueSizeOk returns a tuple with the MaxMuxingQueueSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetMaxMuxingQueueSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMuxingQueueSize) {
		return nil, false
	}
	return o.MaxMuxingQueueSize, true
}

// HasMaxMuxingQueueSize returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasMaxMuxingQueueSize() bool {
	if o != nil && !IsNil(o.MaxMuxingQueueSize) {
		return true
	}

	return false
}

// SetMaxMuxingQueueSize gets a reference to the given int32 and assigns it to the MaxMuxingQueueSize field.
func (o *JellyfinEncodingOptions) SetMaxMuxingQueueSize(v int32) {
	o.MaxMuxingQueueSize = &v
}

// GetEnableThrottling returns the EnableThrottling field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableThrottling() bool {
	if o == nil || IsNil(o.EnableThrottling) {
		var ret bool
		return ret
	}
	return *o.EnableThrottling
}

// GetEnableThrottlingOk returns a tuple with the EnableThrottling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableThrottlingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableThrottling) {
		return nil, false
	}
	return o.EnableThrottling, true
}

// HasEnableThrottling returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableThrottling() bool {
	if o != nil && !IsNil(o.EnableThrottling) {
		return true
	}

	return false
}

// SetEnableThrottling gets a reference to the given bool and assigns it to the EnableThrottling field.
func (o *JellyfinEncodingOptions) SetEnableThrottling(v bool) {
	o.EnableThrottling = &v
}

// GetThrottleDelaySeconds returns the ThrottleDelaySeconds field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetThrottleDelaySeconds() int32 {
	if o == nil || IsNil(o.ThrottleDelaySeconds) {
		var ret int32
		return ret
	}
	return *o.ThrottleDelaySeconds
}

// GetThrottleDelaySecondsOk returns a tuple with the ThrottleDelaySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetThrottleDelaySecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ThrottleDelaySeconds) {
		return nil, false
	}
	return o.ThrottleDelaySeconds, true
}

// HasThrottleDelaySeconds returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasThrottleDelaySeconds() bool {
	if o != nil && !IsNil(o.ThrottleDelaySeconds) {
		return true
	}

	return false
}

// SetThrottleDelaySeconds gets a reference to the given int32 and assigns it to the ThrottleDelaySeconds field.
func (o *JellyfinEncodingOptions) SetThrottleDelaySeconds(v int32) {
	o.ThrottleDelaySeconds = &v
}

// GetEnableSegmentDeletion returns the EnableSegmentDeletion field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableSegmentDeletion() bool {
	if o == nil || IsNil(o.EnableSegmentDeletion) {
		var ret bool
		return ret
	}
	return *o.EnableSegmentDeletion
}

// GetEnableSegmentDeletionOk returns a tuple with the EnableSegmentDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableSegmentDeletionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSegmentDeletion) {
		return nil, false
	}
	return o.EnableSegmentDeletion, true
}

// HasEnableSegmentDeletion returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableSegmentDeletion() bool {
	if o != nil && !IsNil(o.EnableSegmentDeletion) {
		return true
	}

	return false
}

// SetEnableSegmentDeletion gets a reference to the given bool and assigns it to the EnableSegmentDeletion field.
func (o *JellyfinEncodingOptions) SetEnableSegmentDeletion(v bool) {
	o.EnableSegmentDeletion = &v
}

// GetSegmentKeepSeconds returns the SegmentKeepSeconds field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetSegmentKeepSeconds() int32 {
	if o == nil || IsNil(o.SegmentKeepSeconds) {
		var ret int32
		return ret
	}
	return *o.SegmentKeepSeconds
}

// GetSegmentKeepSecondsOk returns a tuple with the SegmentKeepSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetSegmentKeepSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.SegmentKeepSeconds) {
		return nil, false
	}
	return o.SegmentKeepSeconds, true
}

// HasSegmentKeepSeconds returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasSegmentKeepSeconds() bool {
	if o != nil && !IsNil(o.SegmentKeepSeconds) {
		return true
	}

	return false
}

// SetSegmentKeepSeconds gets a reference to the given int32 and assigns it to the SegmentKeepSeconds field.
func (o *JellyfinEncodingOptions) SetSegmentKeepSeconds(v int32) {
	o.SegmentKeepSeconds = &v
}

// GetHardwareAccelerationType returns the HardwareAccelerationType field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetHardwareAccelerationType() JellyfinHardwareAccelerationType {
	if o == nil || IsNil(o.HardwareAccelerationType) {
		var ret JellyfinHardwareAccelerationType
		return ret
	}
	return *o.HardwareAccelerationType
}

// GetHardwareAccelerationTypeOk returns a tuple with the HardwareAccelerationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetHardwareAccelerationTypeOk() (*JellyfinHardwareAccelerationType, bool) {
	if o == nil || IsNil(o.HardwareAccelerationType) {
		return nil, false
	}
	return o.HardwareAccelerationType, true
}

// HasHardwareAccelerationType returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasHardwareAccelerationType() bool {
	if o != nil && !IsNil(o.HardwareAccelerationType) {
		return true
	}

	return false
}

// SetHardwareAccelerationType gets a reference to the given JellyfinHardwareAccelerationType and assigns it to the HardwareAccelerationType field.
func (o *JellyfinEncodingOptions) SetHardwareAccelerationType(v JellyfinHardwareAccelerationType) {
	o.HardwareAccelerationType = &v
}

// GetEncoderAppPath returns the EncoderAppPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinEncodingOptions) GetEncoderAppPath() string {
	if o == nil || IsNil(o.EncoderAppPath.Get()) {
		var ret string
		return ret
	}
	return *o.EncoderAppPath.Get()
}

// GetEncoderAppPathOk returns a tuple with the EncoderAppPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinEncodingOptions) GetEncoderAppPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncoderAppPath.Get(), o.EncoderAppPath.IsSet()
}

// HasEncoderAppPath returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEncoderAppPath() bool {
	if o != nil && o.EncoderAppPath.IsSet() {
		return true
	}

	return false
}

// SetEncoderAppPath gets a reference to the given NullableString and assigns it to the EncoderAppPath field.
func (o *JellyfinEncodingOptions) SetEncoderAppPath(v string) {
	o.EncoderAppPath.Set(&v)
}
// SetEncoderAppPathNil sets the value for EncoderAppPath to be an explicit nil
func (o *JellyfinEncodingOptions) SetEncoderAppPathNil() {
	o.EncoderAppPath.Set(nil)
}

// UnsetEncoderAppPath ensures that no value is present for EncoderAppPath, not even an explicit nil
func (o *JellyfinEncodingOptions) UnsetEncoderAppPath() {
	o.EncoderAppPath.Unset()
}

// GetEncoderAppPathDisplay returns the EncoderAppPathDisplay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinEncodingOptions) GetEncoderAppPathDisplay() string {
	if o == nil || IsNil(o.EncoderAppPathDisplay.Get()) {
		var ret string
		return ret
	}
	return *o.EncoderAppPathDisplay.Get()
}

// GetEncoderAppPathDisplayOk returns a tuple with the EncoderAppPathDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinEncodingOptions) GetEncoderAppPathDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncoderAppPathDisplay.Get(), o.EncoderAppPathDisplay.IsSet()
}

// HasEncoderAppPathDisplay returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEncoderAppPathDisplay() bool {
	if o != nil && o.EncoderAppPathDisplay.IsSet() {
		return true
	}

	return false
}

// SetEncoderAppPathDisplay gets a reference to the given NullableString and assigns it to the EncoderAppPathDisplay field.
func (o *JellyfinEncodingOptions) SetEncoderAppPathDisplay(v string) {
	o.EncoderAppPathDisplay.Set(&v)
}
// SetEncoderAppPathDisplayNil sets the value for EncoderAppPathDisplay to be an explicit nil
func (o *JellyfinEncodingOptions) SetEncoderAppPathDisplayNil() {
	o.EncoderAppPathDisplay.Set(nil)
}

// UnsetEncoderAppPathDisplay ensures that no value is present for EncoderAppPathDisplay, not even an explicit nil
func (o *JellyfinEncodingOptions) UnsetEncoderAppPathDisplay() {
	o.EncoderAppPathDisplay.Unset()
}

// GetVaapiDevice returns the VaapiDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinEncodingOptions) GetVaapiDevice() string {
	if o == nil || IsNil(o.VaapiDevice.Get()) {
		var ret string
		return ret
	}
	return *o.VaapiDevice.Get()
}

// GetVaapiDeviceOk returns a tuple with the VaapiDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinEncodingOptions) GetVaapiDeviceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VaapiDevice.Get(), o.VaapiDevice.IsSet()
}

// HasVaapiDevice returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasVaapiDevice() bool {
	if o != nil && o.VaapiDevice.IsSet() {
		return true
	}

	return false
}

// SetVaapiDevice gets a reference to the given NullableString and assigns it to the VaapiDevice field.
func (o *JellyfinEncodingOptions) SetVaapiDevice(v string) {
	o.VaapiDevice.Set(&v)
}
// SetVaapiDeviceNil sets the value for VaapiDevice to be an explicit nil
func (o *JellyfinEncodingOptions) SetVaapiDeviceNil() {
	o.VaapiDevice.Set(nil)
}

// UnsetVaapiDevice ensures that no value is present for VaapiDevice, not even an explicit nil
func (o *JellyfinEncodingOptions) UnsetVaapiDevice() {
	o.VaapiDevice.Unset()
}

// GetQsvDevice returns the QsvDevice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinEncodingOptions) GetQsvDevice() string {
	if o == nil || IsNil(o.QsvDevice.Get()) {
		var ret string
		return ret
	}
	return *o.QsvDevice.Get()
}

// GetQsvDeviceOk returns a tuple with the QsvDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinEncodingOptions) GetQsvDeviceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.QsvDevice.Get(), o.QsvDevice.IsSet()
}

// HasQsvDevice returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasQsvDevice() bool {
	if o != nil && o.QsvDevice.IsSet() {
		return true
	}

	return false
}

// SetQsvDevice gets a reference to the given NullableString and assigns it to the QsvDevice field.
func (o *JellyfinEncodingOptions) SetQsvDevice(v string) {
	o.QsvDevice.Set(&v)
}
// SetQsvDeviceNil sets the value for QsvDevice to be an explicit nil
func (o *JellyfinEncodingOptions) SetQsvDeviceNil() {
	o.QsvDevice.Set(nil)
}

// UnsetQsvDevice ensures that no value is present for QsvDevice, not even an explicit nil
func (o *JellyfinEncodingOptions) UnsetQsvDevice() {
	o.QsvDevice.Unset()
}

// GetEnableTonemapping returns the EnableTonemapping field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableTonemapping() bool {
	if o == nil || IsNil(o.EnableTonemapping) {
		var ret bool
		return ret
	}
	return *o.EnableTonemapping
}

// GetEnableTonemappingOk returns a tuple with the EnableTonemapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableTonemappingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTonemapping) {
		return nil, false
	}
	return o.EnableTonemapping, true
}

// HasEnableTonemapping returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableTonemapping() bool {
	if o != nil && !IsNil(o.EnableTonemapping) {
		return true
	}

	return false
}

// SetEnableTonemapping gets a reference to the given bool and assigns it to the EnableTonemapping field.
func (o *JellyfinEncodingOptions) SetEnableTonemapping(v bool) {
	o.EnableTonemapping = &v
}

// GetEnableVppTonemapping returns the EnableVppTonemapping field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableVppTonemapping() bool {
	if o == nil || IsNil(o.EnableVppTonemapping) {
		var ret bool
		return ret
	}
	return *o.EnableVppTonemapping
}

// GetEnableVppTonemappingOk returns a tuple with the EnableVppTonemapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableVppTonemappingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableVppTonemapping) {
		return nil, false
	}
	return o.EnableVppTonemapping, true
}

// HasEnableVppTonemapping returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableVppTonemapping() bool {
	if o != nil && !IsNil(o.EnableVppTonemapping) {
		return true
	}

	return false
}

// SetEnableVppTonemapping gets a reference to the given bool and assigns it to the EnableVppTonemapping field.
func (o *JellyfinEncodingOptions) SetEnableVppTonemapping(v bool) {
	o.EnableVppTonemapping = &v
}

// GetEnableVideoToolboxTonemapping returns the EnableVideoToolboxTonemapping field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableVideoToolboxTonemapping() bool {
	if o == nil || IsNil(o.EnableVideoToolboxTonemapping) {
		var ret bool
		return ret
	}
	return *o.EnableVideoToolboxTonemapping
}

// GetEnableVideoToolboxTonemappingOk returns a tuple with the EnableVideoToolboxTonemapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableVideoToolboxTonemappingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableVideoToolboxTonemapping) {
		return nil, false
	}
	return o.EnableVideoToolboxTonemapping, true
}

// HasEnableVideoToolboxTonemapping returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableVideoToolboxTonemapping() bool {
	if o != nil && !IsNil(o.EnableVideoToolboxTonemapping) {
		return true
	}

	return false
}

// SetEnableVideoToolboxTonemapping gets a reference to the given bool and assigns it to the EnableVideoToolboxTonemapping field.
func (o *JellyfinEncodingOptions) SetEnableVideoToolboxTonemapping(v bool) {
	o.EnableVideoToolboxTonemapping = &v
}

// GetTonemappingAlgorithm returns the TonemappingAlgorithm field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetTonemappingAlgorithm() JellyfinTonemappingAlgorithm {
	if o == nil || IsNil(o.TonemappingAlgorithm) {
		var ret JellyfinTonemappingAlgorithm
		return ret
	}
	return *o.TonemappingAlgorithm
}

// GetTonemappingAlgorithmOk returns a tuple with the TonemappingAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetTonemappingAlgorithmOk() (*JellyfinTonemappingAlgorithm, bool) {
	if o == nil || IsNil(o.TonemappingAlgorithm) {
		return nil, false
	}
	return o.TonemappingAlgorithm, true
}

// HasTonemappingAlgorithm returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasTonemappingAlgorithm() bool {
	if o != nil && !IsNil(o.TonemappingAlgorithm) {
		return true
	}

	return false
}

// SetTonemappingAlgorithm gets a reference to the given JellyfinTonemappingAlgorithm and assigns it to the TonemappingAlgorithm field.
func (o *JellyfinEncodingOptions) SetTonemappingAlgorithm(v JellyfinTonemappingAlgorithm) {
	o.TonemappingAlgorithm = &v
}

// GetTonemappingMode returns the TonemappingMode field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetTonemappingMode() JellyfinTonemappingMode {
	if o == nil || IsNil(o.TonemappingMode) {
		var ret JellyfinTonemappingMode
		return ret
	}
	return *o.TonemappingMode
}

// GetTonemappingModeOk returns a tuple with the TonemappingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetTonemappingModeOk() (*JellyfinTonemappingMode, bool) {
	if o == nil || IsNil(o.TonemappingMode) {
		return nil, false
	}
	return o.TonemappingMode, true
}

// HasTonemappingMode returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasTonemappingMode() bool {
	if o != nil && !IsNil(o.TonemappingMode) {
		return true
	}

	return false
}

// SetTonemappingMode gets a reference to the given JellyfinTonemappingMode and assigns it to the TonemappingMode field.
func (o *JellyfinEncodingOptions) SetTonemappingMode(v JellyfinTonemappingMode) {
	o.TonemappingMode = &v
}

// GetTonemappingRange returns the TonemappingRange field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetTonemappingRange() JellyfinTonemappingRange {
	if o == nil || IsNil(o.TonemappingRange) {
		var ret JellyfinTonemappingRange
		return ret
	}
	return *o.TonemappingRange
}

// GetTonemappingRangeOk returns a tuple with the TonemappingRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetTonemappingRangeOk() (*JellyfinTonemappingRange, bool) {
	if o == nil || IsNil(o.TonemappingRange) {
		return nil, false
	}
	return o.TonemappingRange, true
}

// HasTonemappingRange returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasTonemappingRange() bool {
	if o != nil && !IsNil(o.TonemappingRange) {
		return true
	}

	return false
}

// SetTonemappingRange gets a reference to the given JellyfinTonemappingRange and assigns it to the TonemappingRange field.
func (o *JellyfinEncodingOptions) SetTonemappingRange(v JellyfinTonemappingRange) {
	o.TonemappingRange = &v
}

// GetTonemappingDesat returns the TonemappingDesat field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetTonemappingDesat() float64 {
	if o == nil || IsNil(o.TonemappingDesat) {
		var ret float64
		return ret
	}
	return *o.TonemappingDesat
}

// GetTonemappingDesatOk returns a tuple with the TonemappingDesat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetTonemappingDesatOk() (*float64, bool) {
	if o == nil || IsNil(o.TonemappingDesat) {
		return nil, false
	}
	return o.TonemappingDesat, true
}

// HasTonemappingDesat returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasTonemappingDesat() bool {
	if o != nil && !IsNil(o.TonemappingDesat) {
		return true
	}

	return false
}

// SetTonemappingDesat gets a reference to the given float64 and assigns it to the TonemappingDesat field.
func (o *JellyfinEncodingOptions) SetTonemappingDesat(v float64) {
	o.TonemappingDesat = &v
}

// GetTonemappingPeak returns the TonemappingPeak field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetTonemappingPeak() float64 {
	if o == nil || IsNil(o.TonemappingPeak) {
		var ret float64
		return ret
	}
	return *o.TonemappingPeak
}

// GetTonemappingPeakOk returns a tuple with the TonemappingPeak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetTonemappingPeakOk() (*float64, bool) {
	if o == nil || IsNil(o.TonemappingPeak) {
		return nil, false
	}
	return o.TonemappingPeak, true
}

// HasTonemappingPeak returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasTonemappingPeak() bool {
	if o != nil && !IsNil(o.TonemappingPeak) {
		return true
	}

	return false
}

// SetTonemappingPeak gets a reference to the given float64 and assigns it to the TonemappingPeak field.
func (o *JellyfinEncodingOptions) SetTonemappingPeak(v float64) {
	o.TonemappingPeak = &v
}

// GetTonemappingParam returns the TonemappingParam field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetTonemappingParam() float64 {
	if o == nil || IsNil(o.TonemappingParam) {
		var ret float64
		return ret
	}
	return *o.TonemappingParam
}

// GetTonemappingParamOk returns a tuple with the TonemappingParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetTonemappingParamOk() (*float64, bool) {
	if o == nil || IsNil(o.TonemappingParam) {
		return nil, false
	}
	return o.TonemappingParam, true
}

// HasTonemappingParam returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasTonemappingParam() bool {
	if o != nil && !IsNil(o.TonemappingParam) {
		return true
	}

	return false
}

// SetTonemappingParam gets a reference to the given float64 and assigns it to the TonemappingParam field.
func (o *JellyfinEncodingOptions) SetTonemappingParam(v float64) {
	o.TonemappingParam = &v
}

// GetVppTonemappingBrightness returns the VppTonemappingBrightness field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetVppTonemappingBrightness() float64 {
	if o == nil || IsNil(o.VppTonemappingBrightness) {
		var ret float64
		return ret
	}
	return *o.VppTonemappingBrightness
}

// GetVppTonemappingBrightnessOk returns a tuple with the VppTonemappingBrightness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetVppTonemappingBrightnessOk() (*float64, bool) {
	if o == nil || IsNil(o.VppTonemappingBrightness) {
		return nil, false
	}
	return o.VppTonemappingBrightness, true
}

// HasVppTonemappingBrightness returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasVppTonemappingBrightness() bool {
	if o != nil && !IsNil(o.VppTonemappingBrightness) {
		return true
	}

	return false
}

// SetVppTonemappingBrightness gets a reference to the given float64 and assigns it to the VppTonemappingBrightness field.
func (o *JellyfinEncodingOptions) SetVppTonemappingBrightness(v float64) {
	o.VppTonemappingBrightness = &v
}

// GetVppTonemappingContrast returns the VppTonemappingContrast field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetVppTonemappingContrast() float64 {
	if o == nil || IsNil(o.VppTonemappingContrast) {
		var ret float64
		return ret
	}
	return *o.VppTonemappingContrast
}

// GetVppTonemappingContrastOk returns a tuple with the VppTonemappingContrast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetVppTonemappingContrastOk() (*float64, bool) {
	if o == nil || IsNil(o.VppTonemappingContrast) {
		return nil, false
	}
	return o.VppTonemappingContrast, true
}

// HasVppTonemappingContrast returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasVppTonemappingContrast() bool {
	if o != nil && !IsNil(o.VppTonemappingContrast) {
		return true
	}

	return false
}

// SetVppTonemappingContrast gets a reference to the given float64 and assigns it to the VppTonemappingContrast field.
func (o *JellyfinEncodingOptions) SetVppTonemappingContrast(v float64) {
	o.VppTonemappingContrast = &v
}

// GetH264Crf returns the H264Crf field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetH264Crf() int32 {
	if o == nil || IsNil(o.H264Crf) {
		var ret int32
		return ret
	}
	return *o.H264Crf
}

// GetH264CrfOk returns a tuple with the H264Crf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetH264CrfOk() (*int32, bool) {
	if o == nil || IsNil(o.H264Crf) {
		return nil, false
	}
	return o.H264Crf, true
}

// HasH264Crf returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasH264Crf() bool {
	if o != nil && !IsNil(o.H264Crf) {
		return true
	}

	return false
}

// SetH264Crf gets a reference to the given int32 and assigns it to the H264Crf field.
func (o *JellyfinEncodingOptions) SetH264Crf(v int32) {
	o.H264Crf = &v
}

// GetH265Crf returns the H265Crf field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetH265Crf() int32 {
	if o == nil || IsNil(o.H265Crf) {
		var ret int32
		return ret
	}
	return *o.H265Crf
}

// GetH265CrfOk returns a tuple with the H265Crf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetH265CrfOk() (*int32, bool) {
	if o == nil || IsNil(o.H265Crf) {
		return nil, false
	}
	return o.H265Crf, true
}

// HasH265Crf returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasH265Crf() bool {
	if o != nil && !IsNil(o.H265Crf) {
		return true
	}

	return false
}

// SetH265Crf gets a reference to the given int32 and assigns it to the H265Crf field.
func (o *JellyfinEncodingOptions) SetH265Crf(v int32) {
	o.H265Crf = &v
}

// GetEncoderPreset returns the EncoderPreset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinEncodingOptions) GetEncoderPreset() JellyfinEncoderPreset {
	if o == nil || IsNil(o.EncoderPreset.Get()) {
		var ret JellyfinEncoderPreset
		return ret
	}
	return *o.EncoderPreset.Get()
}

// GetEncoderPresetOk returns a tuple with the EncoderPreset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinEncodingOptions) GetEncoderPresetOk() (*JellyfinEncoderPreset, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncoderPreset.Get(), o.EncoderPreset.IsSet()
}

// HasEncoderPreset returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEncoderPreset() bool {
	if o != nil && o.EncoderPreset.IsSet() {
		return true
	}

	return false
}

// SetEncoderPreset gets a reference to the given NullableJellyfinEncoderPreset and assigns it to the EncoderPreset field.
func (o *JellyfinEncodingOptions) SetEncoderPreset(v JellyfinEncoderPreset) {
	o.EncoderPreset.Set(&v)
}
// SetEncoderPresetNil sets the value for EncoderPreset to be an explicit nil
func (o *JellyfinEncodingOptions) SetEncoderPresetNil() {
	o.EncoderPreset.Set(nil)
}

// UnsetEncoderPreset ensures that no value is present for EncoderPreset, not even an explicit nil
func (o *JellyfinEncodingOptions) UnsetEncoderPreset() {
	o.EncoderPreset.Unset()
}

// GetDeinterlaceDoubleRate returns the DeinterlaceDoubleRate field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetDeinterlaceDoubleRate() bool {
	if o == nil || IsNil(o.DeinterlaceDoubleRate) {
		var ret bool
		return ret
	}
	return *o.DeinterlaceDoubleRate
}

// GetDeinterlaceDoubleRateOk returns a tuple with the DeinterlaceDoubleRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetDeinterlaceDoubleRateOk() (*bool, bool) {
	if o == nil || IsNil(o.DeinterlaceDoubleRate) {
		return nil, false
	}
	return o.DeinterlaceDoubleRate, true
}

// HasDeinterlaceDoubleRate returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasDeinterlaceDoubleRate() bool {
	if o != nil && !IsNil(o.DeinterlaceDoubleRate) {
		return true
	}

	return false
}

// SetDeinterlaceDoubleRate gets a reference to the given bool and assigns it to the DeinterlaceDoubleRate field.
func (o *JellyfinEncodingOptions) SetDeinterlaceDoubleRate(v bool) {
	o.DeinterlaceDoubleRate = &v
}

// GetDeinterlaceMethod returns the DeinterlaceMethod field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetDeinterlaceMethod() JellyfinDeinterlaceMethod {
	if o == nil || IsNil(o.DeinterlaceMethod) {
		var ret JellyfinDeinterlaceMethod
		return ret
	}
	return *o.DeinterlaceMethod
}

// GetDeinterlaceMethodOk returns a tuple with the DeinterlaceMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetDeinterlaceMethodOk() (*JellyfinDeinterlaceMethod, bool) {
	if o == nil || IsNil(o.DeinterlaceMethod) {
		return nil, false
	}
	return o.DeinterlaceMethod, true
}

// HasDeinterlaceMethod returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasDeinterlaceMethod() bool {
	if o != nil && !IsNil(o.DeinterlaceMethod) {
		return true
	}

	return false
}

// SetDeinterlaceMethod gets a reference to the given JellyfinDeinterlaceMethod and assigns it to the DeinterlaceMethod field.
func (o *JellyfinEncodingOptions) SetDeinterlaceMethod(v JellyfinDeinterlaceMethod) {
	o.DeinterlaceMethod = &v
}

// GetEnableDecodingColorDepth10Hevc returns the EnableDecodingColorDepth10Hevc field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableDecodingColorDepth10Hevc() bool {
	if o == nil || IsNil(o.EnableDecodingColorDepth10Hevc) {
		var ret bool
		return ret
	}
	return *o.EnableDecodingColorDepth10Hevc
}

// GetEnableDecodingColorDepth10HevcOk returns a tuple with the EnableDecodingColorDepth10Hevc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableDecodingColorDepth10HevcOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDecodingColorDepth10Hevc) {
		return nil, false
	}
	return o.EnableDecodingColorDepth10Hevc, true
}

// HasEnableDecodingColorDepth10Hevc returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableDecodingColorDepth10Hevc() bool {
	if o != nil && !IsNil(o.EnableDecodingColorDepth10Hevc) {
		return true
	}

	return false
}

// SetEnableDecodingColorDepth10Hevc gets a reference to the given bool and assigns it to the EnableDecodingColorDepth10Hevc field.
func (o *JellyfinEncodingOptions) SetEnableDecodingColorDepth10Hevc(v bool) {
	o.EnableDecodingColorDepth10Hevc = &v
}

// GetEnableDecodingColorDepth10Vp9 returns the EnableDecodingColorDepth10Vp9 field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableDecodingColorDepth10Vp9() bool {
	if o == nil || IsNil(o.EnableDecodingColorDepth10Vp9) {
		var ret bool
		return ret
	}
	return *o.EnableDecodingColorDepth10Vp9
}

// GetEnableDecodingColorDepth10Vp9Ok returns a tuple with the EnableDecodingColorDepth10Vp9 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableDecodingColorDepth10Vp9Ok() (*bool, bool) {
	if o == nil || IsNil(o.EnableDecodingColorDepth10Vp9) {
		return nil, false
	}
	return o.EnableDecodingColorDepth10Vp9, true
}

// HasEnableDecodingColorDepth10Vp9 returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableDecodingColorDepth10Vp9() bool {
	if o != nil && !IsNil(o.EnableDecodingColorDepth10Vp9) {
		return true
	}

	return false
}

// SetEnableDecodingColorDepth10Vp9 gets a reference to the given bool and assigns it to the EnableDecodingColorDepth10Vp9 field.
func (o *JellyfinEncodingOptions) SetEnableDecodingColorDepth10Vp9(v bool) {
	o.EnableDecodingColorDepth10Vp9 = &v
}

// GetEnableDecodingColorDepth10HevcRext returns the EnableDecodingColorDepth10HevcRext field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableDecodingColorDepth10HevcRext() bool {
	if o == nil || IsNil(o.EnableDecodingColorDepth10HevcRext) {
		var ret bool
		return ret
	}
	return *o.EnableDecodingColorDepth10HevcRext
}

// GetEnableDecodingColorDepth10HevcRextOk returns a tuple with the EnableDecodingColorDepth10HevcRext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableDecodingColorDepth10HevcRextOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDecodingColorDepth10HevcRext) {
		return nil, false
	}
	return o.EnableDecodingColorDepth10HevcRext, true
}

// HasEnableDecodingColorDepth10HevcRext returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableDecodingColorDepth10HevcRext() bool {
	if o != nil && !IsNil(o.EnableDecodingColorDepth10HevcRext) {
		return true
	}

	return false
}

// SetEnableDecodingColorDepth10HevcRext gets a reference to the given bool and assigns it to the EnableDecodingColorDepth10HevcRext field.
func (o *JellyfinEncodingOptions) SetEnableDecodingColorDepth10HevcRext(v bool) {
	o.EnableDecodingColorDepth10HevcRext = &v
}

// GetEnableDecodingColorDepth12HevcRext returns the EnableDecodingColorDepth12HevcRext field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableDecodingColorDepth12HevcRext() bool {
	if o == nil || IsNil(o.EnableDecodingColorDepth12HevcRext) {
		var ret bool
		return ret
	}
	return *o.EnableDecodingColorDepth12HevcRext
}

// GetEnableDecodingColorDepth12HevcRextOk returns a tuple with the EnableDecodingColorDepth12HevcRext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableDecodingColorDepth12HevcRextOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDecodingColorDepth12HevcRext) {
		return nil, false
	}
	return o.EnableDecodingColorDepth12HevcRext, true
}

// HasEnableDecodingColorDepth12HevcRext returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableDecodingColorDepth12HevcRext() bool {
	if o != nil && !IsNil(o.EnableDecodingColorDepth12HevcRext) {
		return true
	}

	return false
}

// SetEnableDecodingColorDepth12HevcRext gets a reference to the given bool and assigns it to the EnableDecodingColorDepth12HevcRext field.
func (o *JellyfinEncodingOptions) SetEnableDecodingColorDepth12HevcRext(v bool) {
	o.EnableDecodingColorDepth12HevcRext = &v
}

// GetEnableEnhancedNvdecDecoder returns the EnableEnhancedNvdecDecoder field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableEnhancedNvdecDecoder() bool {
	if o == nil || IsNil(o.EnableEnhancedNvdecDecoder) {
		var ret bool
		return ret
	}
	return *o.EnableEnhancedNvdecDecoder
}

// GetEnableEnhancedNvdecDecoderOk returns a tuple with the EnableEnhancedNvdecDecoder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableEnhancedNvdecDecoderOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEnhancedNvdecDecoder) {
		return nil, false
	}
	return o.EnableEnhancedNvdecDecoder, true
}

// HasEnableEnhancedNvdecDecoder returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableEnhancedNvdecDecoder() bool {
	if o != nil && !IsNil(o.EnableEnhancedNvdecDecoder) {
		return true
	}

	return false
}

// SetEnableEnhancedNvdecDecoder gets a reference to the given bool and assigns it to the EnableEnhancedNvdecDecoder field.
func (o *JellyfinEncodingOptions) SetEnableEnhancedNvdecDecoder(v bool) {
	o.EnableEnhancedNvdecDecoder = &v
}

// GetPreferSystemNativeHwDecoder returns the PreferSystemNativeHwDecoder field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetPreferSystemNativeHwDecoder() bool {
	if o == nil || IsNil(o.PreferSystemNativeHwDecoder) {
		var ret bool
		return ret
	}
	return *o.PreferSystemNativeHwDecoder
}

// GetPreferSystemNativeHwDecoderOk returns a tuple with the PreferSystemNativeHwDecoder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetPreferSystemNativeHwDecoderOk() (*bool, bool) {
	if o == nil || IsNil(o.PreferSystemNativeHwDecoder) {
		return nil, false
	}
	return o.PreferSystemNativeHwDecoder, true
}

// HasPreferSystemNativeHwDecoder returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasPreferSystemNativeHwDecoder() bool {
	if o != nil && !IsNil(o.PreferSystemNativeHwDecoder) {
		return true
	}

	return false
}

// SetPreferSystemNativeHwDecoder gets a reference to the given bool and assigns it to the PreferSystemNativeHwDecoder field.
func (o *JellyfinEncodingOptions) SetPreferSystemNativeHwDecoder(v bool) {
	o.PreferSystemNativeHwDecoder = &v
}

// GetEnableIntelLowPowerH264HwEncoder returns the EnableIntelLowPowerH264HwEncoder field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableIntelLowPowerH264HwEncoder() bool {
	if o == nil || IsNil(o.EnableIntelLowPowerH264HwEncoder) {
		var ret bool
		return ret
	}
	return *o.EnableIntelLowPowerH264HwEncoder
}

// GetEnableIntelLowPowerH264HwEncoderOk returns a tuple with the EnableIntelLowPowerH264HwEncoder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableIntelLowPowerH264HwEncoderOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableIntelLowPowerH264HwEncoder) {
		return nil, false
	}
	return o.EnableIntelLowPowerH264HwEncoder, true
}

// HasEnableIntelLowPowerH264HwEncoder returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableIntelLowPowerH264HwEncoder() bool {
	if o != nil && !IsNil(o.EnableIntelLowPowerH264HwEncoder) {
		return true
	}

	return false
}

// SetEnableIntelLowPowerH264HwEncoder gets a reference to the given bool and assigns it to the EnableIntelLowPowerH264HwEncoder field.
func (o *JellyfinEncodingOptions) SetEnableIntelLowPowerH264HwEncoder(v bool) {
	o.EnableIntelLowPowerH264HwEncoder = &v
}

// GetEnableIntelLowPowerHevcHwEncoder returns the EnableIntelLowPowerHevcHwEncoder field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableIntelLowPowerHevcHwEncoder() bool {
	if o == nil || IsNil(o.EnableIntelLowPowerHevcHwEncoder) {
		var ret bool
		return ret
	}
	return *o.EnableIntelLowPowerHevcHwEncoder
}

// GetEnableIntelLowPowerHevcHwEncoderOk returns a tuple with the EnableIntelLowPowerHevcHwEncoder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableIntelLowPowerHevcHwEncoderOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableIntelLowPowerHevcHwEncoder) {
		return nil, false
	}
	return o.EnableIntelLowPowerHevcHwEncoder, true
}

// HasEnableIntelLowPowerHevcHwEncoder returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableIntelLowPowerHevcHwEncoder() bool {
	if o != nil && !IsNil(o.EnableIntelLowPowerHevcHwEncoder) {
		return true
	}

	return false
}

// SetEnableIntelLowPowerHevcHwEncoder gets a reference to the given bool and assigns it to the EnableIntelLowPowerHevcHwEncoder field.
func (o *JellyfinEncodingOptions) SetEnableIntelLowPowerHevcHwEncoder(v bool) {
	o.EnableIntelLowPowerHevcHwEncoder = &v
}

// GetEnableHardwareEncoding returns the EnableHardwareEncoding field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableHardwareEncoding() bool {
	if o == nil || IsNil(o.EnableHardwareEncoding) {
		var ret bool
		return ret
	}
	return *o.EnableHardwareEncoding
}

// GetEnableHardwareEncodingOk returns a tuple with the EnableHardwareEncoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableHardwareEncodingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableHardwareEncoding) {
		return nil, false
	}
	return o.EnableHardwareEncoding, true
}

// HasEnableHardwareEncoding returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableHardwareEncoding() bool {
	if o != nil && !IsNil(o.EnableHardwareEncoding) {
		return true
	}

	return false
}

// SetEnableHardwareEncoding gets a reference to the given bool and assigns it to the EnableHardwareEncoding field.
func (o *JellyfinEncodingOptions) SetEnableHardwareEncoding(v bool) {
	o.EnableHardwareEncoding = &v
}

// GetAllowHevcEncoding returns the AllowHevcEncoding field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetAllowHevcEncoding() bool {
	if o == nil || IsNil(o.AllowHevcEncoding) {
		var ret bool
		return ret
	}
	return *o.AllowHevcEncoding
}

// GetAllowHevcEncodingOk returns a tuple with the AllowHevcEncoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetAllowHevcEncodingOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowHevcEncoding) {
		return nil, false
	}
	return o.AllowHevcEncoding, true
}

// HasAllowHevcEncoding returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasAllowHevcEncoding() bool {
	if o != nil && !IsNil(o.AllowHevcEncoding) {
		return true
	}

	return false
}

// SetAllowHevcEncoding gets a reference to the given bool and assigns it to the AllowHevcEncoding field.
func (o *JellyfinEncodingOptions) SetAllowHevcEncoding(v bool) {
	o.AllowHevcEncoding = &v
}

// GetAllowAv1Encoding returns the AllowAv1Encoding field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetAllowAv1Encoding() bool {
	if o == nil || IsNil(o.AllowAv1Encoding) {
		var ret bool
		return ret
	}
	return *o.AllowAv1Encoding
}

// GetAllowAv1EncodingOk returns a tuple with the AllowAv1Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetAllowAv1EncodingOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowAv1Encoding) {
		return nil, false
	}
	return o.AllowAv1Encoding, true
}

// HasAllowAv1Encoding returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasAllowAv1Encoding() bool {
	if o != nil && !IsNil(o.AllowAv1Encoding) {
		return true
	}

	return false
}

// SetAllowAv1Encoding gets a reference to the given bool and assigns it to the AllowAv1Encoding field.
func (o *JellyfinEncodingOptions) SetAllowAv1Encoding(v bool) {
	o.AllowAv1Encoding = &v
}

// GetEnableSubtitleExtraction returns the EnableSubtitleExtraction field value if set, zero value otherwise.
func (o *JellyfinEncodingOptions) GetEnableSubtitleExtraction() bool {
	if o == nil || IsNil(o.EnableSubtitleExtraction) {
		var ret bool
		return ret
	}
	return *o.EnableSubtitleExtraction
}

// GetEnableSubtitleExtractionOk returns a tuple with the EnableSubtitleExtraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinEncodingOptions) GetEnableSubtitleExtractionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSubtitleExtraction) {
		return nil, false
	}
	return o.EnableSubtitleExtraction, true
}

// HasEnableSubtitleExtraction returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasEnableSubtitleExtraction() bool {
	if o != nil && !IsNil(o.EnableSubtitleExtraction) {
		return true
	}

	return false
}

// SetEnableSubtitleExtraction gets a reference to the given bool and assigns it to the EnableSubtitleExtraction field.
func (o *JellyfinEncodingOptions) SetEnableSubtitleExtraction(v bool) {
	o.EnableSubtitleExtraction = &v
}

// GetHardwareDecodingCodecs returns the HardwareDecodingCodecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinEncodingOptions) GetHardwareDecodingCodecs() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HardwareDecodingCodecs
}

// GetHardwareDecodingCodecsOk returns a tuple with the HardwareDecodingCodecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinEncodingOptions) GetHardwareDecodingCodecsOk() ([]string, bool) {
	if o == nil || IsNil(o.HardwareDecodingCodecs) {
		return nil, false
	}
	return o.HardwareDecodingCodecs, true
}

// HasHardwareDecodingCodecs returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasHardwareDecodingCodecs() bool {
	if o != nil && !IsNil(o.HardwareDecodingCodecs) {
		return true
	}

	return false
}

// SetHardwareDecodingCodecs gets a reference to the given []string and assigns it to the HardwareDecodingCodecs field.
func (o *JellyfinEncodingOptions) SetHardwareDecodingCodecs(v []string) {
	o.HardwareDecodingCodecs = v
}

// GetAllowOnDemandMetadataBasedKeyframeExtractionForExtensions returns the AllowOnDemandMetadataBasedKeyframeExtractionForExtensions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinEncodingOptions) GetAllowOnDemandMetadataBasedKeyframeExtractionForExtensions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllowOnDemandMetadataBasedKeyframeExtractionForExtensions
}

// GetAllowOnDemandMetadataBasedKeyframeExtractionForExtensionsOk returns a tuple with the AllowOnDemandMetadataBasedKeyframeExtractionForExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinEncodingOptions) GetAllowOnDemandMetadataBasedKeyframeExtractionForExtensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowOnDemandMetadataBasedKeyframeExtractionForExtensions) {
		return nil, false
	}
	return o.AllowOnDemandMetadataBasedKeyframeExtractionForExtensions, true
}

// HasAllowOnDemandMetadataBasedKeyframeExtractionForExtensions returns a boolean if a field has been set.
func (o *JellyfinEncodingOptions) HasAllowOnDemandMetadataBasedKeyframeExtractionForExtensions() bool {
	if o != nil && !IsNil(o.AllowOnDemandMetadataBasedKeyframeExtractionForExtensions) {
		return true
	}

	return false
}

// SetAllowOnDemandMetadataBasedKeyframeExtractionForExtensions gets a reference to the given []string and assigns it to the AllowOnDemandMetadataBasedKeyframeExtractionForExtensions field.
func (o *JellyfinEncodingOptions) SetAllowOnDemandMetadataBasedKeyframeExtractionForExtensions(v []string) {
	o.AllowOnDemandMetadataBasedKeyframeExtractionForExtensions = v
}

func (o JellyfinEncodingOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinEncodingOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EncodingThreadCount) {
		toSerialize["EncodingThreadCount"] = o.EncodingThreadCount
	}
	if o.TranscodingTempPath.IsSet() {
		toSerialize["TranscodingTempPath"] = o.TranscodingTempPath.Get()
	}
	if o.FallbackFontPath.IsSet() {
		toSerialize["FallbackFontPath"] = o.FallbackFontPath.Get()
	}
	if !IsNil(o.EnableFallbackFont) {
		toSerialize["EnableFallbackFont"] = o.EnableFallbackFont
	}
	if !IsNil(o.EnableAudioVbr) {
		toSerialize["EnableAudioVbr"] = o.EnableAudioVbr
	}
	if !IsNil(o.DownMixAudioBoost) {
		toSerialize["DownMixAudioBoost"] = o.DownMixAudioBoost
	}
	if !IsNil(o.DownMixStereoAlgorithm) {
		toSerialize["DownMixStereoAlgorithm"] = o.DownMixStereoAlgorithm
	}
	if !IsNil(o.MaxMuxingQueueSize) {
		toSerialize["MaxMuxingQueueSize"] = o.MaxMuxingQueueSize
	}
	if !IsNil(o.EnableThrottling) {
		toSerialize["EnableThrottling"] = o.EnableThrottling
	}
	if !IsNil(o.ThrottleDelaySeconds) {
		toSerialize["ThrottleDelaySeconds"] = o.ThrottleDelaySeconds
	}
	if !IsNil(o.EnableSegmentDeletion) {
		toSerialize["EnableSegmentDeletion"] = o.EnableSegmentDeletion
	}
	if !IsNil(o.SegmentKeepSeconds) {
		toSerialize["SegmentKeepSeconds"] = o.SegmentKeepSeconds
	}
	if !IsNil(o.HardwareAccelerationType) {
		toSerialize["HardwareAccelerationType"] = o.HardwareAccelerationType
	}
	if o.EncoderAppPath.IsSet() {
		toSerialize["EncoderAppPath"] = o.EncoderAppPath.Get()
	}
	if o.EncoderAppPathDisplay.IsSet() {
		toSerialize["EncoderAppPathDisplay"] = o.EncoderAppPathDisplay.Get()
	}
	if o.VaapiDevice.IsSet() {
		toSerialize["VaapiDevice"] = o.VaapiDevice.Get()
	}
	if o.QsvDevice.IsSet() {
		toSerialize["QsvDevice"] = o.QsvDevice.Get()
	}
	if !IsNil(o.EnableTonemapping) {
		toSerialize["EnableTonemapping"] = o.EnableTonemapping
	}
	if !IsNil(o.EnableVppTonemapping) {
		toSerialize["EnableVppTonemapping"] = o.EnableVppTonemapping
	}
	if !IsNil(o.EnableVideoToolboxTonemapping) {
		toSerialize["EnableVideoToolboxTonemapping"] = o.EnableVideoToolboxTonemapping
	}
	if !IsNil(o.TonemappingAlgorithm) {
		toSerialize["TonemappingAlgorithm"] = o.TonemappingAlgorithm
	}
	if !IsNil(o.TonemappingMode) {
		toSerialize["TonemappingMode"] = o.TonemappingMode
	}
	if !IsNil(o.TonemappingRange) {
		toSerialize["TonemappingRange"] = o.TonemappingRange
	}
	if !IsNil(o.TonemappingDesat) {
		toSerialize["TonemappingDesat"] = o.TonemappingDesat
	}
	if !IsNil(o.TonemappingPeak) {
		toSerialize["TonemappingPeak"] = o.TonemappingPeak
	}
	if !IsNil(o.TonemappingParam) {
		toSerialize["TonemappingParam"] = o.TonemappingParam
	}
	if !IsNil(o.VppTonemappingBrightness) {
		toSerialize["VppTonemappingBrightness"] = o.VppTonemappingBrightness
	}
	if !IsNil(o.VppTonemappingContrast) {
		toSerialize["VppTonemappingContrast"] = o.VppTonemappingContrast
	}
	if !IsNil(o.H264Crf) {
		toSerialize["H264Crf"] = o.H264Crf
	}
	if !IsNil(o.H265Crf) {
		toSerialize["H265Crf"] = o.H265Crf
	}
	if o.EncoderPreset.IsSet() {
		toSerialize["EncoderPreset"] = o.EncoderPreset.Get()
	}
	if !IsNil(o.DeinterlaceDoubleRate) {
		toSerialize["DeinterlaceDoubleRate"] = o.DeinterlaceDoubleRate
	}
	if !IsNil(o.DeinterlaceMethod) {
		toSerialize["DeinterlaceMethod"] = o.DeinterlaceMethod
	}
	if !IsNil(o.EnableDecodingColorDepth10Hevc) {
		toSerialize["EnableDecodingColorDepth10Hevc"] = o.EnableDecodingColorDepth10Hevc
	}
	if !IsNil(o.EnableDecodingColorDepth10Vp9) {
		toSerialize["EnableDecodingColorDepth10Vp9"] = o.EnableDecodingColorDepth10Vp9
	}
	if !IsNil(o.EnableDecodingColorDepth10HevcRext) {
		toSerialize["EnableDecodingColorDepth10HevcRext"] = o.EnableDecodingColorDepth10HevcRext
	}
	if !IsNil(o.EnableDecodingColorDepth12HevcRext) {
		toSerialize["EnableDecodingColorDepth12HevcRext"] = o.EnableDecodingColorDepth12HevcRext
	}
	if !IsNil(o.EnableEnhancedNvdecDecoder) {
		toSerialize["EnableEnhancedNvdecDecoder"] = o.EnableEnhancedNvdecDecoder
	}
	if !IsNil(o.PreferSystemNativeHwDecoder) {
		toSerialize["PreferSystemNativeHwDecoder"] = o.PreferSystemNativeHwDecoder
	}
	if !IsNil(o.EnableIntelLowPowerH264HwEncoder) {
		toSerialize["EnableIntelLowPowerH264HwEncoder"] = o.EnableIntelLowPowerH264HwEncoder
	}
	if !IsNil(o.EnableIntelLowPowerHevcHwEncoder) {
		toSerialize["EnableIntelLowPowerHevcHwEncoder"] = o.EnableIntelLowPowerHevcHwEncoder
	}
	if !IsNil(o.EnableHardwareEncoding) {
		toSerialize["EnableHardwareEncoding"] = o.EnableHardwareEncoding
	}
	if !IsNil(o.AllowHevcEncoding) {
		toSerialize["AllowHevcEncoding"] = o.AllowHevcEncoding
	}
	if !IsNil(o.AllowAv1Encoding) {
		toSerialize["AllowAv1Encoding"] = o.AllowAv1Encoding
	}
	if !IsNil(o.EnableSubtitleExtraction) {
		toSerialize["EnableSubtitleExtraction"] = o.EnableSubtitleExtraction
	}
	if o.HardwareDecodingCodecs != nil {
		toSerialize["HardwareDecodingCodecs"] = o.HardwareDecodingCodecs
	}
	if o.AllowOnDemandMetadataBasedKeyframeExtractionForExtensions != nil {
		toSerialize["AllowOnDemandMetadataBasedKeyframeExtractionForExtensions"] = o.AllowOnDemandMetadataBasedKeyframeExtractionForExtensions
	}
	return toSerialize, nil
}

type NullableJellyfinEncodingOptions struct {
	value *JellyfinEncodingOptions
	isSet bool
}

func (v NullableJellyfinEncodingOptions) Get() *JellyfinEncodingOptions {
	return v.value
}

func (v *NullableJellyfinEncodingOptions) Set(val *JellyfinEncodingOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinEncodingOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinEncodingOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinEncodingOptions(val *JellyfinEncodingOptions) *NullableJellyfinEncodingOptions {
	return &NullableJellyfinEncodingOptions{value: val, isSet: true}
}

func (v NullableJellyfinEncodingOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinEncodingOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


