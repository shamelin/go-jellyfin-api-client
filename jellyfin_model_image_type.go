/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinImageType Enum ImageType.
type JellyfinImageType string

// List of ImageType
const (
	PRIMARY JellyfinImageType = "Primary"
	ART JellyfinImageType = "Art"
	BACKDROP JellyfinImageType = "Backdrop"
	BANNER JellyfinImageType = "Banner"
	LOGO JellyfinImageType = "Logo"
	THUMB JellyfinImageType = "Thumb"
	DISC JellyfinImageType = "Disc"
	BOX JellyfinImageType = "Box"
	SCREENSHOT JellyfinImageType = "Screenshot"
	MENU JellyfinImageType = "Menu"
	CHAPTER JellyfinImageType = "Chapter"
	BOX_REAR JellyfinImageType = "BoxRear"
	PROFILE JellyfinImageType = "Profile"
)

// All allowed values of JellyfinImageType enum
var AllowedJellyfinImageTypeEnumValues = []JellyfinImageType{
	"Primary",
	"Art",
	"Backdrop",
	"Banner",
	"Logo",
	"Thumb",
	"Disc",
	"Box",
	"Screenshot",
	"Menu",
	"Chapter",
	"BoxRear",
	"Profile",
}

func (v *JellyfinImageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinImageType(value)
	for _, existing := range AllowedJellyfinImageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinImageType", value)
}

// NewJellyfinImageTypeFromValue returns a pointer to a valid JellyfinImageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinImageTypeFromValue(v string) (*JellyfinImageType, error) {
	ev := JellyfinImageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinImageType: valid values are %v", v, AllowedJellyfinImageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinImageType) IsValid() bool {
	for _, existing := range AllowedJellyfinImageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageType value
func (v JellyfinImageType) Ptr() *JellyfinImageType {
	return &v
}

type NullableJellyfinImageType struct {
	value *JellyfinImageType
	isSet bool
}

func (v NullableJellyfinImageType) Get() *JellyfinImageType {
	return v.value
}

func (v *NullableJellyfinImageType) Set(val *JellyfinImageType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinImageType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinImageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinImageType(val *JellyfinImageType) *NullableJellyfinImageType {
	return &NullableJellyfinImageType{value: val, isSet: true}
}

func (v NullableJellyfinImageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinImageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

