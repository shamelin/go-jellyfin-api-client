/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinVideoType Enum VideoType.
type JellyfinVideoType string

// List of VideoType
const (
	JELLYFINVIDEOTYPE_VIDEO_FILE JellyfinVideoType = "VideoFile"
	JELLYFINVIDEOTYPE_ISO JellyfinVideoType = "Iso"
	JELLYFINVIDEOTYPE_DVD JellyfinVideoType = "Dvd"
	JELLYFINVIDEOTYPE_BLU_RAY JellyfinVideoType = "BluRay"
)

// All allowed values of JellyfinVideoType enum
var AllowedJellyfinVideoTypeEnumValues = []JellyfinVideoType{
	"VideoFile",
	"Iso",
	"Dvd",
	"BluRay",
}

func (v *JellyfinVideoType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinVideoType(value)
	for _, existing := range AllowedJellyfinVideoTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinVideoType", value)
}

// NewJellyfinVideoTypeFromValue returns a pointer to a valid JellyfinVideoType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinVideoTypeFromValue(v string) (*JellyfinVideoType, error) {
	ev := JellyfinVideoType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinVideoType: valid values are %v", v, AllowedJellyfinVideoTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinVideoType) IsValid() bool {
	for _, existing := range AllowedJellyfinVideoTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VideoType value
func (v JellyfinVideoType) Ptr() *JellyfinVideoType {
	return &v
}

type NullableJellyfinVideoType struct {
	value *JellyfinVideoType
	isSet bool
}

func (v NullableJellyfinVideoType) Get() *JellyfinVideoType {
	return v.value
}

func (v *NullableJellyfinVideoType) Set(val *JellyfinVideoType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinVideoType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinVideoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinVideoType(val *JellyfinVideoType) *NullableJellyfinVideoType {
	return &NullableJellyfinVideoType{value: val, isSet: true}
}

func (v NullableJellyfinVideoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinVideoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

