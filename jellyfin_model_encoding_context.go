/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinEncodingContext the model 'JellyfinEncodingContext'
type JellyfinEncodingContext string

// List of EncodingContext
const (
	JELLYFINENCODINGCONTEXT_STREAMING JellyfinEncodingContext = "Streaming"
	JELLYFINENCODINGCONTEXT_STATIC JellyfinEncodingContext = "Static"
)

// All allowed values of JellyfinEncodingContext enum
var AllowedJellyfinEncodingContextEnumValues = []JellyfinEncodingContext{
	"Streaming",
	"Static",
}

func (v *JellyfinEncodingContext) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinEncodingContext(value)
	for _, existing := range AllowedJellyfinEncodingContextEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinEncodingContext", value)
}

// NewJellyfinEncodingContextFromValue returns a pointer to a valid JellyfinEncodingContext
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinEncodingContextFromValue(v string) (*JellyfinEncodingContext, error) {
	ev := JellyfinEncodingContext(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinEncodingContext: valid values are %v", v, AllowedJellyfinEncodingContextEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinEncodingContext) IsValid() bool {
	for _, existing := range AllowedJellyfinEncodingContextEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EncodingContext value
func (v JellyfinEncodingContext) Ptr() *JellyfinEncodingContext {
	return &v
}

type NullableJellyfinEncodingContext struct {
	value *JellyfinEncodingContext
	isSet bool
}

func (v NullableJellyfinEncodingContext) Get() *JellyfinEncodingContext {
	return v.value
}

func (v *NullableJellyfinEncodingContext) Set(val *JellyfinEncodingContext) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinEncodingContext) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinEncodingContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinEncodingContext(val *JellyfinEncodingContext) *NullableJellyfinEncodingContext {
	return &NullableJellyfinEncodingContext{value: val, isSet: true}
}

func (v NullableJellyfinEncodingContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinEncodingContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

