/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinRefreshProgressMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinRefreshProgressMessage{}

// JellyfinRefreshProgressMessage Refresh progress message.
type JellyfinRefreshProgressMessage struct {
	// Gets or sets the data.
	Data map[string]string `json:"Data,omitempty"`
	// Gets or sets the message id.
	MessageId *string `json:"MessageId,omitempty"`
	// The different kinds of messages that are used in the WebSocket api.
	MessageType *JellyfinSessionMessageType `json:"MessageType,omitempty"`
}

// NewJellyfinRefreshProgressMessage instantiates a new JellyfinRefreshProgressMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinRefreshProgressMessage() *JellyfinRefreshProgressMessage {
	this := JellyfinRefreshProgressMessage{}
	return &this
}

// NewJellyfinRefreshProgressMessageWithDefaults instantiates a new JellyfinRefreshProgressMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinRefreshProgressMessageWithDefaults() *JellyfinRefreshProgressMessage {
	this := JellyfinRefreshProgressMessage{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinRefreshProgressMessage) GetData() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinRefreshProgressMessage) GetDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return &o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *JellyfinRefreshProgressMessage) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]string and assigns it to the Data field.
func (o *JellyfinRefreshProgressMessage) SetData(v map[string]string) {
	o.Data = v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *JellyfinRefreshProgressMessage) GetMessageId() string {
	if o == nil || IsNil(o.MessageId) {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinRefreshProgressMessage) GetMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *JellyfinRefreshProgressMessage) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *JellyfinRefreshProgressMessage) SetMessageId(v string) {
	o.MessageId = &v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *JellyfinRefreshProgressMessage) GetMessageType() JellyfinSessionMessageType {
	if o == nil || IsNil(o.MessageType) {
		var ret JellyfinSessionMessageType
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinRefreshProgressMessage) GetMessageTypeOk() (*JellyfinSessionMessageType, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *JellyfinRefreshProgressMessage) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given JellyfinSessionMessageType and assigns it to the MessageType field.
func (o *JellyfinRefreshProgressMessage) SetMessageType(v JellyfinSessionMessageType) {
	o.MessageType = &v
}

func (o JellyfinRefreshProgressMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinRefreshProgressMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["Data"] = o.Data
	}
	if !IsNil(o.MessageId) {
		toSerialize["MessageId"] = o.MessageId
	}
	if !IsNil(o.MessageType) {
		toSerialize["MessageType"] = o.MessageType
	}
	return toSerialize, nil
}

type NullableJellyfinRefreshProgressMessage struct {
	value *JellyfinRefreshProgressMessage
	isSet bool
}

func (v NullableJellyfinRefreshProgressMessage) Get() *JellyfinRefreshProgressMessage {
	return v.value
}

func (v *NullableJellyfinRefreshProgressMessage) Set(val *JellyfinRefreshProgressMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinRefreshProgressMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinRefreshProgressMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinRefreshProgressMessage(val *JellyfinRefreshProgressMessage) *NullableJellyfinRefreshProgressMessage {
	return &NullableJellyfinRefreshProgressMessage{value: val, isSet: true}
}

func (v NullableJellyfinRefreshProgressMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinRefreshProgressMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


