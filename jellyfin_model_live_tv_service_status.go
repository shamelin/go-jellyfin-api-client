/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinLiveTvServiceStatus the model 'JellyfinLiveTvServiceStatus'
type JellyfinLiveTvServiceStatus string

// List of LiveTvServiceStatus
const (
	JELLYFINLIVETVSERVICESTATUS_OK JellyfinLiveTvServiceStatus = "Ok"
	JELLYFINLIVETVSERVICESTATUS_UNAVAILABLE JellyfinLiveTvServiceStatus = "Unavailable"
)

// All allowed values of JellyfinLiveTvServiceStatus enum
var AllowedJellyfinLiveTvServiceStatusEnumValues = []JellyfinLiveTvServiceStatus{
	"Ok",
	"Unavailable",
}

func (v *JellyfinLiveTvServiceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinLiveTvServiceStatus(value)
	for _, existing := range AllowedJellyfinLiveTvServiceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinLiveTvServiceStatus", value)
}

// NewJellyfinLiveTvServiceStatusFromValue returns a pointer to a valid JellyfinLiveTvServiceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinLiveTvServiceStatusFromValue(v string) (*JellyfinLiveTvServiceStatus, error) {
	ev := JellyfinLiveTvServiceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinLiveTvServiceStatus: valid values are %v", v, AllowedJellyfinLiveTvServiceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinLiveTvServiceStatus) IsValid() bool {
	for _, existing := range AllowedJellyfinLiveTvServiceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LiveTvServiceStatus value
func (v JellyfinLiveTvServiceStatus) Ptr() *JellyfinLiveTvServiceStatus {
	return &v
}

type NullableJellyfinLiveTvServiceStatus struct {
	value *JellyfinLiveTvServiceStatus
	isSet bool
}

func (v NullableJellyfinLiveTvServiceStatus) Get() *JellyfinLiveTvServiceStatus {
	return v.value
}

func (v *NullableJellyfinLiveTvServiceStatus) Set(val *JellyfinLiveTvServiceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinLiveTvServiceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinLiveTvServiceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinLiveTvServiceStatus(val *JellyfinLiveTvServiceStatus) *NullableJellyfinLiveTvServiceStatus {
	return &NullableJellyfinLiveTvServiceStatus{value: val, isSet: true}
}

func (v NullableJellyfinLiveTvServiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinLiveTvServiceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

