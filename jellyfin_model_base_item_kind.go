/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinBaseItemKind The base item kind.
type JellyfinBaseItemKind string

// List of BaseItemKind
const (
	AGGREGATE_FOLDER JellyfinBaseItemKind = "AggregateFolder"
	AUDIO JellyfinBaseItemKind = "Audio"
	AUDIO_BOOK JellyfinBaseItemKind = "AudioBook"
	BASE_PLUGIN_FOLDER JellyfinBaseItemKind = "BasePluginFolder"
	BOOK JellyfinBaseItemKind = "Book"
	BOX_SET JellyfinBaseItemKind = "BoxSet"
	CHANNEL JellyfinBaseItemKind = "Channel"
	CHANNEL_FOLDER_ITEM JellyfinBaseItemKind = "ChannelFolderItem"
	COLLECTION_FOLDER JellyfinBaseItemKind = "CollectionFolder"
	EPISODE JellyfinBaseItemKind = "Episode"
	FOLDER JellyfinBaseItemKind = "Folder"
	GENRE JellyfinBaseItemKind = "Genre"
	MANUAL_PLAYLISTS_FOLDER JellyfinBaseItemKind = "ManualPlaylistsFolder"
	MOVIE JellyfinBaseItemKind = "Movie"
	LIVE_TV_CHANNEL JellyfinBaseItemKind = "LiveTvChannel"
	LIVE_TV_PROGRAM JellyfinBaseItemKind = "LiveTvProgram"
	MUSIC_ALBUM JellyfinBaseItemKind = "MusicAlbum"
	MUSIC_ARTIST JellyfinBaseItemKind = "MusicArtist"
	MUSIC_GENRE JellyfinBaseItemKind = "MusicGenre"
	MUSIC_VIDEO JellyfinBaseItemKind = "MusicVideo"
	PERSON JellyfinBaseItemKind = "Person"
	PHOTO JellyfinBaseItemKind = "Photo"
	PHOTO_ALBUM JellyfinBaseItemKind = "PhotoAlbum"
	PLAYLIST JellyfinBaseItemKind = "Playlist"
	PLAYLISTS_FOLDER JellyfinBaseItemKind = "PlaylistsFolder"
	PROGRAM JellyfinBaseItemKind = "Program"
	RECORDING JellyfinBaseItemKind = "Recording"
	SEASON JellyfinBaseItemKind = "Season"
	SERIES JellyfinBaseItemKind = "Series"
	STUDIO JellyfinBaseItemKind = "Studio"
	TRAILER JellyfinBaseItemKind = "Trailer"
	TV_CHANNEL JellyfinBaseItemKind = "TvChannel"
	TV_PROGRAM JellyfinBaseItemKind = "TvProgram"
	USER_ROOT_FOLDER JellyfinBaseItemKind = "UserRootFolder"
	USER_VIEW JellyfinBaseItemKind = "UserView"
	VIDEO JellyfinBaseItemKind = "Video"
	YEAR JellyfinBaseItemKind = "Year"
)

// All allowed values of JellyfinBaseItemKind enum
var AllowedJellyfinBaseItemKindEnumValues = []JellyfinBaseItemKind{
	"AggregateFolder",
	"Audio",
	"AudioBook",
	"BasePluginFolder",
	"Book",
	"BoxSet",
	"Channel",
	"ChannelFolderItem",
	"CollectionFolder",
	"Episode",
	"Folder",
	"Genre",
	"ManualPlaylistsFolder",
	"Movie",
	"LiveTvChannel",
	"LiveTvProgram",
	"MusicAlbum",
	"MusicArtist",
	"MusicGenre",
	"MusicVideo",
	"Person",
	"Photo",
	"PhotoAlbum",
	"Playlist",
	"PlaylistsFolder",
	"Program",
	"Recording",
	"Season",
	"Series",
	"Studio",
	"Trailer",
	"TvChannel",
	"TvProgram",
	"UserRootFolder",
	"UserView",
	"Video",
	"Year",
}

func (v *JellyfinBaseItemKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinBaseItemKind(value)
	for _, existing := range AllowedJellyfinBaseItemKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinBaseItemKind", value)
}

// NewJellyfinBaseItemKindFromValue returns a pointer to a valid JellyfinBaseItemKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinBaseItemKindFromValue(v string) (*JellyfinBaseItemKind, error) {
	ev := JellyfinBaseItemKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinBaseItemKind: valid values are %v", v, AllowedJellyfinBaseItemKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinBaseItemKind) IsValid() bool {
	for _, existing := range AllowedJellyfinBaseItemKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BaseItemKind value
func (v JellyfinBaseItemKind) Ptr() *JellyfinBaseItemKind {
	return &v
}

type NullableJellyfinBaseItemKind struct {
	value *JellyfinBaseItemKind
	isSet bool
}

func (v NullableJellyfinBaseItemKind) Get() *JellyfinBaseItemKind {
	return v.value
}

func (v *NullableJellyfinBaseItemKind) Set(val *JellyfinBaseItemKind) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinBaseItemKind) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinBaseItemKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinBaseItemKind(val *JellyfinBaseItemKind) *NullableJellyfinBaseItemKind {
	return &NullableJellyfinBaseItemKind{value: val, isSet: true}
}

func (v NullableJellyfinBaseItemKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinBaseItemKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

