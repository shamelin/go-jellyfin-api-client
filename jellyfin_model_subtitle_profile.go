/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinSubtitleProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinSubtitleProfile{}

// JellyfinSubtitleProfile A class for subtitle profile information.
type JellyfinSubtitleProfile struct {
	// Gets or sets the format.
	Format NullableString `json:"Format,omitempty"`
	// Gets or sets the delivery method.
	Method *JellyfinSubtitleDeliveryMethod `json:"Method,omitempty"`
	// Gets or sets the DIDL mode.
	DidlMode NullableString `json:"DidlMode,omitempty"`
	// Gets or sets the language.
	Language NullableString `json:"Language,omitempty"`
	// Gets or sets the container.
	Container NullableString `json:"Container,omitempty"`
}

// NewJellyfinSubtitleProfile instantiates a new JellyfinSubtitleProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinSubtitleProfile() *JellyfinSubtitleProfile {
	this := JellyfinSubtitleProfile{}
	return &this
}

// NewJellyfinSubtitleProfileWithDefaults instantiates a new JellyfinSubtitleProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinSubtitleProfileWithDefaults() *JellyfinSubtitleProfile {
	this := JellyfinSubtitleProfile{}
	return &this
}

// GetFormat returns the Format field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSubtitleProfile) GetFormat() string {
	if o == nil || IsNil(o.Format.Get()) {
		var ret string
		return ret
	}
	return *o.Format.Get()
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSubtitleProfile) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Format.Get(), o.Format.IsSet()
}

// HasFormat returns a boolean if a field has been set.
func (o *JellyfinSubtitleProfile) HasFormat() bool {
	if o != nil && o.Format.IsSet() {
		return true
	}

	return false
}

// SetFormat gets a reference to the given NullableString and assigns it to the Format field.
func (o *JellyfinSubtitleProfile) SetFormat(v string) {
	o.Format.Set(&v)
}
// SetFormatNil sets the value for Format to be an explicit nil
func (o *JellyfinSubtitleProfile) SetFormatNil() {
	o.Format.Set(nil)
}

// UnsetFormat ensures that no value is present for Format, not even an explicit nil
func (o *JellyfinSubtitleProfile) UnsetFormat() {
	o.Format.Unset()
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *JellyfinSubtitleProfile) GetMethod() JellyfinSubtitleDeliveryMethod {
	if o == nil || IsNil(o.Method) {
		var ret JellyfinSubtitleDeliveryMethod
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSubtitleProfile) GetMethodOk() (*JellyfinSubtitleDeliveryMethod, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *JellyfinSubtitleProfile) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given JellyfinSubtitleDeliveryMethod and assigns it to the Method field.
func (o *JellyfinSubtitleProfile) SetMethod(v JellyfinSubtitleDeliveryMethod) {
	o.Method = &v
}

// GetDidlMode returns the DidlMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSubtitleProfile) GetDidlMode() string {
	if o == nil || IsNil(o.DidlMode.Get()) {
		var ret string
		return ret
	}
	return *o.DidlMode.Get()
}

// GetDidlModeOk returns a tuple with the DidlMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSubtitleProfile) GetDidlModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DidlMode.Get(), o.DidlMode.IsSet()
}

// HasDidlMode returns a boolean if a field has been set.
func (o *JellyfinSubtitleProfile) HasDidlMode() bool {
	if o != nil && o.DidlMode.IsSet() {
		return true
	}

	return false
}

// SetDidlMode gets a reference to the given NullableString and assigns it to the DidlMode field.
func (o *JellyfinSubtitleProfile) SetDidlMode(v string) {
	o.DidlMode.Set(&v)
}
// SetDidlModeNil sets the value for DidlMode to be an explicit nil
func (o *JellyfinSubtitleProfile) SetDidlModeNil() {
	o.DidlMode.Set(nil)
}

// UnsetDidlMode ensures that no value is present for DidlMode, not even an explicit nil
func (o *JellyfinSubtitleProfile) UnsetDidlMode() {
	o.DidlMode.Unset()
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSubtitleProfile) GetLanguage() string {
	if o == nil || IsNil(o.Language.Get()) {
		var ret string
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSubtitleProfile) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *JellyfinSubtitleProfile) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableString and assigns it to the Language field.
func (o *JellyfinSubtitleProfile) SetLanguage(v string) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *JellyfinSubtitleProfile) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *JellyfinSubtitleProfile) UnsetLanguage() {
	o.Language.Unset()
}

// GetContainer returns the Container field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSubtitleProfile) GetContainer() string {
	if o == nil || IsNil(o.Container.Get()) {
		var ret string
		return ret
	}
	return *o.Container.Get()
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSubtitleProfile) GetContainerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Container.Get(), o.Container.IsSet()
}

// HasContainer returns a boolean if a field has been set.
func (o *JellyfinSubtitleProfile) HasContainer() bool {
	if o != nil && o.Container.IsSet() {
		return true
	}

	return false
}

// SetContainer gets a reference to the given NullableString and assigns it to the Container field.
func (o *JellyfinSubtitleProfile) SetContainer(v string) {
	o.Container.Set(&v)
}
// SetContainerNil sets the value for Container to be an explicit nil
func (o *JellyfinSubtitleProfile) SetContainerNil() {
	o.Container.Set(nil)
}

// UnsetContainer ensures that no value is present for Container, not even an explicit nil
func (o *JellyfinSubtitleProfile) UnsetContainer() {
	o.Container.Unset()
}

func (o JellyfinSubtitleProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinSubtitleProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Format.IsSet() {
		toSerialize["Format"] = o.Format.Get()
	}
	if !IsNil(o.Method) {
		toSerialize["Method"] = o.Method
	}
	if o.DidlMode.IsSet() {
		toSerialize["DidlMode"] = o.DidlMode.Get()
	}
	if o.Language.IsSet() {
		toSerialize["Language"] = o.Language.Get()
	}
	if o.Container.IsSet() {
		toSerialize["Container"] = o.Container.Get()
	}
	return toSerialize, nil
}

type NullableJellyfinSubtitleProfile struct {
	value *JellyfinSubtitleProfile
	isSet bool
}

func (v NullableJellyfinSubtitleProfile) Get() *JellyfinSubtitleProfile {
	return v.value
}

func (v *NullableJellyfinSubtitleProfile) Set(val *JellyfinSubtitleProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinSubtitleProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinSubtitleProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinSubtitleProfile(val *JellyfinSubtitleProfile) *NullableJellyfinSubtitleProfile {
	return &NullableJellyfinSubtitleProfile{value: val, isSet: true}
}

func (v NullableJellyfinSubtitleProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinSubtitleProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


