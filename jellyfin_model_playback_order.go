/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinPlaybackOrder Enum PlaybackOrder.
type JellyfinPlaybackOrder string

// List of PlaybackOrder
const (
	JELLYFINPLAYBACKORDER_DEFAULT JellyfinPlaybackOrder = "Default"
	JELLYFINPLAYBACKORDER_SHUFFLE JellyfinPlaybackOrder = "Shuffle"
)

// All allowed values of JellyfinPlaybackOrder enum
var AllowedJellyfinPlaybackOrderEnumValues = []JellyfinPlaybackOrder{
	"Default",
	"Shuffle",
}

func (v *JellyfinPlaybackOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinPlaybackOrder(value)
	for _, existing := range AllowedJellyfinPlaybackOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinPlaybackOrder", value)
}

// NewJellyfinPlaybackOrderFromValue returns a pointer to a valid JellyfinPlaybackOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinPlaybackOrderFromValue(v string) (*JellyfinPlaybackOrder, error) {
	ev := JellyfinPlaybackOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinPlaybackOrder: valid values are %v", v, AllowedJellyfinPlaybackOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinPlaybackOrder) IsValid() bool {
	for _, existing := range AllowedJellyfinPlaybackOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlaybackOrder value
func (v JellyfinPlaybackOrder) Ptr() *JellyfinPlaybackOrder {
	return &v
}

type NullableJellyfinPlaybackOrder struct {
	value *JellyfinPlaybackOrder
	isSet bool
}

func (v NullableJellyfinPlaybackOrder) Get() *JellyfinPlaybackOrder {
	return v.value
}

func (v *NullableJellyfinPlaybackOrder) Set(val *JellyfinPlaybackOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinPlaybackOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinPlaybackOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinPlaybackOrder(val *JellyfinPlaybackOrder) *NullableJellyfinPlaybackOrder {
	return &NullableJellyfinPlaybackOrder{value: val, isSet: true}
}

func (v NullableJellyfinPlaybackOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinPlaybackOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

