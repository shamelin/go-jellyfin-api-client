/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinVideoRangeType An enum representing types of video ranges.
type JellyfinVideoRangeType string

// List of VideoRangeType
const (
	UNKNOWN JellyfinVideoRangeType = "Unknown"
	SDR JellyfinVideoRangeType = "SDR"
	HDR10 JellyfinVideoRangeType = "HDR10"
	HLG JellyfinVideoRangeType = "HLG"
	DOVI JellyfinVideoRangeType = "DOVI"
	DOVI_WITH_HDR10 JellyfinVideoRangeType = "DOVIWithHDR10"
	DOVI_WITH_HLG JellyfinVideoRangeType = "DOVIWithHLG"
	DOVI_WITH_SDR JellyfinVideoRangeType = "DOVIWithSDR"
	HDR10_PLUS JellyfinVideoRangeType = "HDR10Plus"
)

// All allowed values of JellyfinVideoRangeType enum
var AllowedJellyfinVideoRangeTypeEnumValues = []JellyfinVideoRangeType{
	"Unknown",
	"SDR",
	"HDR10",
	"HLG",
	"DOVI",
	"DOVIWithHDR10",
	"DOVIWithHLG",
	"DOVIWithSDR",
	"HDR10Plus",
}

func (v *JellyfinVideoRangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinVideoRangeType(value)
	for _, existing := range AllowedJellyfinVideoRangeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinVideoRangeType", value)
}

// NewJellyfinVideoRangeTypeFromValue returns a pointer to a valid JellyfinVideoRangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinVideoRangeTypeFromValue(v string) (*JellyfinVideoRangeType, error) {
	ev := JellyfinVideoRangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinVideoRangeType: valid values are %v", v, AllowedJellyfinVideoRangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinVideoRangeType) IsValid() bool {
	for _, existing := range AllowedJellyfinVideoRangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VideoRangeType value
func (v JellyfinVideoRangeType) Ptr() *JellyfinVideoRangeType {
	return &v
}

type NullableJellyfinVideoRangeType struct {
	value *JellyfinVideoRangeType
	isSet bool
}

func (v NullableJellyfinVideoRangeType) Get() *JellyfinVideoRangeType {
	return v.value
}

func (v *NullableJellyfinVideoRangeType) Set(val *JellyfinVideoRangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinVideoRangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinVideoRangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinVideoRangeType(val *JellyfinVideoRangeType) *NullableJellyfinVideoRangeType {
	return &NullableJellyfinVideoRangeType{value: val, isSet: true}
}

func (v NullableJellyfinVideoRangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinVideoRangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

