/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinVersionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinVersionInfo{}

// JellyfinVersionInfo Defines the MediaBrowser.Model.Updates.VersionInfo class.
type JellyfinVersionInfo struct {
	// Gets or sets the version.
	Version *string `json:"version,omitempty"`
	// Gets the version as a System.Version.
	VersionNumber *string `json:"VersionNumber,omitempty"`
	// Gets or sets the changelog for this version.
	Changelog NullableString `json:"changelog,omitempty"`
	// Gets or sets the ABI that this version was built against.
	TargetAbi NullableString `json:"targetAbi,omitempty"`
	// Gets or sets the source URL.
	SourceUrl NullableString `json:"sourceUrl,omitempty"`
	// Gets or sets a checksum for the binary.
	Checksum NullableString `json:"checksum,omitempty"`
	// Gets or sets a timestamp of when the binary was built.
	Timestamp NullableString `json:"timestamp,omitempty"`
	// Gets or sets the repository name.
	RepositoryName *string `json:"repositoryName,omitempty"`
	// Gets or sets the repository url.
	RepositoryUrl *string `json:"repositoryUrl,omitempty"`
}

// NewJellyfinVersionInfo instantiates a new JellyfinVersionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinVersionInfo() *JellyfinVersionInfo {
	this := JellyfinVersionInfo{}
	return &this
}

// NewJellyfinVersionInfoWithDefaults instantiates a new JellyfinVersionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinVersionInfoWithDefaults() *JellyfinVersionInfo {
	this := JellyfinVersionInfo{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *JellyfinVersionInfo) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinVersionInfo) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *JellyfinVersionInfo) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *JellyfinVersionInfo) SetVersion(v string) {
	o.Version = &v
}

// GetVersionNumber returns the VersionNumber field value if set, zero value otherwise.
func (o *JellyfinVersionInfo) GetVersionNumber() string {
	if o == nil || IsNil(o.VersionNumber) {
		var ret string
		return ret
	}
	return *o.VersionNumber
}

// GetVersionNumberOk returns a tuple with the VersionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinVersionInfo) GetVersionNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VersionNumber) {
		return nil, false
	}
	return o.VersionNumber, true
}

// HasVersionNumber returns a boolean if a field has been set.
func (o *JellyfinVersionInfo) HasVersionNumber() bool {
	if o != nil && !IsNil(o.VersionNumber) {
		return true
	}

	return false
}

// SetVersionNumber gets a reference to the given string and assigns it to the VersionNumber field.
func (o *JellyfinVersionInfo) SetVersionNumber(v string) {
	o.VersionNumber = &v
}

// GetChangelog returns the Changelog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinVersionInfo) GetChangelog() string {
	if o == nil || IsNil(o.Changelog.Get()) {
		var ret string
		return ret
	}
	return *o.Changelog.Get()
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinVersionInfo) GetChangelogOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Changelog.Get(), o.Changelog.IsSet()
}

// HasChangelog returns a boolean if a field has been set.
func (o *JellyfinVersionInfo) HasChangelog() bool {
	if o != nil && o.Changelog.IsSet() {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given NullableString and assigns it to the Changelog field.
func (o *JellyfinVersionInfo) SetChangelog(v string) {
	o.Changelog.Set(&v)
}
// SetChangelogNil sets the value for Changelog to be an explicit nil
func (o *JellyfinVersionInfo) SetChangelogNil() {
	o.Changelog.Set(nil)
}

// UnsetChangelog ensures that no value is present for Changelog, not even an explicit nil
func (o *JellyfinVersionInfo) UnsetChangelog() {
	o.Changelog.Unset()
}

// GetTargetAbi returns the TargetAbi field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinVersionInfo) GetTargetAbi() string {
	if o == nil || IsNil(o.TargetAbi.Get()) {
		var ret string
		return ret
	}
	return *o.TargetAbi.Get()
}

// GetTargetAbiOk returns a tuple with the TargetAbi field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinVersionInfo) GetTargetAbiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetAbi.Get(), o.TargetAbi.IsSet()
}

// HasTargetAbi returns a boolean if a field has been set.
func (o *JellyfinVersionInfo) HasTargetAbi() bool {
	if o != nil && o.TargetAbi.IsSet() {
		return true
	}

	return false
}

// SetTargetAbi gets a reference to the given NullableString and assigns it to the TargetAbi field.
func (o *JellyfinVersionInfo) SetTargetAbi(v string) {
	o.TargetAbi.Set(&v)
}
// SetTargetAbiNil sets the value for TargetAbi to be an explicit nil
func (o *JellyfinVersionInfo) SetTargetAbiNil() {
	o.TargetAbi.Set(nil)
}

// UnsetTargetAbi ensures that no value is present for TargetAbi, not even an explicit nil
func (o *JellyfinVersionInfo) UnsetTargetAbi() {
	o.TargetAbi.Unset()
}

// GetSourceUrl returns the SourceUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinVersionInfo) GetSourceUrl() string {
	if o == nil || IsNil(o.SourceUrl.Get()) {
		var ret string
		return ret
	}
	return *o.SourceUrl.Get()
}

// GetSourceUrlOk returns a tuple with the SourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinVersionInfo) GetSourceUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceUrl.Get(), o.SourceUrl.IsSet()
}

// HasSourceUrl returns a boolean if a field has been set.
func (o *JellyfinVersionInfo) HasSourceUrl() bool {
	if o != nil && o.SourceUrl.IsSet() {
		return true
	}

	return false
}

// SetSourceUrl gets a reference to the given NullableString and assigns it to the SourceUrl field.
func (o *JellyfinVersionInfo) SetSourceUrl(v string) {
	o.SourceUrl.Set(&v)
}
// SetSourceUrlNil sets the value for SourceUrl to be an explicit nil
func (o *JellyfinVersionInfo) SetSourceUrlNil() {
	o.SourceUrl.Set(nil)
}

// UnsetSourceUrl ensures that no value is present for SourceUrl, not even an explicit nil
func (o *JellyfinVersionInfo) UnsetSourceUrl() {
	o.SourceUrl.Unset()
}

// GetChecksum returns the Checksum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinVersionInfo) GetChecksum() string {
	if o == nil || IsNil(o.Checksum.Get()) {
		var ret string
		return ret
	}
	return *o.Checksum.Get()
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinVersionInfo) GetChecksumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Checksum.Get(), o.Checksum.IsSet()
}

// HasChecksum returns a boolean if a field has been set.
func (o *JellyfinVersionInfo) HasChecksum() bool {
	if o != nil && o.Checksum.IsSet() {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given NullableString and assigns it to the Checksum field.
func (o *JellyfinVersionInfo) SetChecksum(v string) {
	o.Checksum.Set(&v)
}
// SetChecksumNil sets the value for Checksum to be an explicit nil
func (o *JellyfinVersionInfo) SetChecksumNil() {
	o.Checksum.Set(nil)
}

// UnsetChecksum ensures that no value is present for Checksum, not even an explicit nil
func (o *JellyfinVersionInfo) UnsetChecksum() {
	o.Checksum.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinVersionInfo) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret string
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinVersionInfo) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *JellyfinVersionInfo) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableString and assigns it to the Timestamp field.
func (o *JellyfinVersionInfo) SetTimestamp(v string) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *JellyfinVersionInfo) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *JellyfinVersionInfo) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetRepositoryName returns the RepositoryName field value if set, zero value otherwise.
func (o *JellyfinVersionInfo) GetRepositoryName() string {
	if o == nil || IsNil(o.RepositoryName) {
		var ret string
		return ret
	}
	return *o.RepositoryName
}

// GetRepositoryNameOk returns a tuple with the RepositoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinVersionInfo) GetRepositoryNameOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryName) {
		return nil, false
	}
	return o.RepositoryName, true
}

// HasRepositoryName returns a boolean if a field has been set.
func (o *JellyfinVersionInfo) HasRepositoryName() bool {
	if o != nil && !IsNil(o.RepositoryName) {
		return true
	}

	return false
}

// SetRepositoryName gets a reference to the given string and assigns it to the RepositoryName field.
func (o *JellyfinVersionInfo) SetRepositoryName(v string) {
	o.RepositoryName = &v
}

// GetRepositoryUrl returns the RepositoryUrl field value if set, zero value otherwise.
func (o *JellyfinVersionInfo) GetRepositoryUrl() string {
	if o == nil || IsNil(o.RepositoryUrl) {
		var ret string
		return ret
	}
	return *o.RepositoryUrl
}

// GetRepositoryUrlOk returns a tuple with the RepositoryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinVersionInfo) GetRepositoryUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryUrl) {
		return nil, false
	}
	return o.RepositoryUrl, true
}

// HasRepositoryUrl returns a boolean if a field has been set.
func (o *JellyfinVersionInfo) HasRepositoryUrl() bool {
	if o != nil && !IsNil(o.RepositoryUrl) {
		return true
	}

	return false
}

// SetRepositoryUrl gets a reference to the given string and assigns it to the RepositoryUrl field.
func (o *JellyfinVersionInfo) SetRepositoryUrl(v string) {
	o.RepositoryUrl = &v
}

func (o JellyfinVersionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinVersionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.VersionNumber) {
		toSerialize["VersionNumber"] = o.VersionNumber
	}
	if o.Changelog.IsSet() {
		toSerialize["changelog"] = o.Changelog.Get()
	}
	if o.TargetAbi.IsSet() {
		toSerialize["targetAbi"] = o.TargetAbi.Get()
	}
	if o.SourceUrl.IsSet() {
		toSerialize["sourceUrl"] = o.SourceUrl.Get()
	}
	if o.Checksum.IsSet() {
		toSerialize["checksum"] = o.Checksum.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if !IsNil(o.RepositoryName) {
		toSerialize["repositoryName"] = o.RepositoryName
	}
	if !IsNil(o.RepositoryUrl) {
		toSerialize["repositoryUrl"] = o.RepositoryUrl
	}
	return toSerialize, nil
}

type NullableJellyfinVersionInfo struct {
	value *JellyfinVersionInfo
	isSet bool
}

func (v NullableJellyfinVersionInfo) Get() *JellyfinVersionInfo {
	return v.value
}

func (v *NullableJellyfinVersionInfo) Set(val *JellyfinVersionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinVersionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinVersionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinVersionInfo(val *JellyfinVersionInfo) *NullableJellyfinVersionInfo {
	return &NullableJellyfinVersionInfo{value: val, isSet: true}
}

func (v NullableJellyfinVersionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinVersionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


