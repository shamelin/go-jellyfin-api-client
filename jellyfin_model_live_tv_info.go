/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinLiveTvInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinLiveTvInfo{}

// JellyfinLiveTvInfo struct for JellyfinLiveTvInfo
type JellyfinLiveTvInfo struct {
	// Gets or sets the services.
	Services []JellyfinLiveTvServiceInfo `json:"Services,omitempty"`
	// Gets or sets a value indicating whether this instance is enabled.
	IsEnabled *bool `json:"IsEnabled,omitempty"`
	// Gets or sets the enabled users.
	EnabledUsers []string `json:"EnabledUsers,omitempty"`
}

// NewJellyfinLiveTvInfo instantiates a new JellyfinLiveTvInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinLiveTvInfo() *JellyfinLiveTvInfo {
	this := JellyfinLiveTvInfo{}
	return &this
}

// NewJellyfinLiveTvInfoWithDefaults instantiates a new JellyfinLiveTvInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinLiveTvInfoWithDefaults() *JellyfinLiveTvInfo {
	this := JellyfinLiveTvInfo{}
	return &this
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *JellyfinLiveTvInfo) GetServices() []JellyfinLiveTvServiceInfo {
	if o == nil || IsNil(o.Services) {
		var ret []JellyfinLiveTvServiceInfo
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinLiveTvInfo) GetServicesOk() ([]JellyfinLiveTvServiceInfo, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *JellyfinLiveTvInfo) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []JellyfinLiveTvServiceInfo and assigns it to the Services field.
func (o *JellyfinLiveTvInfo) SetServices(v []JellyfinLiveTvServiceInfo) {
	o.Services = v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *JellyfinLiveTvInfo) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinLiveTvInfo) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *JellyfinLiveTvInfo) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *JellyfinLiveTvInfo) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetEnabledUsers returns the EnabledUsers field value if set, zero value otherwise.
func (o *JellyfinLiveTvInfo) GetEnabledUsers() []string {
	if o == nil || IsNil(o.EnabledUsers) {
		var ret []string
		return ret
	}
	return o.EnabledUsers
}

// GetEnabledUsersOk returns a tuple with the EnabledUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinLiveTvInfo) GetEnabledUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledUsers) {
		return nil, false
	}
	return o.EnabledUsers, true
}

// HasEnabledUsers returns a boolean if a field has been set.
func (o *JellyfinLiveTvInfo) HasEnabledUsers() bool {
	if o != nil && !IsNil(o.EnabledUsers) {
		return true
	}

	return false
}

// SetEnabledUsers gets a reference to the given []string and assigns it to the EnabledUsers field.
func (o *JellyfinLiveTvInfo) SetEnabledUsers(v []string) {
	o.EnabledUsers = v
}

func (o JellyfinLiveTvInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinLiveTvInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Services) {
		toSerialize["Services"] = o.Services
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["IsEnabled"] = o.IsEnabled
	}
	if !IsNil(o.EnabledUsers) {
		toSerialize["EnabledUsers"] = o.EnabledUsers
	}
	return toSerialize, nil
}

type NullableJellyfinLiveTvInfo struct {
	value *JellyfinLiveTvInfo
	isSet bool
}

func (v NullableJellyfinLiveTvInfo) Get() *JellyfinLiveTvInfo {
	return v.value
}

func (v *NullableJellyfinLiveTvInfo) Set(val *JellyfinLiveTvInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinLiveTvInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinLiveTvInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinLiveTvInfo(val *JellyfinLiveTvInfo) *NullableJellyfinLiveTvInfo {
	return &NullableJellyfinLiveTvInfo{value: val, isSet: true}
}

func (v NullableJellyfinLiveTvInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinLiveTvInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


