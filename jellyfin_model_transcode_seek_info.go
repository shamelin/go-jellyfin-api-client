/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinTranscodeSeekInfo the model 'JellyfinTranscodeSeekInfo'
type JellyfinTranscodeSeekInfo string

// List of TranscodeSeekInfo
const (
	AUTO JellyfinTranscodeSeekInfo = "Auto"
	BYTES JellyfinTranscodeSeekInfo = "Bytes"
)

// All allowed values of JellyfinTranscodeSeekInfo enum
var AllowedJellyfinTranscodeSeekInfoEnumValues = []JellyfinTranscodeSeekInfo{
	"Auto",
	"Bytes",
}

func (v *JellyfinTranscodeSeekInfo) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinTranscodeSeekInfo(value)
	for _, existing := range AllowedJellyfinTranscodeSeekInfoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinTranscodeSeekInfo", value)
}

// NewJellyfinTranscodeSeekInfoFromValue returns a pointer to a valid JellyfinTranscodeSeekInfo
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinTranscodeSeekInfoFromValue(v string) (*JellyfinTranscodeSeekInfo, error) {
	ev := JellyfinTranscodeSeekInfo(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinTranscodeSeekInfo: valid values are %v", v, AllowedJellyfinTranscodeSeekInfoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinTranscodeSeekInfo) IsValid() bool {
	for _, existing := range AllowedJellyfinTranscodeSeekInfoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TranscodeSeekInfo value
func (v JellyfinTranscodeSeekInfo) Ptr() *JellyfinTranscodeSeekInfo {
	return &v
}

type NullableJellyfinTranscodeSeekInfo struct {
	value *JellyfinTranscodeSeekInfo
	isSet bool
}

func (v NullableJellyfinTranscodeSeekInfo) Get() *JellyfinTranscodeSeekInfo {
	return v.value
}

func (v *NullableJellyfinTranscodeSeekInfo) Set(val *JellyfinTranscodeSeekInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinTranscodeSeekInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinTranscodeSeekInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinTranscodeSeekInfo(val *JellyfinTranscodeSeekInfo) *NullableJellyfinTranscodeSeekInfo {
	return &NullableJellyfinTranscodeSeekInfo{value: val, isSet: true}
}

func (v NullableJellyfinTranscodeSeekInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinTranscodeSeekInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

