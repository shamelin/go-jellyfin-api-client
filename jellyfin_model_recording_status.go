/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinRecordingStatus the model 'JellyfinRecordingStatus'
type JellyfinRecordingStatus string

// List of RecordingStatus
const (
	JELLYFINRECORDINGSTATUS_NEW JellyfinRecordingStatus = "New"
	JELLYFINRECORDINGSTATUS_IN_PROGRESS JellyfinRecordingStatus = "InProgress"
	JELLYFINRECORDINGSTATUS_COMPLETED JellyfinRecordingStatus = "Completed"
	JELLYFINRECORDINGSTATUS_CANCELLED JellyfinRecordingStatus = "Cancelled"
	JELLYFINRECORDINGSTATUS_CONFLICTED_OK JellyfinRecordingStatus = "ConflictedOk"
	JELLYFINRECORDINGSTATUS_CONFLICTED_NOT_OK JellyfinRecordingStatus = "ConflictedNotOk"
	JELLYFINRECORDINGSTATUS_ERROR JellyfinRecordingStatus = "Error"
)

// All allowed values of JellyfinRecordingStatus enum
var AllowedJellyfinRecordingStatusEnumValues = []JellyfinRecordingStatus{
	"New",
	"InProgress",
	"Completed",
	"Cancelled",
	"ConflictedOk",
	"ConflictedNotOk",
	"Error",
}

func (v *JellyfinRecordingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinRecordingStatus(value)
	for _, existing := range AllowedJellyfinRecordingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinRecordingStatus", value)
}

// NewJellyfinRecordingStatusFromValue returns a pointer to a valid JellyfinRecordingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinRecordingStatusFromValue(v string) (*JellyfinRecordingStatus, error) {
	ev := JellyfinRecordingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinRecordingStatus: valid values are %v", v, AllowedJellyfinRecordingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinRecordingStatus) IsValid() bool {
	for _, existing := range AllowedJellyfinRecordingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RecordingStatus value
func (v JellyfinRecordingStatus) Ptr() *JellyfinRecordingStatus {
	return &v
}

type NullableJellyfinRecordingStatus struct {
	value *JellyfinRecordingStatus
	isSet bool
}

func (v NullableJellyfinRecordingStatus) Get() *JellyfinRecordingStatus {
	return v.value
}

func (v *NullableJellyfinRecordingStatus) Set(val *JellyfinRecordingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinRecordingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinRecordingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinRecordingStatus(val *JellyfinRecordingStatus) *NullableJellyfinRecordingStatus {
	return &NullableJellyfinRecordingStatus{value: val, isSet: true}
}

func (v NullableJellyfinRecordingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinRecordingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

