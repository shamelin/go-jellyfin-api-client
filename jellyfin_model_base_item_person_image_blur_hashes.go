/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinBaseItemPersonImageBlurHashes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinBaseItemPersonImageBlurHashes{}

// JellyfinBaseItemPersonImageBlurHashes Gets or sets the primary image blurhash.
type JellyfinBaseItemPersonImageBlurHashes struct {
	Primary *map[string]string `json:"Primary,omitempty"`
	Art *map[string]string `json:"Art,omitempty"`
	Backdrop *map[string]string `json:"Backdrop,omitempty"`
	Banner *map[string]string `json:"Banner,omitempty"`
	Logo *map[string]string `json:"Logo,omitempty"`
	Thumb *map[string]string `json:"Thumb,omitempty"`
	Disc *map[string]string `json:"Disc,omitempty"`
	Box *map[string]string `json:"Box,omitempty"`
	Screenshot *map[string]string `json:"Screenshot,omitempty"`
	Menu *map[string]string `json:"Menu,omitempty"`
	Chapter *map[string]string `json:"Chapter,omitempty"`
	BoxRear *map[string]string `json:"BoxRear,omitempty"`
	Profile *map[string]string `json:"Profile,omitempty"`
}

// NewJellyfinBaseItemPersonImageBlurHashes instantiates a new JellyfinBaseItemPersonImageBlurHashes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinBaseItemPersonImageBlurHashes() *JellyfinBaseItemPersonImageBlurHashes {
	this := JellyfinBaseItemPersonImageBlurHashes{}
	return &this
}

// NewJellyfinBaseItemPersonImageBlurHashesWithDefaults instantiates a new JellyfinBaseItemPersonImageBlurHashes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinBaseItemPersonImageBlurHashesWithDefaults() *JellyfinBaseItemPersonImageBlurHashes {
	this := JellyfinBaseItemPersonImageBlurHashes{}
	return &this
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetPrimary() map[string]string {
	if o == nil || IsNil(o.Primary) {
		var ret map[string]string
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetPrimaryOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given map[string]string and assigns it to the Primary field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetPrimary(v map[string]string) {
	o.Primary = &v
}

// GetArt returns the Art field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetArt() map[string]string {
	if o == nil || IsNil(o.Art) {
		var ret map[string]string
		return ret
	}
	return *o.Art
}

// GetArtOk returns a tuple with the Art field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetArtOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Art) {
		return nil, false
	}
	return o.Art, true
}

// HasArt returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasArt() bool {
	if o != nil && !IsNil(o.Art) {
		return true
	}

	return false
}

// SetArt gets a reference to the given map[string]string and assigns it to the Art field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetArt(v map[string]string) {
	o.Art = &v
}

// GetBackdrop returns the Backdrop field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetBackdrop() map[string]string {
	if o == nil || IsNil(o.Backdrop) {
		var ret map[string]string
		return ret
	}
	return *o.Backdrop
}

// GetBackdropOk returns a tuple with the Backdrop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetBackdropOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Backdrop) {
		return nil, false
	}
	return o.Backdrop, true
}

// HasBackdrop returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasBackdrop() bool {
	if o != nil && !IsNil(o.Backdrop) {
		return true
	}

	return false
}

// SetBackdrop gets a reference to the given map[string]string and assigns it to the Backdrop field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetBackdrop(v map[string]string) {
	o.Backdrop = &v
}

// GetBanner returns the Banner field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetBanner() map[string]string {
	if o == nil || IsNil(o.Banner) {
		var ret map[string]string
		return ret
	}
	return *o.Banner
}

// GetBannerOk returns a tuple with the Banner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetBannerOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Banner) {
		return nil, false
	}
	return o.Banner, true
}

// HasBanner returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasBanner() bool {
	if o != nil && !IsNil(o.Banner) {
		return true
	}

	return false
}

// SetBanner gets a reference to the given map[string]string and assigns it to the Banner field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetBanner(v map[string]string) {
	o.Banner = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetLogo() map[string]string {
	if o == nil || IsNil(o.Logo) {
		var ret map[string]string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetLogoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given map[string]string and assigns it to the Logo field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetLogo(v map[string]string) {
	o.Logo = &v
}

// GetThumb returns the Thumb field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetThumb() map[string]string {
	if o == nil || IsNil(o.Thumb) {
		var ret map[string]string
		return ret
	}
	return *o.Thumb
}

// GetThumbOk returns a tuple with the Thumb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetThumbOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Thumb) {
		return nil, false
	}
	return o.Thumb, true
}

// HasThumb returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasThumb() bool {
	if o != nil && !IsNil(o.Thumb) {
		return true
	}

	return false
}

// SetThumb gets a reference to the given map[string]string and assigns it to the Thumb field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetThumb(v map[string]string) {
	o.Thumb = &v
}

// GetDisc returns the Disc field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetDisc() map[string]string {
	if o == nil || IsNil(o.Disc) {
		var ret map[string]string
		return ret
	}
	return *o.Disc
}

// GetDiscOk returns a tuple with the Disc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetDiscOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Disc) {
		return nil, false
	}
	return o.Disc, true
}

// HasDisc returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasDisc() bool {
	if o != nil && !IsNil(o.Disc) {
		return true
	}

	return false
}

// SetDisc gets a reference to the given map[string]string and assigns it to the Disc field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetDisc(v map[string]string) {
	o.Disc = &v
}

// GetBox returns the Box field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetBox() map[string]string {
	if o == nil || IsNil(o.Box) {
		var ret map[string]string
		return ret
	}
	return *o.Box
}

// GetBoxOk returns a tuple with the Box field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetBoxOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Box) {
		return nil, false
	}
	return o.Box, true
}

// HasBox returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasBox() bool {
	if o != nil && !IsNil(o.Box) {
		return true
	}

	return false
}

// SetBox gets a reference to the given map[string]string and assigns it to the Box field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetBox(v map[string]string) {
	o.Box = &v
}

// GetScreenshot returns the Screenshot field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetScreenshot() map[string]string {
	if o == nil || IsNil(o.Screenshot) {
		var ret map[string]string
		return ret
	}
	return *o.Screenshot
}

// GetScreenshotOk returns a tuple with the Screenshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetScreenshotOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Screenshot) {
		return nil, false
	}
	return o.Screenshot, true
}

// HasScreenshot returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasScreenshot() bool {
	if o != nil && !IsNil(o.Screenshot) {
		return true
	}

	return false
}

// SetScreenshot gets a reference to the given map[string]string and assigns it to the Screenshot field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetScreenshot(v map[string]string) {
	o.Screenshot = &v
}

// GetMenu returns the Menu field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetMenu() map[string]string {
	if o == nil || IsNil(o.Menu) {
		var ret map[string]string
		return ret
	}
	return *o.Menu
}

// GetMenuOk returns a tuple with the Menu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetMenuOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Menu) {
		return nil, false
	}
	return o.Menu, true
}

// HasMenu returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasMenu() bool {
	if o != nil && !IsNil(o.Menu) {
		return true
	}

	return false
}

// SetMenu gets a reference to the given map[string]string and assigns it to the Menu field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetMenu(v map[string]string) {
	o.Menu = &v
}

// GetChapter returns the Chapter field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetChapter() map[string]string {
	if o == nil || IsNil(o.Chapter) {
		var ret map[string]string
		return ret
	}
	return *o.Chapter
}

// GetChapterOk returns a tuple with the Chapter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetChapterOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Chapter) {
		return nil, false
	}
	return o.Chapter, true
}

// HasChapter returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasChapter() bool {
	if o != nil && !IsNil(o.Chapter) {
		return true
	}

	return false
}

// SetChapter gets a reference to the given map[string]string and assigns it to the Chapter field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetChapter(v map[string]string) {
	o.Chapter = &v
}

// GetBoxRear returns the BoxRear field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetBoxRear() map[string]string {
	if o == nil || IsNil(o.BoxRear) {
		var ret map[string]string
		return ret
	}
	return *o.BoxRear
}

// GetBoxRearOk returns a tuple with the BoxRear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetBoxRearOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.BoxRear) {
		return nil, false
	}
	return o.BoxRear, true
}

// HasBoxRear returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasBoxRear() bool {
	if o != nil && !IsNil(o.BoxRear) {
		return true
	}

	return false
}

// SetBoxRear gets a reference to the given map[string]string and assigns it to the BoxRear field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetBoxRear(v map[string]string) {
	o.BoxRear = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetProfile() map[string]string {
	if o == nil || IsNil(o.Profile) {
		var ret map[string]string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) GetProfileOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *JellyfinBaseItemPersonImageBlurHashes) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given map[string]string and assigns it to the Profile field.
func (o *JellyfinBaseItemPersonImageBlurHashes) SetProfile(v map[string]string) {
	o.Profile = &v
}

func (o JellyfinBaseItemPersonImageBlurHashes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinBaseItemPersonImageBlurHashes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Primary) {
		toSerialize["Primary"] = o.Primary
	}
	if !IsNil(o.Art) {
		toSerialize["Art"] = o.Art
	}
	if !IsNil(o.Backdrop) {
		toSerialize["Backdrop"] = o.Backdrop
	}
	if !IsNil(o.Banner) {
		toSerialize["Banner"] = o.Banner
	}
	if !IsNil(o.Logo) {
		toSerialize["Logo"] = o.Logo
	}
	if !IsNil(o.Thumb) {
		toSerialize["Thumb"] = o.Thumb
	}
	if !IsNil(o.Disc) {
		toSerialize["Disc"] = o.Disc
	}
	if !IsNil(o.Box) {
		toSerialize["Box"] = o.Box
	}
	if !IsNil(o.Screenshot) {
		toSerialize["Screenshot"] = o.Screenshot
	}
	if !IsNil(o.Menu) {
		toSerialize["Menu"] = o.Menu
	}
	if !IsNil(o.Chapter) {
		toSerialize["Chapter"] = o.Chapter
	}
	if !IsNil(o.BoxRear) {
		toSerialize["BoxRear"] = o.BoxRear
	}
	if !IsNil(o.Profile) {
		toSerialize["Profile"] = o.Profile
	}
	return toSerialize, nil
}

type NullableJellyfinBaseItemPersonImageBlurHashes struct {
	value *JellyfinBaseItemPersonImageBlurHashes
	isSet bool
}

func (v NullableJellyfinBaseItemPersonImageBlurHashes) Get() *JellyfinBaseItemPersonImageBlurHashes {
	return v.value
}

func (v *NullableJellyfinBaseItemPersonImageBlurHashes) Set(val *JellyfinBaseItemPersonImageBlurHashes) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinBaseItemPersonImageBlurHashes) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinBaseItemPersonImageBlurHashes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinBaseItemPersonImageBlurHashes(val *JellyfinBaseItemPersonImageBlurHashes) *NullableJellyfinBaseItemPersonImageBlurHashes {
	return &NullableJellyfinBaseItemPersonImageBlurHashes{value: val, isSet: true}
}

func (v NullableJellyfinBaseItemPersonImageBlurHashes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinBaseItemPersonImageBlurHashes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


