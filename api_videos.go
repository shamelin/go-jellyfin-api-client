/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
	"reflect"
)


// VideosAPIService VideosAPI service
type VideosAPIService service

type VideosAPIDeleteAlternateSourcesRequest struct {
	ctx context.Context
	ApiService *VideosAPIService
	itemId string
}

func (r VideosAPIDeleteAlternateSourcesRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAlternateSourcesExecute(r)
}

/*
DeleteAlternateSources Removes alternate video sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return VideosAPIDeleteAlternateSourcesRequest
*/
func (a *VideosAPIService) DeleteAlternateSources(ctx context.Context, itemId string) VideosAPIDeleteAlternateSourcesRequest {
	return VideosAPIDeleteAlternateSourcesRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
func (a *VideosAPIService) DeleteAlternateSourcesExecute(r VideosAPIDeleteAlternateSourcesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.DeleteAlternateSources")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/AlternateSources"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VideosAPIGetAdditionalPartRequest struct {
	ctx context.Context
	ApiService *VideosAPIService
	itemId string
	userId *string
}

// Optional. Filter by user id, and attach user data.
func (r VideosAPIGetAdditionalPartRequest) UserId(userId string) VideosAPIGetAdditionalPartRequest {
	r.userId = &userId
	return r
}

func (r VideosAPIGetAdditionalPartRequest) Execute() (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetAdditionalPartExecute(r)
}

/*
GetAdditionalPart Gets additional parts for a video.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return VideosAPIGetAdditionalPartRequest
*/
func (a *VideosAPIService) GetAdditionalPart(ctx context.Context, itemId string) VideosAPIGetAdditionalPartRequest {
	return VideosAPIGetAdditionalPartRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return JellyfinBaseItemDtoQueryResult
func (a *VideosAPIService) GetAdditionalPartExecute(r VideosAPIGetAdditionalPartRequest) (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinBaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.GetAdditionalPart")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/AdditionalParts"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VideosAPIGetVideoStreamRequest struct {
	ctx context.Context
	ApiService *VideosAPIService
	itemId string
	container *string
	static *bool
	params *string
	tag *string
	deviceProfileId *string
	playSessionId *string
	segmentContainer *string
	segmentLength *int32
	minSegments *int32
	mediaSourceId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	allowVideoStreamCopy *bool
	allowAudioStreamCopy *bool
	breakOnNonKeyFrames *bool
	audioSampleRate *int32
	maxAudioBitDepth *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *JellyfinSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	requireAvc *bool
	deInterlace *bool
	requireNonAnamorphic *bool
	transcodingMaxAudioChannels *int32
	cpuCoreLimit *int32
	liveStreamId *string
	enableMpegtsM2TsMode *bool
	videoCodec *string
	subtitleCodec *string
	transcodeReasons *string
	audioStreamIndex *int32
	videoStreamIndex *int32
	context *JellyfinEncodingContext
	streamOptions *map[string]string
	enableAudioVbrEncoding *bool
}

// The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
func (r VideosAPIGetVideoStreamRequest) Container(container string) VideosAPIGetVideoStreamRequest {
	r.container = &container
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
func (r VideosAPIGetVideoStreamRequest) Static(static bool) VideosAPIGetVideoStreamRequest {
	r.static = &static
	return r
}

// The streaming parameters.
func (r VideosAPIGetVideoStreamRequest) Params(params string) VideosAPIGetVideoStreamRequest {
	r.params = &params
	return r
}

// The tag.
func (r VideosAPIGetVideoStreamRequest) Tag(tag string) VideosAPIGetVideoStreamRequest {
	r.tag = &tag
	return r
}

// Optional. The dlna device profile id to utilize.
// Deprecated
func (r VideosAPIGetVideoStreamRequest) DeviceProfileId(deviceProfileId string) VideosAPIGetVideoStreamRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The play session id.
func (r VideosAPIGetVideoStreamRequest) PlaySessionId(playSessionId string) VideosAPIGetVideoStreamRequest {
	r.playSessionId = &playSessionId
	return r
}

// The segment container.
func (r VideosAPIGetVideoStreamRequest) SegmentContainer(segmentContainer string) VideosAPIGetVideoStreamRequest {
	r.segmentContainer = &segmentContainer
	return r
}

// The segment length.
func (r VideosAPIGetVideoStreamRequest) SegmentLength(segmentLength int32) VideosAPIGetVideoStreamRequest {
	r.segmentLength = &segmentLength
	return r
}

// The minimum number of segments.
func (r VideosAPIGetVideoStreamRequest) MinSegments(minSegments int32) VideosAPIGetVideoStreamRequest {
	r.minSegments = &minSegments
	return r
}

// The media version id, if playing an alternate version.
func (r VideosAPIGetVideoStreamRequest) MediaSourceId(mediaSourceId string) VideosAPIGetVideoStreamRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r VideosAPIGetVideoStreamRequest) DeviceId(deviceId string) VideosAPIGetVideoStreamRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension.
func (r VideosAPIGetVideoStreamRequest) AudioCodec(audioCodec string) VideosAPIGetVideoStreamRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r VideosAPIGetVideoStreamRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) VideosAPIGetVideoStreamRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Whether or not to allow copying of the video stream url.
func (r VideosAPIGetVideoStreamRequest) AllowVideoStreamCopy(allowVideoStreamCopy bool) VideosAPIGetVideoStreamRequest {
	r.allowVideoStreamCopy = &allowVideoStreamCopy
	return r
}

// Whether or not to allow copying of the audio stream url.
func (r VideosAPIGetVideoStreamRequest) AllowAudioStreamCopy(allowAudioStreamCopy bool) VideosAPIGetVideoStreamRequest {
	r.allowAudioStreamCopy = &allowAudioStreamCopy
	return r
}

// Optional. Whether to break on non key frames.
func (r VideosAPIGetVideoStreamRequest) BreakOnNonKeyFrames(breakOnNonKeyFrames bool) VideosAPIGetVideoStreamRequest {
	r.breakOnNonKeyFrames = &breakOnNonKeyFrames
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100.
func (r VideosAPIGetVideoStreamRequest) AudioSampleRate(audioSampleRate int32) VideosAPIGetVideoStreamRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. The maximum audio bit depth.
func (r VideosAPIGetVideoStreamRequest) MaxAudioBitDepth(maxAudioBitDepth int32) VideosAPIGetVideoStreamRequest {
	r.maxAudioBitDepth = &maxAudioBitDepth
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r VideosAPIGetVideoStreamRequest) AudioBitRate(audioBitRate int32) VideosAPIGetVideoStreamRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
func (r VideosAPIGetVideoStreamRequest) AudioChannels(audioChannels int32) VideosAPIGetVideoStreamRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
func (r VideosAPIGetVideoStreamRequest) MaxAudioChannels(maxAudioChannels int32) VideosAPIGetVideoStreamRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
func (r VideosAPIGetVideoStreamRequest) Profile(profile string) VideosAPIGetVideoStreamRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
func (r VideosAPIGetVideoStreamRequest) Level(level string) VideosAPIGetVideoStreamRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideosAPIGetVideoStreamRequest) Framerate(framerate float32) VideosAPIGetVideoStreamRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideosAPIGetVideoStreamRequest) MaxFramerate(maxFramerate float32) VideosAPIGetVideoStreamRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r VideosAPIGetVideoStreamRequest) CopyTimestamps(copyTimestamps bool) VideosAPIGetVideoStreamRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
func (r VideosAPIGetVideoStreamRequest) StartTimeTicks(startTimeTicks int64) VideosAPIGetVideoStreamRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r VideosAPIGetVideoStreamRequest) Width(width int32) VideosAPIGetVideoStreamRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r VideosAPIGetVideoStreamRequest) Height(height int32) VideosAPIGetVideoStreamRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r VideosAPIGetVideoStreamRequest) MaxWidth(maxWidth int32) VideosAPIGetVideoStreamRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r VideosAPIGetVideoStreamRequest) MaxHeight(maxHeight int32) VideosAPIGetVideoStreamRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r VideosAPIGetVideoStreamRequest) VideoBitRate(videoBitRate int32) VideosAPIGetVideoStreamRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r VideosAPIGetVideoStreamRequest) SubtitleStreamIndex(subtitleStreamIndex int32) VideosAPIGetVideoStreamRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r VideosAPIGetVideoStreamRequest) SubtitleMethod(subtitleMethod JellyfinSubtitleDeliveryMethod) VideosAPIGetVideoStreamRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r VideosAPIGetVideoStreamRequest) MaxRefFrames(maxRefFrames int32) VideosAPIGetVideoStreamRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional. The maximum video bit depth.
func (r VideosAPIGetVideoStreamRequest) MaxVideoBitDepth(maxVideoBitDepth int32) VideosAPIGetVideoStreamRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Whether to require avc.
func (r VideosAPIGetVideoStreamRequest) RequireAvc(requireAvc bool) VideosAPIGetVideoStreamRequest {
	r.requireAvc = &requireAvc
	return r
}

// Optional. Whether to deinterlace the video.
func (r VideosAPIGetVideoStreamRequest) DeInterlace(deInterlace bool) VideosAPIGetVideoStreamRequest {
	r.deInterlace = &deInterlace
	return r
}

// Optional. Whether to require a non anamorphic stream.
func (r VideosAPIGetVideoStreamRequest) RequireNonAnamorphic(requireNonAnamorphic bool) VideosAPIGetVideoStreamRequest {
	r.requireNonAnamorphic = &requireNonAnamorphic
	return r
}

// Optional. The maximum number of audio channels to transcode.
func (r VideosAPIGetVideoStreamRequest) TranscodingMaxAudioChannels(transcodingMaxAudioChannels int32) VideosAPIGetVideoStreamRequest {
	r.transcodingMaxAudioChannels = &transcodingMaxAudioChannels
	return r
}

// Optional. The limit of how many cpu cores to use.
func (r VideosAPIGetVideoStreamRequest) CpuCoreLimit(cpuCoreLimit int32) VideosAPIGetVideoStreamRequest {
	r.cpuCoreLimit = &cpuCoreLimit
	return r
}

// The live stream id.
func (r VideosAPIGetVideoStreamRequest) LiveStreamId(liveStreamId string) VideosAPIGetVideoStreamRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// Optional. Whether to enable the MpegtsM2Ts mode.
func (r VideosAPIGetVideoStreamRequest) EnableMpegtsM2TsMode(enableMpegtsM2TsMode bool) VideosAPIGetVideoStreamRequest {
	r.enableMpegtsM2TsMode = &enableMpegtsM2TsMode
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension.
func (r VideosAPIGetVideoStreamRequest) VideoCodec(videoCodec string) VideosAPIGetVideoStreamRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. Specify a subtitle codec to encode to.
func (r VideosAPIGetVideoStreamRequest) SubtitleCodec(subtitleCodec string) VideosAPIGetVideoStreamRequest {
	r.subtitleCodec = &subtitleCodec
	return r
}

// Optional. The transcoding reason.
func (r VideosAPIGetVideoStreamRequest) TranscodeReasons(transcodeReasons string) VideosAPIGetVideoStreamRequest {
	r.transcodeReasons = &transcodeReasons
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r VideosAPIGetVideoStreamRequest) AudioStreamIndex(audioStreamIndex int32) VideosAPIGetVideoStreamRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r VideosAPIGetVideoStreamRequest) VideoStreamIndex(videoStreamIndex int32) VideosAPIGetVideoStreamRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
func (r VideosAPIGetVideoStreamRequest) Context(context JellyfinEncodingContext) VideosAPIGetVideoStreamRequest {
	r.context = &context
	return r
}

// Optional. The streaming options.
func (r VideosAPIGetVideoStreamRequest) StreamOptions(streamOptions map[string]string) VideosAPIGetVideoStreamRequest {
	r.streamOptions = &streamOptions
	return r
}

// Optional. Whether to enable Audio Encoding.
func (r VideosAPIGetVideoStreamRequest) EnableAudioVbrEncoding(enableAudioVbrEncoding bool) VideosAPIGetVideoStreamRequest {
	r.enableAudioVbrEncoding = &enableAudioVbrEncoding
	return r
}

func (r VideosAPIGetVideoStreamRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetVideoStreamExecute(r)
}

/*
GetVideoStream Gets a video stream.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return VideosAPIGetVideoStreamRequest
*/
func (a *VideosAPIService) GetVideoStream(ctx context.Context, itemId string) VideosAPIGetVideoStreamRequest {
	return VideosAPIGetVideoStreamRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *VideosAPIService) GetVideoStreamExecute(r VideosAPIGetVideoStreamRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.GetVideoStream")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/stream"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.container != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "container", r.container, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "static", r.static, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.segmentContainer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentContainer", r.segmentContainer, "form", "")
	}
	if r.segmentLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	}
	if r.minSegments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSegments", r.minSegments, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceId", r.deviceId, "form", "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.allowVideoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowVideoStreamCopy", r.allowVideoStreamCopy, "form", "")
	}
	if r.allowAudioStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowAudioStreamCopy", r.allowAudioStreamCopy, "form", "")
	}
	if r.breakOnNonKeyFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "breakOnNonKeyFrames", r.breakOnNonKeyFrames, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.maxAudioBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioBitDepth", r.maxAudioBitDepth, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.requireAvc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireAvc", r.requireAvc, "form", "")
	}
	if r.deInterlace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deInterlace", r.deInterlace, "form", "")
	}
	if r.requireNonAnamorphic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireNonAnamorphic", r.requireNonAnamorphic, "form", "")
	}
	if r.transcodingMaxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodingMaxAudioChannels", r.transcodingMaxAudioChannels, "form", "")
	}
	if r.cpuCoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpuCoreLimit", r.cpuCoreLimit, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.enableMpegtsM2TsMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableMpegtsM2TsMode", r.enableMpegtsM2TsMode, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoCodec", r.videoCodec, "form", "")
	}
	if r.subtitleCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleCodec", r.subtitleCodec, "form", "")
	}
	if r.transcodeReasons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodeReasons", r.transcodeReasons, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoStreamIndex", r.videoStreamIndex, "form", "")
	}
	if r.context != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "form", "")
	}
	if r.streamOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streamOptions", r.streamOptions, "form", "")
	}
	if r.enableAudioVbrEncoding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAudioVbrEncoding", r.enableAudioVbrEncoding, "form", "")
	} else {
		var defaultValue bool = true
		r.enableAudioVbrEncoding = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"video/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VideosAPIGetVideoStreamByContainerRequest struct {
	ctx context.Context
	ApiService *VideosAPIService
	itemId string
	container string
	static *bool
	params *string
	tag *string
	deviceProfileId *string
	playSessionId *string
	segmentContainer *string
	segmentLength *int32
	minSegments *int32
	mediaSourceId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	allowVideoStreamCopy *bool
	allowAudioStreamCopy *bool
	breakOnNonKeyFrames *bool
	audioSampleRate *int32
	maxAudioBitDepth *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *JellyfinSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	requireAvc *bool
	deInterlace *bool
	requireNonAnamorphic *bool
	transcodingMaxAudioChannels *int32
	cpuCoreLimit *int32
	liveStreamId *string
	enableMpegtsM2TsMode *bool
	videoCodec *string
	subtitleCodec *string
	transcodeReasons *string
	audioStreamIndex *int32
	videoStreamIndex *int32
	context *JellyfinEncodingContext
	streamOptions *map[string]string
	enableAudioVbrEncoding *bool
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
func (r VideosAPIGetVideoStreamByContainerRequest) Static(static bool) VideosAPIGetVideoStreamByContainerRequest {
	r.static = &static
	return r
}

// The streaming parameters.
func (r VideosAPIGetVideoStreamByContainerRequest) Params(params string) VideosAPIGetVideoStreamByContainerRequest {
	r.params = &params
	return r
}

// The tag.
func (r VideosAPIGetVideoStreamByContainerRequest) Tag(tag string) VideosAPIGetVideoStreamByContainerRequest {
	r.tag = &tag
	return r
}

// Optional. The dlna device profile id to utilize.
func (r VideosAPIGetVideoStreamByContainerRequest) DeviceProfileId(deviceProfileId string) VideosAPIGetVideoStreamByContainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The play session id.
func (r VideosAPIGetVideoStreamByContainerRequest) PlaySessionId(playSessionId string) VideosAPIGetVideoStreamByContainerRequest {
	r.playSessionId = &playSessionId
	return r
}

// The segment container.
func (r VideosAPIGetVideoStreamByContainerRequest) SegmentContainer(segmentContainer string) VideosAPIGetVideoStreamByContainerRequest {
	r.segmentContainer = &segmentContainer
	return r
}

// The segment length.
func (r VideosAPIGetVideoStreamByContainerRequest) SegmentLength(segmentLength int32) VideosAPIGetVideoStreamByContainerRequest {
	r.segmentLength = &segmentLength
	return r
}

// The minimum number of segments.
func (r VideosAPIGetVideoStreamByContainerRequest) MinSegments(minSegments int32) VideosAPIGetVideoStreamByContainerRequest {
	r.minSegments = &minSegments
	return r
}

// The media version id, if playing an alternate version.
func (r VideosAPIGetVideoStreamByContainerRequest) MediaSourceId(mediaSourceId string) VideosAPIGetVideoStreamByContainerRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r VideosAPIGetVideoStreamByContainerRequest) DeviceId(deviceId string) VideosAPIGetVideoStreamByContainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension.
func (r VideosAPIGetVideoStreamByContainerRequest) AudioCodec(audioCodec string) VideosAPIGetVideoStreamByContainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r VideosAPIGetVideoStreamByContainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) VideosAPIGetVideoStreamByContainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Whether or not to allow copying of the video stream url.
func (r VideosAPIGetVideoStreamByContainerRequest) AllowVideoStreamCopy(allowVideoStreamCopy bool) VideosAPIGetVideoStreamByContainerRequest {
	r.allowVideoStreamCopy = &allowVideoStreamCopy
	return r
}

// Whether or not to allow copying of the audio stream url.
func (r VideosAPIGetVideoStreamByContainerRequest) AllowAudioStreamCopy(allowAudioStreamCopy bool) VideosAPIGetVideoStreamByContainerRequest {
	r.allowAudioStreamCopy = &allowAudioStreamCopy
	return r
}

// Optional. Whether to break on non key frames.
func (r VideosAPIGetVideoStreamByContainerRequest) BreakOnNonKeyFrames(breakOnNonKeyFrames bool) VideosAPIGetVideoStreamByContainerRequest {
	r.breakOnNonKeyFrames = &breakOnNonKeyFrames
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100.
func (r VideosAPIGetVideoStreamByContainerRequest) AudioSampleRate(audioSampleRate int32) VideosAPIGetVideoStreamByContainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. The maximum audio bit depth.
func (r VideosAPIGetVideoStreamByContainerRequest) MaxAudioBitDepth(maxAudioBitDepth int32) VideosAPIGetVideoStreamByContainerRequest {
	r.maxAudioBitDepth = &maxAudioBitDepth
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r VideosAPIGetVideoStreamByContainerRequest) AudioBitRate(audioBitRate int32) VideosAPIGetVideoStreamByContainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
func (r VideosAPIGetVideoStreamByContainerRequest) AudioChannels(audioChannels int32) VideosAPIGetVideoStreamByContainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
func (r VideosAPIGetVideoStreamByContainerRequest) MaxAudioChannels(maxAudioChannels int32) VideosAPIGetVideoStreamByContainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
func (r VideosAPIGetVideoStreamByContainerRequest) Profile(profile string) VideosAPIGetVideoStreamByContainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
func (r VideosAPIGetVideoStreamByContainerRequest) Level(level string) VideosAPIGetVideoStreamByContainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideosAPIGetVideoStreamByContainerRequest) Framerate(framerate float32) VideosAPIGetVideoStreamByContainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideosAPIGetVideoStreamByContainerRequest) MaxFramerate(maxFramerate float32) VideosAPIGetVideoStreamByContainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r VideosAPIGetVideoStreamByContainerRequest) CopyTimestamps(copyTimestamps bool) VideosAPIGetVideoStreamByContainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
func (r VideosAPIGetVideoStreamByContainerRequest) StartTimeTicks(startTimeTicks int64) VideosAPIGetVideoStreamByContainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r VideosAPIGetVideoStreamByContainerRequest) Width(width int32) VideosAPIGetVideoStreamByContainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r VideosAPIGetVideoStreamByContainerRequest) Height(height int32) VideosAPIGetVideoStreamByContainerRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r VideosAPIGetVideoStreamByContainerRequest) MaxWidth(maxWidth int32) VideosAPIGetVideoStreamByContainerRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r VideosAPIGetVideoStreamByContainerRequest) MaxHeight(maxHeight int32) VideosAPIGetVideoStreamByContainerRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r VideosAPIGetVideoStreamByContainerRequest) VideoBitRate(videoBitRate int32) VideosAPIGetVideoStreamByContainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r VideosAPIGetVideoStreamByContainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) VideosAPIGetVideoStreamByContainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r VideosAPIGetVideoStreamByContainerRequest) SubtitleMethod(subtitleMethod JellyfinSubtitleDeliveryMethod) VideosAPIGetVideoStreamByContainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r VideosAPIGetVideoStreamByContainerRequest) MaxRefFrames(maxRefFrames int32) VideosAPIGetVideoStreamByContainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional. The maximum video bit depth.
func (r VideosAPIGetVideoStreamByContainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) VideosAPIGetVideoStreamByContainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Whether to require avc.
func (r VideosAPIGetVideoStreamByContainerRequest) RequireAvc(requireAvc bool) VideosAPIGetVideoStreamByContainerRequest {
	r.requireAvc = &requireAvc
	return r
}

// Optional. Whether to deinterlace the video.
func (r VideosAPIGetVideoStreamByContainerRequest) DeInterlace(deInterlace bool) VideosAPIGetVideoStreamByContainerRequest {
	r.deInterlace = &deInterlace
	return r
}

// Optional. Whether to require a non anamorphic stream.
func (r VideosAPIGetVideoStreamByContainerRequest) RequireNonAnamorphic(requireNonAnamorphic bool) VideosAPIGetVideoStreamByContainerRequest {
	r.requireNonAnamorphic = &requireNonAnamorphic
	return r
}

// Optional. The maximum number of audio channels to transcode.
func (r VideosAPIGetVideoStreamByContainerRequest) TranscodingMaxAudioChannels(transcodingMaxAudioChannels int32) VideosAPIGetVideoStreamByContainerRequest {
	r.transcodingMaxAudioChannels = &transcodingMaxAudioChannels
	return r
}

// Optional. The limit of how many cpu cores to use.
func (r VideosAPIGetVideoStreamByContainerRequest) CpuCoreLimit(cpuCoreLimit int32) VideosAPIGetVideoStreamByContainerRequest {
	r.cpuCoreLimit = &cpuCoreLimit
	return r
}

// The live stream id.
func (r VideosAPIGetVideoStreamByContainerRequest) LiveStreamId(liveStreamId string) VideosAPIGetVideoStreamByContainerRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// Optional. Whether to enable the MpegtsM2Ts mode.
func (r VideosAPIGetVideoStreamByContainerRequest) EnableMpegtsM2TsMode(enableMpegtsM2TsMode bool) VideosAPIGetVideoStreamByContainerRequest {
	r.enableMpegtsM2TsMode = &enableMpegtsM2TsMode
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension.
func (r VideosAPIGetVideoStreamByContainerRequest) VideoCodec(videoCodec string) VideosAPIGetVideoStreamByContainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. Specify a subtitle codec to encode to.
func (r VideosAPIGetVideoStreamByContainerRequest) SubtitleCodec(subtitleCodec string) VideosAPIGetVideoStreamByContainerRequest {
	r.subtitleCodec = &subtitleCodec
	return r
}

// Optional. The transcoding reason.
func (r VideosAPIGetVideoStreamByContainerRequest) TranscodeReasons(transcodeReasons string) VideosAPIGetVideoStreamByContainerRequest {
	r.transcodeReasons = &transcodeReasons
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r VideosAPIGetVideoStreamByContainerRequest) AudioStreamIndex(audioStreamIndex int32) VideosAPIGetVideoStreamByContainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r VideosAPIGetVideoStreamByContainerRequest) VideoStreamIndex(videoStreamIndex int32) VideosAPIGetVideoStreamByContainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
func (r VideosAPIGetVideoStreamByContainerRequest) Context(context JellyfinEncodingContext) VideosAPIGetVideoStreamByContainerRequest {
	r.context = &context
	return r
}

// Optional. The streaming options.
func (r VideosAPIGetVideoStreamByContainerRequest) StreamOptions(streamOptions map[string]string) VideosAPIGetVideoStreamByContainerRequest {
	r.streamOptions = &streamOptions
	return r
}

// Optional. Whether to enable Audio Encoding.
func (r VideosAPIGetVideoStreamByContainerRequest) EnableAudioVbrEncoding(enableAudioVbrEncoding bool) VideosAPIGetVideoStreamByContainerRequest {
	r.enableAudioVbrEncoding = &enableAudioVbrEncoding
	return r
}

func (r VideosAPIGetVideoStreamByContainerRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetVideoStreamByContainerExecute(r)
}

/*
GetVideoStreamByContainer Gets a video stream.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @param container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
 @return VideosAPIGetVideoStreamByContainerRequest
*/
func (a *VideosAPIService) GetVideoStreamByContainer(ctx context.Context, itemId string, container string) VideosAPIGetVideoStreamByContainerRequest {
	return VideosAPIGetVideoStreamByContainerRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		container: container,
	}
}

// Execute executes the request
//  @return *os.File
func (a *VideosAPIService) GetVideoStreamByContainerExecute(r VideosAPIGetVideoStreamByContainerRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.GetVideoStreamByContainer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/stream.{container}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"container"+"}", url.PathEscape(parameterValueToString(r.container, "container")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "static", r.static, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.segmentContainer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentContainer", r.segmentContainer, "form", "")
	}
	if r.segmentLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	}
	if r.minSegments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSegments", r.minSegments, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceId", r.deviceId, "form", "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.allowVideoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowVideoStreamCopy", r.allowVideoStreamCopy, "form", "")
	}
	if r.allowAudioStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowAudioStreamCopy", r.allowAudioStreamCopy, "form", "")
	}
	if r.breakOnNonKeyFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "breakOnNonKeyFrames", r.breakOnNonKeyFrames, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.maxAudioBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioBitDepth", r.maxAudioBitDepth, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.requireAvc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireAvc", r.requireAvc, "form", "")
	}
	if r.deInterlace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deInterlace", r.deInterlace, "form", "")
	}
	if r.requireNonAnamorphic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireNonAnamorphic", r.requireNonAnamorphic, "form", "")
	}
	if r.transcodingMaxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodingMaxAudioChannels", r.transcodingMaxAudioChannels, "form", "")
	}
	if r.cpuCoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpuCoreLimit", r.cpuCoreLimit, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.enableMpegtsM2TsMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableMpegtsM2TsMode", r.enableMpegtsM2TsMode, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoCodec", r.videoCodec, "form", "")
	}
	if r.subtitleCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleCodec", r.subtitleCodec, "form", "")
	}
	if r.transcodeReasons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodeReasons", r.transcodeReasons, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoStreamIndex", r.videoStreamIndex, "form", "")
	}
	if r.context != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "form", "")
	}
	if r.streamOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streamOptions", r.streamOptions, "form", "")
	}
	if r.enableAudioVbrEncoding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAudioVbrEncoding", r.enableAudioVbrEncoding, "form", "")
	} else {
		var defaultValue bool = true
		r.enableAudioVbrEncoding = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"video/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VideosAPIHeadVideoStreamRequest struct {
	ctx context.Context
	ApiService *VideosAPIService
	itemId string
	container *string
	static *bool
	params *string
	tag *string
	deviceProfileId *string
	playSessionId *string
	segmentContainer *string
	segmentLength *int32
	minSegments *int32
	mediaSourceId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	allowVideoStreamCopy *bool
	allowAudioStreamCopy *bool
	breakOnNonKeyFrames *bool
	audioSampleRate *int32
	maxAudioBitDepth *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *JellyfinSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	requireAvc *bool
	deInterlace *bool
	requireNonAnamorphic *bool
	transcodingMaxAudioChannels *int32
	cpuCoreLimit *int32
	liveStreamId *string
	enableMpegtsM2TsMode *bool
	videoCodec *string
	subtitleCodec *string
	transcodeReasons *string
	audioStreamIndex *int32
	videoStreamIndex *int32
	context *JellyfinEncodingContext
	streamOptions *map[string]string
	enableAudioVbrEncoding *bool
}

// The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
func (r VideosAPIHeadVideoStreamRequest) Container(container string) VideosAPIHeadVideoStreamRequest {
	r.container = &container
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
func (r VideosAPIHeadVideoStreamRequest) Static(static bool) VideosAPIHeadVideoStreamRequest {
	r.static = &static
	return r
}

// The streaming parameters.
func (r VideosAPIHeadVideoStreamRequest) Params(params string) VideosAPIHeadVideoStreamRequest {
	r.params = &params
	return r
}

// The tag.
func (r VideosAPIHeadVideoStreamRequest) Tag(tag string) VideosAPIHeadVideoStreamRequest {
	r.tag = &tag
	return r
}

// Optional. The dlna device profile id to utilize.
// Deprecated
func (r VideosAPIHeadVideoStreamRequest) DeviceProfileId(deviceProfileId string) VideosAPIHeadVideoStreamRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The play session id.
func (r VideosAPIHeadVideoStreamRequest) PlaySessionId(playSessionId string) VideosAPIHeadVideoStreamRequest {
	r.playSessionId = &playSessionId
	return r
}

// The segment container.
func (r VideosAPIHeadVideoStreamRequest) SegmentContainer(segmentContainer string) VideosAPIHeadVideoStreamRequest {
	r.segmentContainer = &segmentContainer
	return r
}

// The segment length.
func (r VideosAPIHeadVideoStreamRequest) SegmentLength(segmentLength int32) VideosAPIHeadVideoStreamRequest {
	r.segmentLength = &segmentLength
	return r
}

// The minimum number of segments.
func (r VideosAPIHeadVideoStreamRequest) MinSegments(minSegments int32) VideosAPIHeadVideoStreamRequest {
	r.minSegments = &minSegments
	return r
}

// The media version id, if playing an alternate version.
func (r VideosAPIHeadVideoStreamRequest) MediaSourceId(mediaSourceId string) VideosAPIHeadVideoStreamRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r VideosAPIHeadVideoStreamRequest) DeviceId(deviceId string) VideosAPIHeadVideoStreamRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension.
func (r VideosAPIHeadVideoStreamRequest) AudioCodec(audioCodec string) VideosAPIHeadVideoStreamRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r VideosAPIHeadVideoStreamRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) VideosAPIHeadVideoStreamRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Whether or not to allow copying of the video stream url.
func (r VideosAPIHeadVideoStreamRequest) AllowVideoStreamCopy(allowVideoStreamCopy bool) VideosAPIHeadVideoStreamRequest {
	r.allowVideoStreamCopy = &allowVideoStreamCopy
	return r
}

// Whether or not to allow copying of the audio stream url.
func (r VideosAPIHeadVideoStreamRequest) AllowAudioStreamCopy(allowAudioStreamCopy bool) VideosAPIHeadVideoStreamRequest {
	r.allowAudioStreamCopy = &allowAudioStreamCopy
	return r
}

// Optional. Whether to break on non key frames.
func (r VideosAPIHeadVideoStreamRequest) BreakOnNonKeyFrames(breakOnNonKeyFrames bool) VideosAPIHeadVideoStreamRequest {
	r.breakOnNonKeyFrames = &breakOnNonKeyFrames
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100.
func (r VideosAPIHeadVideoStreamRequest) AudioSampleRate(audioSampleRate int32) VideosAPIHeadVideoStreamRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. The maximum audio bit depth.
func (r VideosAPIHeadVideoStreamRequest) MaxAudioBitDepth(maxAudioBitDepth int32) VideosAPIHeadVideoStreamRequest {
	r.maxAudioBitDepth = &maxAudioBitDepth
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r VideosAPIHeadVideoStreamRequest) AudioBitRate(audioBitRate int32) VideosAPIHeadVideoStreamRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
func (r VideosAPIHeadVideoStreamRequest) AudioChannels(audioChannels int32) VideosAPIHeadVideoStreamRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
func (r VideosAPIHeadVideoStreamRequest) MaxAudioChannels(maxAudioChannels int32) VideosAPIHeadVideoStreamRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
func (r VideosAPIHeadVideoStreamRequest) Profile(profile string) VideosAPIHeadVideoStreamRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
func (r VideosAPIHeadVideoStreamRequest) Level(level string) VideosAPIHeadVideoStreamRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideosAPIHeadVideoStreamRequest) Framerate(framerate float32) VideosAPIHeadVideoStreamRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideosAPIHeadVideoStreamRequest) MaxFramerate(maxFramerate float32) VideosAPIHeadVideoStreamRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r VideosAPIHeadVideoStreamRequest) CopyTimestamps(copyTimestamps bool) VideosAPIHeadVideoStreamRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
func (r VideosAPIHeadVideoStreamRequest) StartTimeTicks(startTimeTicks int64) VideosAPIHeadVideoStreamRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r VideosAPIHeadVideoStreamRequest) Width(width int32) VideosAPIHeadVideoStreamRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r VideosAPIHeadVideoStreamRequest) Height(height int32) VideosAPIHeadVideoStreamRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r VideosAPIHeadVideoStreamRequest) MaxWidth(maxWidth int32) VideosAPIHeadVideoStreamRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r VideosAPIHeadVideoStreamRequest) MaxHeight(maxHeight int32) VideosAPIHeadVideoStreamRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r VideosAPIHeadVideoStreamRequest) VideoBitRate(videoBitRate int32) VideosAPIHeadVideoStreamRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r VideosAPIHeadVideoStreamRequest) SubtitleStreamIndex(subtitleStreamIndex int32) VideosAPIHeadVideoStreamRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r VideosAPIHeadVideoStreamRequest) SubtitleMethod(subtitleMethod JellyfinSubtitleDeliveryMethod) VideosAPIHeadVideoStreamRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r VideosAPIHeadVideoStreamRequest) MaxRefFrames(maxRefFrames int32) VideosAPIHeadVideoStreamRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional. The maximum video bit depth.
func (r VideosAPIHeadVideoStreamRequest) MaxVideoBitDepth(maxVideoBitDepth int32) VideosAPIHeadVideoStreamRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Whether to require avc.
func (r VideosAPIHeadVideoStreamRequest) RequireAvc(requireAvc bool) VideosAPIHeadVideoStreamRequest {
	r.requireAvc = &requireAvc
	return r
}

// Optional. Whether to deinterlace the video.
func (r VideosAPIHeadVideoStreamRequest) DeInterlace(deInterlace bool) VideosAPIHeadVideoStreamRequest {
	r.deInterlace = &deInterlace
	return r
}

// Optional. Whether to require a non anamorphic stream.
func (r VideosAPIHeadVideoStreamRequest) RequireNonAnamorphic(requireNonAnamorphic bool) VideosAPIHeadVideoStreamRequest {
	r.requireNonAnamorphic = &requireNonAnamorphic
	return r
}

// Optional. The maximum number of audio channels to transcode.
func (r VideosAPIHeadVideoStreamRequest) TranscodingMaxAudioChannels(transcodingMaxAudioChannels int32) VideosAPIHeadVideoStreamRequest {
	r.transcodingMaxAudioChannels = &transcodingMaxAudioChannels
	return r
}

// Optional. The limit of how many cpu cores to use.
func (r VideosAPIHeadVideoStreamRequest) CpuCoreLimit(cpuCoreLimit int32) VideosAPIHeadVideoStreamRequest {
	r.cpuCoreLimit = &cpuCoreLimit
	return r
}

// The live stream id.
func (r VideosAPIHeadVideoStreamRequest) LiveStreamId(liveStreamId string) VideosAPIHeadVideoStreamRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// Optional. Whether to enable the MpegtsM2Ts mode.
func (r VideosAPIHeadVideoStreamRequest) EnableMpegtsM2TsMode(enableMpegtsM2TsMode bool) VideosAPIHeadVideoStreamRequest {
	r.enableMpegtsM2TsMode = &enableMpegtsM2TsMode
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension.
func (r VideosAPIHeadVideoStreamRequest) VideoCodec(videoCodec string) VideosAPIHeadVideoStreamRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. Specify a subtitle codec to encode to.
func (r VideosAPIHeadVideoStreamRequest) SubtitleCodec(subtitleCodec string) VideosAPIHeadVideoStreamRequest {
	r.subtitleCodec = &subtitleCodec
	return r
}

// Optional. The transcoding reason.
func (r VideosAPIHeadVideoStreamRequest) TranscodeReasons(transcodeReasons string) VideosAPIHeadVideoStreamRequest {
	r.transcodeReasons = &transcodeReasons
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r VideosAPIHeadVideoStreamRequest) AudioStreamIndex(audioStreamIndex int32) VideosAPIHeadVideoStreamRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r VideosAPIHeadVideoStreamRequest) VideoStreamIndex(videoStreamIndex int32) VideosAPIHeadVideoStreamRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
func (r VideosAPIHeadVideoStreamRequest) Context(context JellyfinEncodingContext) VideosAPIHeadVideoStreamRequest {
	r.context = &context
	return r
}

// Optional. The streaming options.
func (r VideosAPIHeadVideoStreamRequest) StreamOptions(streamOptions map[string]string) VideosAPIHeadVideoStreamRequest {
	r.streamOptions = &streamOptions
	return r
}

// Optional. Whether to enable Audio Encoding.
func (r VideosAPIHeadVideoStreamRequest) EnableAudioVbrEncoding(enableAudioVbrEncoding bool) VideosAPIHeadVideoStreamRequest {
	r.enableAudioVbrEncoding = &enableAudioVbrEncoding
	return r
}

func (r VideosAPIHeadVideoStreamRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.HeadVideoStreamExecute(r)
}

/*
HeadVideoStream Gets a video stream.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return VideosAPIHeadVideoStreamRequest
*/
func (a *VideosAPIService) HeadVideoStream(ctx context.Context, itemId string) VideosAPIHeadVideoStreamRequest {
	return VideosAPIHeadVideoStreamRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *VideosAPIService) HeadVideoStreamExecute(r VideosAPIHeadVideoStreamRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.HeadVideoStream")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/stream"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.container != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "container", r.container, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "static", r.static, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.segmentContainer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentContainer", r.segmentContainer, "form", "")
	}
	if r.segmentLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	}
	if r.minSegments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSegments", r.minSegments, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceId", r.deviceId, "form", "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.allowVideoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowVideoStreamCopy", r.allowVideoStreamCopy, "form", "")
	}
	if r.allowAudioStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowAudioStreamCopy", r.allowAudioStreamCopy, "form", "")
	}
	if r.breakOnNonKeyFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "breakOnNonKeyFrames", r.breakOnNonKeyFrames, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.maxAudioBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioBitDepth", r.maxAudioBitDepth, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.requireAvc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireAvc", r.requireAvc, "form", "")
	}
	if r.deInterlace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deInterlace", r.deInterlace, "form", "")
	}
	if r.requireNonAnamorphic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireNonAnamorphic", r.requireNonAnamorphic, "form", "")
	}
	if r.transcodingMaxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodingMaxAudioChannels", r.transcodingMaxAudioChannels, "form", "")
	}
	if r.cpuCoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpuCoreLimit", r.cpuCoreLimit, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.enableMpegtsM2TsMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableMpegtsM2TsMode", r.enableMpegtsM2TsMode, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoCodec", r.videoCodec, "form", "")
	}
	if r.subtitleCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleCodec", r.subtitleCodec, "form", "")
	}
	if r.transcodeReasons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodeReasons", r.transcodeReasons, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoStreamIndex", r.videoStreamIndex, "form", "")
	}
	if r.context != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "form", "")
	}
	if r.streamOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streamOptions", r.streamOptions, "form", "")
	}
	if r.enableAudioVbrEncoding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAudioVbrEncoding", r.enableAudioVbrEncoding, "form", "")
	} else {
		var defaultValue bool = true
		r.enableAudioVbrEncoding = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"video/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VideosAPIHeadVideoStreamByContainerRequest struct {
	ctx context.Context
	ApiService *VideosAPIService
	itemId string
	container string
	static *bool
	params *string
	tag *string
	deviceProfileId *string
	playSessionId *string
	segmentContainer *string
	segmentLength *int32
	minSegments *int32
	mediaSourceId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	allowVideoStreamCopy *bool
	allowAudioStreamCopy *bool
	breakOnNonKeyFrames *bool
	audioSampleRate *int32
	maxAudioBitDepth *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *JellyfinSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	requireAvc *bool
	deInterlace *bool
	requireNonAnamorphic *bool
	transcodingMaxAudioChannels *int32
	cpuCoreLimit *int32
	liveStreamId *string
	enableMpegtsM2TsMode *bool
	videoCodec *string
	subtitleCodec *string
	transcodeReasons *string
	audioStreamIndex *int32
	videoStreamIndex *int32
	context *JellyfinEncodingContext
	streamOptions *map[string]string
	enableAudioVbrEncoding *bool
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
func (r VideosAPIHeadVideoStreamByContainerRequest) Static(static bool) VideosAPIHeadVideoStreamByContainerRequest {
	r.static = &static
	return r
}

// The streaming parameters.
func (r VideosAPIHeadVideoStreamByContainerRequest) Params(params string) VideosAPIHeadVideoStreamByContainerRequest {
	r.params = &params
	return r
}

// The tag.
func (r VideosAPIHeadVideoStreamByContainerRequest) Tag(tag string) VideosAPIHeadVideoStreamByContainerRequest {
	r.tag = &tag
	return r
}

// Optional. The dlna device profile id to utilize.
func (r VideosAPIHeadVideoStreamByContainerRequest) DeviceProfileId(deviceProfileId string) VideosAPIHeadVideoStreamByContainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The play session id.
func (r VideosAPIHeadVideoStreamByContainerRequest) PlaySessionId(playSessionId string) VideosAPIHeadVideoStreamByContainerRequest {
	r.playSessionId = &playSessionId
	return r
}

// The segment container.
func (r VideosAPIHeadVideoStreamByContainerRequest) SegmentContainer(segmentContainer string) VideosAPIHeadVideoStreamByContainerRequest {
	r.segmentContainer = &segmentContainer
	return r
}

// The segment length.
func (r VideosAPIHeadVideoStreamByContainerRequest) SegmentLength(segmentLength int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.segmentLength = &segmentLength
	return r
}

// The minimum number of segments.
func (r VideosAPIHeadVideoStreamByContainerRequest) MinSegments(minSegments int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.minSegments = &minSegments
	return r
}

// The media version id, if playing an alternate version.
func (r VideosAPIHeadVideoStreamByContainerRequest) MediaSourceId(mediaSourceId string) VideosAPIHeadVideoStreamByContainerRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r VideosAPIHeadVideoStreamByContainerRequest) DeviceId(deviceId string) VideosAPIHeadVideoStreamByContainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension.
func (r VideosAPIHeadVideoStreamByContainerRequest) AudioCodec(audioCodec string) VideosAPIHeadVideoStreamByContainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r VideosAPIHeadVideoStreamByContainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) VideosAPIHeadVideoStreamByContainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Whether or not to allow copying of the video stream url.
func (r VideosAPIHeadVideoStreamByContainerRequest) AllowVideoStreamCopy(allowVideoStreamCopy bool) VideosAPIHeadVideoStreamByContainerRequest {
	r.allowVideoStreamCopy = &allowVideoStreamCopy
	return r
}

// Whether or not to allow copying of the audio stream url.
func (r VideosAPIHeadVideoStreamByContainerRequest) AllowAudioStreamCopy(allowAudioStreamCopy bool) VideosAPIHeadVideoStreamByContainerRequest {
	r.allowAudioStreamCopy = &allowAudioStreamCopy
	return r
}

// Optional. Whether to break on non key frames.
func (r VideosAPIHeadVideoStreamByContainerRequest) BreakOnNonKeyFrames(breakOnNonKeyFrames bool) VideosAPIHeadVideoStreamByContainerRequest {
	r.breakOnNonKeyFrames = &breakOnNonKeyFrames
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100.
func (r VideosAPIHeadVideoStreamByContainerRequest) AudioSampleRate(audioSampleRate int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. The maximum audio bit depth.
func (r VideosAPIHeadVideoStreamByContainerRequest) MaxAudioBitDepth(maxAudioBitDepth int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.maxAudioBitDepth = &maxAudioBitDepth
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r VideosAPIHeadVideoStreamByContainerRequest) AudioBitRate(audioBitRate int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
func (r VideosAPIHeadVideoStreamByContainerRequest) AudioChannels(audioChannels int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
func (r VideosAPIHeadVideoStreamByContainerRequest) MaxAudioChannels(maxAudioChannels int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
func (r VideosAPIHeadVideoStreamByContainerRequest) Profile(profile string) VideosAPIHeadVideoStreamByContainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
func (r VideosAPIHeadVideoStreamByContainerRequest) Level(level string) VideosAPIHeadVideoStreamByContainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideosAPIHeadVideoStreamByContainerRequest) Framerate(framerate float32) VideosAPIHeadVideoStreamByContainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideosAPIHeadVideoStreamByContainerRequest) MaxFramerate(maxFramerate float32) VideosAPIHeadVideoStreamByContainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r VideosAPIHeadVideoStreamByContainerRequest) CopyTimestamps(copyTimestamps bool) VideosAPIHeadVideoStreamByContainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
func (r VideosAPIHeadVideoStreamByContainerRequest) StartTimeTicks(startTimeTicks int64) VideosAPIHeadVideoStreamByContainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r VideosAPIHeadVideoStreamByContainerRequest) Width(width int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r VideosAPIHeadVideoStreamByContainerRequest) Height(height int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r VideosAPIHeadVideoStreamByContainerRequest) MaxWidth(maxWidth int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r VideosAPIHeadVideoStreamByContainerRequest) MaxHeight(maxHeight int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r VideosAPIHeadVideoStreamByContainerRequest) VideoBitRate(videoBitRate int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r VideosAPIHeadVideoStreamByContainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r VideosAPIHeadVideoStreamByContainerRequest) SubtitleMethod(subtitleMethod JellyfinSubtitleDeliveryMethod) VideosAPIHeadVideoStreamByContainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r VideosAPIHeadVideoStreamByContainerRequest) MaxRefFrames(maxRefFrames int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional. The maximum video bit depth.
func (r VideosAPIHeadVideoStreamByContainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Whether to require avc.
func (r VideosAPIHeadVideoStreamByContainerRequest) RequireAvc(requireAvc bool) VideosAPIHeadVideoStreamByContainerRequest {
	r.requireAvc = &requireAvc
	return r
}

// Optional. Whether to deinterlace the video.
func (r VideosAPIHeadVideoStreamByContainerRequest) DeInterlace(deInterlace bool) VideosAPIHeadVideoStreamByContainerRequest {
	r.deInterlace = &deInterlace
	return r
}

// Optional. Whether to require a non anamorphic stream.
func (r VideosAPIHeadVideoStreamByContainerRequest) RequireNonAnamorphic(requireNonAnamorphic bool) VideosAPIHeadVideoStreamByContainerRequest {
	r.requireNonAnamorphic = &requireNonAnamorphic
	return r
}

// Optional. The maximum number of audio channels to transcode.
func (r VideosAPIHeadVideoStreamByContainerRequest) TranscodingMaxAudioChannels(transcodingMaxAudioChannels int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.transcodingMaxAudioChannels = &transcodingMaxAudioChannels
	return r
}

// Optional. The limit of how many cpu cores to use.
func (r VideosAPIHeadVideoStreamByContainerRequest) CpuCoreLimit(cpuCoreLimit int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.cpuCoreLimit = &cpuCoreLimit
	return r
}

// The live stream id.
func (r VideosAPIHeadVideoStreamByContainerRequest) LiveStreamId(liveStreamId string) VideosAPIHeadVideoStreamByContainerRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// Optional. Whether to enable the MpegtsM2Ts mode.
func (r VideosAPIHeadVideoStreamByContainerRequest) EnableMpegtsM2TsMode(enableMpegtsM2TsMode bool) VideosAPIHeadVideoStreamByContainerRequest {
	r.enableMpegtsM2TsMode = &enableMpegtsM2TsMode
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension.
func (r VideosAPIHeadVideoStreamByContainerRequest) VideoCodec(videoCodec string) VideosAPIHeadVideoStreamByContainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. Specify a subtitle codec to encode to.
func (r VideosAPIHeadVideoStreamByContainerRequest) SubtitleCodec(subtitleCodec string) VideosAPIHeadVideoStreamByContainerRequest {
	r.subtitleCodec = &subtitleCodec
	return r
}

// Optional. The transcoding reason.
func (r VideosAPIHeadVideoStreamByContainerRequest) TranscodeReasons(transcodeReasons string) VideosAPIHeadVideoStreamByContainerRequest {
	r.transcodeReasons = &transcodeReasons
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r VideosAPIHeadVideoStreamByContainerRequest) AudioStreamIndex(audioStreamIndex int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r VideosAPIHeadVideoStreamByContainerRequest) VideoStreamIndex(videoStreamIndex int32) VideosAPIHeadVideoStreamByContainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
func (r VideosAPIHeadVideoStreamByContainerRequest) Context(context JellyfinEncodingContext) VideosAPIHeadVideoStreamByContainerRequest {
	r.context = &context
	return r
}

// Optional. The streaming options.
func (r VideosAPIHeadVideoStreamByContainerRequest) StreamOptions(streamOptions map[string]string) VideosAPIHeadVideoStreamByContainerRequest {
	r.streamOptions = &streamOptions
	return r
}

// Optional. Whether to enable Audio Encoding.
func (r VideosAPIHeadVideoStreamByContainerRequest) EnableAudioVbrEncoding(enableAudioVbrEncoding bool) VideosAPIHeadVideoStreamByContainerRequest {
	r.enableAudioVbrEncoding = &enableAudioVbrEncoding
	return r
}

func (r VideosAPIHeadVideoStreamByContainerRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.HeadVideoStreamByContainerExecute(r)
}

/*
HeadVideoStreamByContainer Gets a video stream.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @param container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.
 @return VideosAPIHeadVideoStreamByContainerRequest
*/
func (a *VideosAPIService) HeadVideoStreamByContainer(ctx context.Context, itemId string, container string) VideosAPIHeadVideoStreamByContainerRequest {
	return VideosAPIHeadVideoStreamByContainerRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		container: container,
	}
}

// Execute executes the request
//  @return *os.File
func (a *VideosAPIService) HeadVideoStreamByContainerExecute(r VideosAPIHeadVideoStreamByContainerRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.HeadVideoStreamByContainer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{itemId}/stream.{container}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"container"+"}", url.PathEscape(parameterValueToString(r.container, "container")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "static", r.static, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.segmentContainer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentContainer", r.segmentContainer, "form", "")
	}
	if r.segmentLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	}
	if r.minSegments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSegments", r.minSegments, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceId", r.deviceId, "form", "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.allowVideoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowVideoStreamCopy", r.allowVideoStreamCopy, "form", "")
	}
	if r.allowAudioStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowAudioStreamCopy", r.allowAudioStreamCopy, "form", "")
	}
	if r.breakOnNonKeyFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "breakOnNonKeyFrames", r.breakOnNonKeyFrames, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.maxAudioBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioBitDepth", r.maxAudioBitDepth, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxWidth", r.maxWidth, "form", "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxHeight", r.maxHeight, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.requireAvc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireAvc", r.requireAvc, "form", "")
	}
	if r.deInterlace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deInterlace", r.deInterlace, "form", "")
	}
	if r.requireNonAnamorphic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireNonAnamorphic", r.requireNonAnamorphic, "form", "")
	}
	if r.transcodingMaxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodingMaxAudioChannels", r.transcodingMaxAudioChannels, "form", "")
	}
	if r.cpuCoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpuCoreLimit", r.cpuCoreLimit, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.enableMpegtsM2TsMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableMpegtsM2TsMode", r.enableMpegtsM2TsMode, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoCodec", r.videoCodec, "form", "")
	}
	if r.subtitleCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleCodec", r.subtitleCodec, "form", "")
	}
	if r.transcodeReasons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodeReasons", r.transcodeReasons, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoStreamIndex", r.videoStreamIndex, "form", "")
	}
	if r.context != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "form", "")
	}
	if r.streamOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streamOptions", r.streamOptions, "form", "")
	}
	if r.enableAudioVbrEncoding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAudioVbrEncoding", r.enableAudioVbrEncoding, "form", "")
	} else {
		var defaultValue bool = true
		r.enableAudioVbrEncoding = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"video/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VideosAPIMergeVersionsRequest struct {
	ctx context.Context
	ApiService *VideosAPIService
	ids *[]string
}

// Item id list. This allows multiple, comma delimited.
func (r VideosAPIMergeVersionsRequest) Ids(ids []string) VideosAPIMergeVersionsRequest {
	r.ids = &ids
	return r
}

func (r VideosAPIMergeVersionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.MergeVersionsExecute(r)
}

/*
MergeVersions Merges videos into a single record.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return VideosAPIMergeVersionsRequest
*/
func (a *VideosAPIService) MergeVersions(ctx context.Context) VideosAPIMergeVersionsRequest {
	return VideosAPIMergeVersionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VideosAPIService) MergeVersionsExecute(r VideosAPIMergeVersionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideosAPIService.MergeVersions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/MergeVersions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return nil, reportError("ids is required and must be specified")
	}

	{
		t := *r.ids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ids", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
