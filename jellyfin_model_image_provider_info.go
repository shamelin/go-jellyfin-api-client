/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinImageProviderInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinImageProviderInfo{}

// JellyfinImageProviderInfo Class ImageProviderInfo.
type JellyfinImageProviderInfo struct {
	// Gets the name.
	Name *string `json:"Name,omitempty"`
	// Gets the supported image types.
	SupportedImages []JellyfinImageType `json:"SupportedImages,omitempty"`
}

// NewJellyfinImageProviderInfo instantiates a new JellyfinImageProviderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinImageProviderInfo() *JellyfinImageProviderInfo {
	this := JellyfinImageProviderInfo{}
	return &this
}

// NewJellyfinImageProviderInfoWithDefaults instantiates a new JellyfinImageProviderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinImageProviderInfoWithDefaults() *JellyfinImageProviderInfo {
	this := JellyfinImageProviderInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *JellyfinImageProviderInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinImageProviderInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *JellyfinImageProviderInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *JellyfinImageProviderInfo) SetName(v string) {
	o.Name = &v
}

// GetSupportedImages returns the SupportedImages field value if set, zero value otherwise.
func (o *JellyfinImageProviderInfo) GetSupportedImages() []JellyfinImageType {
	if o == nil || IsNil(o.SupportedImages) {
		var ret []JellyfinImageType
		return ret
	}
	return o.SupportedImages
}

// GetSupportedImagesOk returns a tuple with the SupportedImages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinImageProviderInfo) GetSupportedImagesOk() ([]JellyfinImageType, bool) {
	if o == nil || IsNil(o.SupportedImages) {
		return nil, false
	}
	return o.SupportedImages, true
}

// HasSupportedImages returns a boolean if a field has been set.
func (o *JellyfinImageProviderInfo) HasSupportedImages() bool {
	if o != nil && !IsNil(o.SupportedImages) {
		return true
	}

	return false
}

// SetSupportedImages gets a reference to the given []JellyfinImageType and assigns it to the SupportedImages field.
func (o *JellyfinImageProviderInfo) SetSupportedImages(v []JellyfinImageType) {
	o.SupportedImages = v
}

func (o JellyfinImageProviderInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinImageProviderInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.SupportedImages) {
		toSerialize["SupportedImages"] = o.SupportedImages
	}
	return toSerialize, nil
}

type NullableJellyfinImageProviderInfo struct {
	value *JellyfinImageProviderInfo
	isSet bool
}

func (v NullableJellyfinImageProviderInfo) Get() *JellyfinImageProviderInfo {
	return v.value
}

func (v *NullableJellyfinImageProviderInfo) Set(val *JellyfinImageProviderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinImageProviderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinImageProviderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinImageProviderInfo(val *JellyfinImageProviderInfo) *NullableJellyfinImageProviderInfo {
	return &NullableJellyfinImageProviderInfo{value: val, isSet: true}
}

func (v NullableJellyfinImageProviderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinImageProviderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


