/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// AudioAPIService AudioAPI service
type AudioAPIService service

type AudioAPIGetAudioStreamRequest struct {
	ctx context.Context
	ApiService *AudioAPIService
	itemId string
	container *string
	static *bool
	params *string
	tag *string
	deviceProfileId *string
	playSessionId *string
	segmentContainer *string
	segmentLength *int32
	minSegments *int32
	mediaSourceId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	allowVideoStreamCopy *bool
	allowAudioStreamCopy *bool
	breakOnNonKeyFrames *bool
	audioSampleRate *int32
	maxAudioBitDepth *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *JellyfinSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	requireAvc *bool
	deInterlace *bool
	requireNonAnamorphic *bool
	transcodingMaxAudioChannels *int32
	cpuCoreLimit *int32
	liveStreamId *string
	enableMpegtsM2TsMode *bool
	videoCodec *string
	subtitleCodec *string
	transcodeReasons *string
	audioStreamIndex *int32
	videoStreamIndex *int32
	context *JellyfinEncodingContext
	streamOptions *map[string]string
	enableAudioVbrEncoding *bool
}

// The audio container.
func (r AudioAPIGetAudioStreamRequest) Container(container string) AudioAPIGetAudioStreamRequest {
	r.container = &container
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
func (r AudioAPIGetAudioStreamRequest) Static(static bool) AudioAPIGetAudioStreamRequest {
	r.static = &static
	return r
}

// The streaming parameters.
func (r AudioAPIGetAudioStreamRequest) Params(params string) AudioAPIGetAudioStreamRequest {
	r.params = &params
	return r
}

// The tag.
func (r AudioAPIGetAudioStreamRequest) Tag(tag string) AudioAPIGetAudioStreamRequest {
	r.tag = &tag
	return r
}

// Optional. The dlna device profile id to utilize.
// Deprecated
func (r AudioAPIGetAudioStreamRequest) DeviceProfileId(deviceProfileId string) AudioAPIGetAudioStreamRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The play session id.
func (r AudioAPIGetAudioStreamRequest) PlaySessionId(playSessionId string) AudioAPIGetAudioStreamRequest {
	r.playSessionId = &playSessionId
	return r
}

// The segment container.
func (r AudioAPIGetAudioStreamRequest) SegmentContainer(segmentContainer string) AudioAPIGetAudioStreamRequest {
	r.segmentContainer = &segmentContainer
	return r
}

// The segment length.
func (r AudioAPIGetAudioStreamRequest) SegmentLength(segmentLength int32) AudioAPIGetAudioStreamRequest {
	r.segmentLength = &segmentLength
	return r
}

// The minimum number of segments.
func (r AudioAPIGetAudioStreamRequest) MinSegments(minSegments int32) AudioAPIGetAudioStreamRequest {
	r.minSegments = &minSegments
	return r
}

// The media version id, if playing an alternate version.
func (r AudioAPIGetAudioStreamRequest) MediaSourceId(mediaSourceId string) AudioAPIGetAudioStreamRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r AudioAPIGetAudioStreamRequest) DeviceId(deviceId string) AudioAPIGetAudioStreamRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension.
func (r AudioAPIGetAudioStreamRequest) AudioCodec(audioCodec string) AudioAPIGetAudioStreamRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r AudioAPIGetAudioStreamRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) AudioAPIGetAudioStreamRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Whether or not to allow copying of the video stream url.
func (r AudioAPIGetAudioStreamRequest) AllowVideoStreamCopy(allowVideoStreamCopy bool) AudioAPIGetAudioStreamRequest {
	r.allowVideoStreamCopy = &allowVideoStreamCopy
	return r
}

// Whether or not to allow copying of the audio stream url.
func (r AudioAPIGetAudioStreamRequest) AllowAudioStreamCopy(allowAudioStreamCopy bool) AudioAPIGetAudioStreamRequest {
	r.allowAudioStreamCopy = &allowAudioStreamCopy
	return r
}

// Optional. Whether to break on non key frames.
func (r AudioAPIGetAudioStreamRequest) BreakOnNonKeyFrames(breakOnNonKeyFrames bool) AudioAPIGetAudioStreamRequest {
	r.breakOnNonKeyFrames = &breakOnNonKeyFrames
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100.
func (r AudioAPIGetAudioStreamRequest) AudioSampleRate(audioSampleRate int32) AudioAPIGetAudioStreamRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. The maximum audio bit depth.
func (r AudioAPIGetAudioStreamRequest) MaxAudioBitDepth(maxAudioBitDepth int32) AudioAPIGetAudioStreamRequest {
	r.maxAudioBitDepth = &maxAudioBitDepth
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r AudioAPIGetAudioStreamRequest) AudioBitRate(audioBitRate int32) AudioAPIGetAudioStreamRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
func (r AudioAPIGetAudioStreamRequest) AudioChannels(audioChannels int32) AudioAPIGetAudioStreamRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
func (r AudioAPIGetAudioStreamRequest) MaxAudioChannels(maxAudioChannels int32) AudioAPIGetAudioStreamRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
func (r AudioAPIGetAudioStreamRequest) Profile(profile string) AudioAPIGetAudioStreamRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
func (r AudioAPIGetAudioStreamRequest) Level(level string) AudioAPIGetAudioStreamRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioAPIGetAudioStreamRequest) Framerate(framerate float32) AudioAPIGetAudioStreamRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioAPIGetAudioStreamRequest) MaxFramerate(maxFramerate float32) AudioAPIGetAudioStreamRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r AudioAPIGetAudioStreamRequest) CopyTimestamps(copyTimestamps bool) AudioAPIGetAudioStreamRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
func (r AudioAPIGetAudioStreamRequest) StartTimeTicks(startTimeTicks int64) AudioAPIGetAudioStreamRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r AudioAPIGetAudioStreamRequest) Width(width int32) AudioAPIGetAudioStreamRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r AudioAPIGetAudioStreamRequest) Height(height int32) AudioAPIGetAudioStreamRequest {
	r.height = &height
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r AudioAPIGetAudioStreamRequest) VideoBitRate(videoBitRate int32) AudioAPIGetAudioStreamRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r AudioAPIGetAudioStreamRequest) SubtitleStreamIndex(subtitleStreamIndex int32) AudioAPIGetAudioStreamRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r AudioAPIGetAudioStreamRequest) SubtitleMethod(subtitleMethod JellyfinSubtitleDeliveryMethod) AudioAPIGetAudioStreamRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r AudioAPIGetAudioStreamRequest) MaxRefFrames(maxRefFrames int32) AudioAPIGetAudioStreamRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional. The maximum video bit depth.
func (r AudioAPIGetAudioStreamRequest) MaxVideoBitDepth(maxVideoBitDepth int32) AudioAPIGetAudioStreamRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Whether to require avc.
func (r AudioAPIGetAudioStreamRequest) RequireAvc(requireAvc bool) AudioAPIGetAudioStreamRequest {
	r.requireAvc = &requireAvc
	return r
}

// Optional. Whether to deinterlace the video.
func (r AudioAPIGetAudioStreamRequest) DeInterlace(deInterlace bool) AudioAPIGetAudioStreamRequest {
	r.deInterlace = &deInterlace
	return r
}

// Optional. Whether to require a non anamorphic stream.
func (r AudioAPIGetAudioStreamRequest) RequireNonAnamorphic(requireNonAnamorphic bool) AudioAPIGetAudioStreamRequest {
	r.requireNonAnamorphic = &requireNonAnamorphic
	return r
}

// Optional. The maximum number of audio channels to transcode.
func (r AudioAPIGetAudioStreamRequest) TranscodingMaxAudioChannels(transcodingMaxAudioChannels int32) AudioAPIGetAudioStreamRequest {
	r.transcodingMaxAudioChannels = &transcodingMaxAudioChannels
	return r
}

// Optional. The limit of how many cpu cores to use.
func (r AudioAPIGetAudioStreamRequest) CpuCoreLimit(cpuCoreLimit int32) AudioAPIGetAudioStreamRequest {
	r.cpuCoreLimit = &cpuCoreLimit
	return r
}

// The live stream id.
func (r AudioAPIGetAudioStreamRequest) LiveStreamId(liveStreamId string) AudioAPIGetAudioStreamRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// Optional. Whether to enable the MpegtsM2Ts mode.
func (r AudioAPIGetAudioStreamRequest) EnableMpegtsM2TsMode(enableMpegtsM2TsMode bool) AudioAPIGetAudioStreamRequest {
	r.enableMpegtsM2TsMode = &enableMpegtsM2TsMode
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension.
func (r AudioAPIGetAudioStreamRequest) VideoCodec(videoCodec string) AudioAPIGetAudioStreamRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. Specify a subtitle codec to encode to.
func (r AudioAPIGetAudioStreamRequest) SubtitleCodec(subtitleCodec string) AudioAPIGetAudioStreamRequest {
	r.subtitleCodec = &subtitleCodec
	return r
}

// Optional. The transcoding reason.
func (r AudioAPIGetAudioStreamRequest) TranscodeReasons(transcodeReasons string) AudioAPIGetAudioStreamRequest {
	r.transcodeReasons = &transcodeReasons
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r AudioAPIGetAudioStreamRequest) AudioStreamIndex(audioStreamIndex int32) AudioAPIGetAudioStreamRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r AudioAPIGetAudioStreamRequest) VideoStreamIndex(videoStreamIndex int32) AudioAPIGetAudioStreamRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
func (r AudioAPIGetAudioStreamRequest) Context(context JellyfinEncodingContext) AudioAPIGetAudioStreamRequest {
	r.context = &context
	return r
}

// Optional. The streaming options.
func (r AudioAPIGetAudioStreamRequest) StreamOptions(streamOptions map[string]string) AudioAPIGetAudioStreamRequest {
	r.streamOptions = &streamOptions
	return r
}

// Optional. Whether to enable Audio Encoding.
func (r AudioAPIGetAudioStreamRequest) EnableAudioVbrEncoding(enableAudioVbrEncoding bool) AudioAPIGetAudioStreamRequest {
	r.enableAudioVbrEncoding = &enableAudioVbrEncoding
	return r
}

func (r AudioAPIGetAudioStreamRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetAudioStreamExecute(r)
}

/*
GetAudioStream Gets an audio stream.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return AudioAPIGetAudioStreamRequest
*/
func (a *AudioAPIService) GetAudioStream(ctx context.Context, itemId string) AudioAPIGetAudioStreamRequest {
	return AudioAPIGetAudioStreamRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *AudioAPIService) GetAudioStreamExecute(r AudioAPIGetAudioStreamRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioAPIService.GetAudioStream")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{itemId}/stream"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.container != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "container", r.container, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "static", r.static, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.segmentContainer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentContainer", r.segmentContainer, "form", "")
	}
	if r.segmentLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	}
	if r.minSegments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSegments", r.minSegments, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceId", r.deviceId, "form", "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.allowVideoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowVideoStreamCopy", r.allowVideoStreamCopy, "form", "")
	}
	if r.allowAudioStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowAudioStreamCopy", r.allowAudioStreamCopy, "form", "")
	}
	if r.breakOnNonKeyFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "breakOnNonKeyFrames", r.breakOnNonKeyFrames, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.maxAudioBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioBitDepth", r.maxAudioBitDepth, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.requireAvc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireAvc", r.requireAvc, "form", "")
	}
	if r.deInterlace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deInterlace", r.deInterlace, "form", "")
	}
	if r.requireNonAnamorphic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireNonAnamorphic", r.requireNonAnamorphic, "form", "")
	}
	if r.transcodingMaxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodingMaxAudioChannels", r.transcodingMaxAudioChannels, "form", "")
	}
	if r.cpuCoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpuCoreLimit", r.cpuCoreLimit, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.enableMpegtsM2TsMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableMpegtsM2TsMode", r.enableMpegtsM2TsMode, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoCodec", r.videoCodec, "form", "")
	}
	if r.subtitleCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleCodec", r.subtitleCodec, "form", "")
	}
	if r.transcodeReasons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodeReasons", r.transcodeReasons, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoStreamIndex", r.videoStreamIndex, "form", "")
	}
	if r.context != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "form", "")
	}
	if r.streamOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streamOptions", r.streamOptions, "form", "")
	}
	if r.enableAudioVbrEncoding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAudioVbrEncoding", r.enableAudioVbrEncoding, "form", "")
	} else {
		var defaultValue bool = true
		r.enableAudioVbrEncoding = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"audio/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AudioAPIGetAudioStreamByContainerRequest struct {
	ctx context.Context
	ApiService *AudioAPIService
	itemId string
	container string
	static *bool
	params *string
	tag *string
	deviceProfileId *string
	playSessionId *string
	segmentContainer *string
	segmentLength *int32
	minSegments *int32
	mediaSourceId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	allowVideoStreamCopy *bool
	allowAudioStreamCopy *bool
	breakOnNonKeyFrames *bool
	audioSampleRate *int32
	maxAudioBitDepth *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *JellyfinSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	requireAvc *bool
	deInterlace *bool
	requireNonAnamorphic *bool
	transcodingMaxAudioChannels *int32
	cpuCoreLimit *int32
	liveStreamId *string
	enableMpegtsM2TsMode *bool
	videoCodec *string
	subtitleCodec *string
	transcodeReasons *string
	audioStreamIndex *int32
	videoStreamIndex *int32
	context *JellyfinEncodingContext
	streamOptions *map[string]string
	enableAudioVbrEncoding *bool
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
func (r AudioAPIGetAudioStreamByContainerRequest) Static(static bool) AudioAPIGetAudioStreamByContainerRequest {
	r.static = &static
	return r
}

// The streaming parameters.
func (r AudioAPIGetAudioStreamByContainerRequest) Params(params string) AudioAPIGetAudioStreamByContainerRequest {
	r.params = &params
	return r
}

// The tag.
func (r AudioAPIGetAudioStreamByContainerRequest) Tag(tag string) AudioAPIGetAudioStreamByContainerRequest {
	r.tag = &tag
	return r
}

// Optional. The dlna device profile id to utilize.
// Deprecated
func (r AudioAPIGetAudioStreamByContainerRequest) DeviceProfileId(deviceProfileId string) AudioAPIGetAudioStreamByContainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The play session id.
func (r AudioAPIGetAudioStreamByContainerRequest) PlaySessionId(playSessionId string) AudioAPIGetAudioStreamByContainerRequest {
	r.playSessionId = &playSessionId
	return r
}

// The segment container.
func (r AudioAPIGetAudioStreamByContainerRequest) SegmentContainer(segmentContainer string) AudioAPIGetAudioStreamByContainerRequest {
	r.segmentContainer = &segmentContainer
	return r
}

// The segment length.
func (r AudioAPIGetAudioStreamByContainerRequest) SegmentLength(segmentLength int32) AudioAPIGetAudioStreamByContainerRequest {
	r.segmentLength = &segmentLength
	return r
}

// The minimum number of segments.
func (r AudioAPIGetAudioStreamByContainerRequest) MinSegments(minSegments int32) AudioAPIGetAudioStreamByContainerRequest {
	r.minSegments = &minSegments
	return r
}

// The media version id, if playing an alternate version.
func (r AudioAPIGetAudioStreamByContainerRequest) MediaSourceId(mediaSourceId string) AudioAPIGetAudioStreamByContainerRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r AudioAPIGetAudioStreamByContainerRequest) DeviceId(deviceId string) AudioAPIGetAudioStreamByContainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension.
func (r AudioAPIGetAudioStreamByContainerRequest) AudioCodec(audioCodec string) AudioAPIGetAudioStreamByContainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r AudioAPIGetAudioStreamByContainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) AudioAPIGetAudioStreamByContainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Whether or not to allow copying of the video stream url.
func (r AudioAPIGetAudioStreamByContainerRequest) AllowVideoStreamCopy(allowVideoStreamCopy bool) AudioAPIGetAudioStreamByContainerRequest {
	r.allowVideoStreamCopy = &allowVideoStreamCopy
	return r
}

// Whether or not to allow copying of the audio stream url.
func (r AudioAPIGetAudioStreamByContainerRequest) AllowAudioStreamCopy(allowAudioStreamCopy bool) AudioAPIGetAudioStreamByContainerRequest {
	r.allowAudioStreamCopy = &allowAudioStreamCopy
	return r
}

// Optional. Whether to break on non key frames.
func (r AudioAPIGetAudioStreamByContainerRequest) BreakOnNonKeyFrames(breakOnNonKeyFrames bool) AudioAPIGetAudioStreamByContainerRequest {
	r.breakOnNonKeyFrames = &breakOnNonKeyFrames
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100.
func (r AudioAPIGetAudioStreamByContainerRequest) AudioSampleRate(audioSampleRate int32) AudioAPIGetAudioStreamByContainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. The maximum audio bit depth.
func (r AudioAPIGetAudioStreamByContainerRequest) MaxAudioBitDepth(maxAudioBitDepth int32) AudioAPIGetAudioStreamByContainerRequest {
	r.maxAudioBitDepth = &maxAudioBitDepth
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r AudioAPIGetAudioStreamByContainerRequest) AudioBitRate(audioBitRate int32) AudioAPIGetAudioStreamByContainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
func (r AudioAPIGetAudioStreamByContainerRequest) AudioChannels(audioChannels int32) AudioAPIGetAudioStreamByContainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
func (r AudioAPIGetAudioStreamByContainerRequest) MaxAudioChannels(maxAudioChannels int32) AudioAPIGetAudioStreamByContainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
func (r AudioAPIGetAudioStreamByContainerRequest) Profile(profile string) AudioAPIGetAudioStreamByContainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
func (r AudioAPIGetAudioStreamByContainerRequest) Level(level string) AudioAPIGetAudioStreamByContainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioAPIGetAudioStreamByContainerRequest) Framerate(framerate float32) AudioAPIGetAudioStreamByContainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioAPIGetAudioStreamByContainerRequest) MaxFramerate(maxFramerate float32) AudioAPIGetAudioStreamByContainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r AudioAPIGetAudioStreamByContainerRequest) CopyTimestamps(copyTimestamps bool) AudioAPIGetAudioStreamByContainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
func (r AudioAPIGetAudioStreamByContainerRequest) StartTimeTicks(startTimeTicks int64) AudioAPIGetAudioStreamByContainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r AudioAPIGetAudioStreamByContainerRequest) Width(width int32) AudioAPIGetAudioStreamByContainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r AudioAPIGetAudioStreamByContainerRequest) Height(height int32) AudioAPIGetAudioStreamByContainerRequest {
	r.height = &height
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r AudioAPIGetAudioStreamByContainerRequest) VideoBitRate(videoBitRate int32) AudioAPIGetAudioStreamByContainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r AudioAPIGetAudioStreamByContainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) AudioAPIGetAudioStreamByContainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r AudioAPIGetAudioStreamByContainerRequest) SubtitleMethod(subtitleMethod JellyfinSubtitleDeliveryMethod) AudioAPIGetAudioStreamByContainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r AudioAPIGetAudioStreamByContainerRequest) MaxRefFrames(maxRefFrames int32) AudioAPIGetAudioStreamByContainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional. The maximum video bit depth.
func (r AudioAPIGetAudioStreamByContainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) AudioAPIGetAudioStreamByContainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Whether to require avc.
func (r AudioAPIGetAudioStreamByContainerRequest) RequireAvc(requireAvc bool) AudioAPIGetAudioStreamByContainerRequest {
	r.requireAvc = &requireAvc
	return r
}

// Optional. Whether to deinterlace the video.
func (r AudioAPIGetAudioStreamByContainerRequest) DeInterlace(deInterlace bool) AudioAPIGetAudioStreamByContainerRequest {
	r.deInterlace = &deInterlace
	return r
}

// Optional. Whether to require a non anamporphic stream.
func (r AudioAPIGetAudioStreamByContainerRequest) RequireNonAnamorphic(requireNonAnamorphic bool) AudioAPIGetAudioStreamByContainerRequest {
	r.requireNonAnamorphic = &requireNonAnamorphic
	return r
}

// Optional. The maximum number of audio channels to transcode.
func (r AudioAPIGetAudioStreamByContainerRequest) TranscodingMaxAudioChannels(transcodingMaxAudioChannels int32) AudioAPIGetAudioStreamByContainerRequest {
	r.transcodingMaxAudioChannels = &transcodingMaxAudioChannels
	return r
}

// Optional. The limit of how many cpu cores to use.
func (r AudioAPIGetAudioStreamByContainerRequest) CpuCoreLimit(cpuCoreLimit int32) AudioAPIGetAudioStreamByContainerRequest {
	r.cpuCoreLimit = &cpuCoreLimit
	return r
}

// The live stream id.
func (r AudioAPIGetAudioStreamByContainerRequest) LiveStreamId(liveStreamId string) AudioAPIGetAudioStreamByContainerRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// Optional. Whether to enable the MpegtsM2Ts mode.
func (r AudioAPIGetAudioStreamByContainerRequest) EnableMpegtsM2TsMode(enableMpegtsM2TsMode bool) AudioAPIGetAudioStreamByContainerRequest {
	r.enableMpegtsM2TsMode = &enableMpegtsM2TsMode
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension.
func (r AudioAPIGetAudioStreamByContainerRequest) VideoCodec(videoCodec string) AudioAPIGetAudioStreamByContainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. Specify a subtitle codec to encode to.
func (r AudioAPIGetAudioStreamByContainerRequest) SubtitleCodec(subtitleCodec string) AudioAPIGetAudioStreamByContainerRequest {
	r.subtitleCodec = &subtitleCodec
	return r
}

// Optional. The transcoding reason.
func (r AudioAPIGetAudioStreamByContainerRequest) TranscodeReasons(transcodeReasons string) AudioAPIGetAudioStreamByContainerRequest {
	r.transcodeReasons = &transcodeReasons
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r AudioAPIGetAudioStreamByContainerRequest) AudioStreamIndex(audioStreamIndex int32) AudioAPIGetAudioStreamByContainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r AudioAPIGetAudioStreamByContainerRequest) VideoStreamIndex(videoStreamIndex int32) AudioAPIGetAudioStreamByContainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
func (r AudioAPIGetAudioStreamByContainerRequest) Context(context JellyfinEncodingContext) AudioAPIGetAudioStreamByContainerRequest {
	r.context = &context
	return r
}

// Optional. The streaming options.
func (r AudioAPIGetAudioStreamByContainerRequest) StreamOptions(streamOptions map[string]string) AudioAPIGetAudioStreamByContainerRequest {
	r.streamOptions = &streamOptions
	return r
}

// Optional. Whether to enable Audio Encoding.
func (r AudioAPIGetAudioStreamByContainerRequest) EnableAudioVbrEncoding(enableAudioVbrEncoding bool) AudioAPIGetAudioStreamByContainerRequest {
	r.enableAudioVbrEncoding = &enableAudioVbrEncoding
	return r
}

func (r AudioAPIGetAudioStreamByContainerRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetAudioStreamByContainerExecute(r)
}

/*
GetAudioStreamByContainer Gets an audio stream.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @param container The audio container.
 @return AudioAPIGetAudioStreamByContainerRequest
*/
func (a *AudioAPIService) GetAudioStreamByContainer(ctx context.Context, itemId string, container string) AudioAPIGetAudioStreamByContainerRequest {
	return AudioAPIGetAudioStreamByContainerRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		container: container,
	}
}

// Execute executes the request
//  @return *os.File
func (a *AudioAPIService) GetAudioStreamByContainerExecute(r AudioAPIGetAudioStreamByContainerRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioAPIService.GetAudioStreamByContainer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{itemId}/stream.{container}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"container"+"}", url.PathEscape(parameterValueToString(r.container, "container")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "static", r.static, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.segmentContainer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentContainer", r.segmentContainer, "form", "")
	}
	if r.segmentLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	}
	if r.minSegments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSegments", r.minSegments, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceId", r.deviceId, "form", "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.allowVideoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowVideoStreamCopy", r.allowVideoStreamCopy, "form", "")
	}
	if r.allowAudioStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowAudioStreamCopy", r.allowAudioStreamCopy, "form", "")
	}
	if r.breakOnNonKeyFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "breakOnNonKeyFrames", r.breakOnNonKeyFrames, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.maxAudioBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioBitDepth", r.maxAudioBitDepth, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.requireAvc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireAvc", r.requireAvc, "form", "")
	}
	if r.deInterlace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deInterlace", r.deInterlace, "form", "")
	}
	if r.requireNonAnamorphic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireNonAnamorphic", r.requireNonAnamorphic, "form", "")
	}
	if r.transcodingMaxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodingMaxAudioChannels", r.transcodingMaxAudioChannels, "form", "")
	}
	if r.cpuCoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpuCoreLimit", r.cpuCoreLimit, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.enableMpegtsM2TsMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableMpegtsM2TsMode", r.enableMpegtsM2TsMode, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoCodec", r.videoCodec, "form", "")
	}
	if r.subtitleCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleCodec", r.subtitleCodec, "form", "")
	}
	if r.transcodeReasons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodeReasons", r.transcodeReasons, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoStreamIndex", r.videoStreamIndex, "form", "")
	}
	if r.context != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "form", "")
	}
	if r.streamOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streamOptions", r.streamOptions, "form", "")
	}
	if r.enableAudioVbrEncoding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAudioVbrEncoding", r.enableAudioVbrEncoding, "form", "")
	} else {
		var defaultValue bool = true
		r.enableAudioVbrEncoding = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"audio/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AudioAPIHeadAudioStreamRequest struct {
	ctx context.Context
	ApiService *AudioAPIService
	itemId string
	container *string
	static *bool
	params *string
	tag *string
	deviceProfileId *string
	playSessionId *string
	segmentContainer *string
	segmentLength *int32
	minSegments *int32
	mediaSourceId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	allowVideoStreamCopy *bool
	allowAudioStreamCopy *bool
	breakOnNonKeyFrames *bool
	audioSampleRate *int32
	maxAudioBitDepth *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *JellyfinSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	requireAvc *bool
	deInterlace *bool
	requireNonAnamorphic *bool
	transcodingMaxAudioChannels *int32
	cpuCoreLimit *int32
	liveStreamId *string
	enableMpegtsM2TsMode *bool
	videoCodec *string
	subtitleCodec *string
	transcodeReasons *string
	audioStreamIndex *int32
	videoStreamIndex *int32
	context *JellyfinEncodingContext
	streamOptions *map[string]string
	enableAudioVbrEncoding *bool
}

// The audio container.
func (r AudioAPIHeadAudioStreamRequest) Container(container string) AudioAPIHeadAudioStreamRequest {
	r.container = &container
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
func (r AudioAPIHeadAudioStreamRequest) Static(static bool) AudioAPIHeadAudioStreamRequest {
	r.static = &static
	return r
}

// The streaming parameters.
func (r AudioAPIHeadAudioStreamRequest) Params(params string) AudioAPIHeadAudioStreamRequest {
	r.params = &params
	return r
}

// The tag.
func (r AudioAPIHeadAudioStreamRequest) Tag(tag string) AudioAPIHeadAudioStreamRequest {
	r.tag = &tag
	return r
}

// Optional. The dlna device profile id to utilize.
// Deprecated
func (r AudioAPIHeadAudioStreamRequest) DeviceProfileId(deviceProfileId string) AudioAPIHeadAudioStreamRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The play session id.
func (r AudioAPIHeadAudioStreamRequest) PlaySessionId(playSessionId string) AudioAPIHeadAudioStreamRequest {
	r.playSessionId = &playSessionId
	return r
}

// The segment container.
func (r AudioAPIHeadAudioStreamRequest) SegmentContainer(segmentContainer string) AudioAPIHeadAudioStreamRequest {
	r.segmentContainer = &segmentContainer
	return r
}

// The segment length.
func (r AudioAPIHeadAudioStreamRequest) SegmentLength(segmentLength int32) AudioAPIHeadAudioStreamRequest {
	r.segmentLength = &segmentLength
	return r
}

// The minimum number of segments.
func (r AudioAPIHeadAudioStreamRequest) MinSegments(minSegments int32) AudioAPIHeadAudioStreamRequest {
	r.minSegments = &minSegments
	return r
}

// The media version id, if playing an alternate version.
func (r AudioAPIHeadAudioStreamRequest) MediaSourceId(mediaSourceId string) AudioAPIHeadAudioStreamRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r AudioAPIHeadAudioStreamRequest) DeviceId(deviceId string) AudioAPIHeadAudioStreamRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension.
func (r AudioAPIHeadAudioStreamRequest) AudioCodec(audioCodec string) AudioAPIHeadAudioStreamRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r AudioAPIHeadAudioStreamRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) AudioAPIHeadAudioStreamRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Whether or not to allow copying of the video stream url.
func (r AudioAPIHeadAudioStreamRequest) AllowVideoStreamCopy(allowVideoStreamCopy bool) AudioAPIHeadAudioStreamRequest {
	r.allowVideoStreamCopy = &allowVideoStreamCopy
	return r
}

// Whether or not to allow copying of the audio stream url.
func (r AudioAPIHeadAudioStreamRequest) AllowAudioStreamCopy(allowAudioStreamCopy bool) AudioAPIHeadAudioStreamRequest {
	r.allowAudioStreamCopy = &allowAudioStreamCopy
	return r
}

// Optional. Whether to break on non key frames.
func (r AudioAPIHeadAudioStreamRequest) BreakOnNonKeyFrames(breakOnNonKeyFrames bool) AudioAPIHeadAudioStreamRequest {
	r.breakOnNonKeyFrames = &breakOnNonKeyFrames
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100.
func (r AudioAPIHeadAudioStreamRequest) AudioSampleRate(audioSampleRate int32) AudioAPIHeadAudioStreamRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. The maximum audio bit depth.
func (r AudioAPIHeadAudioStreamRequest) MaxAudioBitDepth(maxAudioBitDepth int32) AudioAPIHeadAudioStreamRequest {
	r.maxAudioBitDepth = &maxAudioBitDepth
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r AudioAPIHeadAudioStreamRequest) AudioBitRate(audioBitRate int32) AudioAPIHeadAudioStreamRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
func (r AudioAPIHeadAudioStreamRequest) AudioChannels(audioChannels int32) AudioAPIHeadAudioStreamRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
func (r AudioAPIHeadAudioStreamRequest) MaxAudioChannels(maxAudioChannels int32) AudioAPIHeadAudioStreamRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
func (r AudioAPIHeadAudioStreamRequest) Profile(profile string) AudioAPIHeadAudioStreamRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
func (r AudioAPIHeadAudioStreamRequest) Level(level string) AudioAPIHeadAudioStreamRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioAPIHeadAudioStreamRequest) Framerate(framerate float32) AudioAPIHeadAudioStreamRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioAPIHeadAudioStreamRequest) MaxFramerate(maxFramerate float32) AudioAPIHeadAudioStreamRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r AudioAPIHeadAudioStreamRequest) CopyTimestamps(copyTimestamps bool) AudioAPIHeadAudioStreamRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
func (r AudioAPIHeadAudioStreamRequest) StartTimeTicks(startTimeTicks int64) AudioAPIHeadAudioStreamRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r AudioAPIHeadAudioStreamRequest) Width(width int32) AudioAPIHeadAudioStreamRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r AudioAPIHeadAudioStreamRequest) Height(height int32) AudioAPIHeadAudioStreamRequest {
	r.height = &height
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r AudioAPIHeadAudioStreamRequest) VideoBitRate(videoBitRate int32) AudioAPIHeadAudioStreamRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r AudioAPIHeadAudioStreamRequest) SubtitleStreamIndex(subtitleStreamIndex int32) AudioAPIHeadAudioStreamRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r AudioAPIHeadAudioStreamRequest) SubtitleMethod(subtitleMethod JellyfinSubtitleDeliveryMethod) AudioAPIHeadAudioStreamRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r AudioAPIHeadAudioStreamRequest) MaxRefFrames(maxRefFrames int32) AudioAPIHeadAudioStreamRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional. The maximum video bit depth.
func (r AudioAPIHeadAudioStreamRequest) MaxVideoBitDepth(maxVideoBitDepth int32) AudioAPIHeadAudioStreamRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Whether to require avc.
func (r AudioAPIHeadAudioStreamRequest) RequireAvc(requireAvc bool) AudioAPIHeadAudioStreamRequest {
	r.requireAvc = &requireAvc
	return r
}

// Optional. Whether to deinterlace the video.
func (r AudioAPIHeadAudioStreamRequest) DeInterlace(deInterlace bool) AudioAPIHeadAudioStreamRequest {
	r.deInterlace = &deInterlace
	return r
}

// Optional. Whether to require a non anamorphic stream.
func (r AudioAPIHeadAudioStreamRequest) RequireNonAnamorphic(requireNonAnamorphic bool) AudioAPIHeadAudioStreamRequest {
	r.requireNonAnamorphic = &requireNonAnamorphic
	return r
}

// Optional. The maximum number of audio channels to transcode.
func (r AudioAPIHeadAudioStreamRequest) TranscodingMaxAudioChannels(transcodingMaxAudioChannels int32) AudioAPIHeadAudioStreamRequest {
	r.transcodingMaxAudioChannels = &transcodingMaxAudioChannels
	return r
}

// Optional. The limit of how many cpu cores to use.
func (r AudioAPIHeadAudioStreamRequest) CpuCoreLimit(cpuCoreLimit int32) AudioAPIHeadAudioStreamRequest {
	r.cpuCoreLimit = &cpuCoreLimit
	return r
}

// The live stream id.
func (r AudioAPIHeadAudioStreamRequest) LiveStreamId(liveStreamId string) AudioAPIHeadAudioStreamRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// Optional. Whether to enable the MpegtsM2Ts mode.
func (r AudioAPIHeadAudioStreamRequest) EnableMpegtsM2TsMode(enableMpegtsM2TsMode bool) AudioAPIHeadAudioStreamRequest {
	r.enableMpegtsM2TsMode = &enableMpegtsM2TsMode
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension.
func (r AudioAPIHeadAudioStreamRequest) VideoCodec(videoCodec string) AudioAPIHeadAudioStreamRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. Specify a subtitle codec to encode to.
func (r AudioAPIHeadAudioStreamRequest) SubtitleCodec(subtitleCodec string) AudioAPIHeadAudioStreamRequest {
	r.subtitleCodec = &subtitleCodec
	return r
}

// Optional. The transcoding reason.
func (r AudioAPIHeadAudioStreamRequest) TranscodeReasons(transcodeReasons string) AudioAPIHeadAudioStreamRequest {
	r.transcodeReasons = &transcodeReasons
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r AudioAPIHeadAudioStreamRequest) AudioStreamIndex(audioStreamIndex int32) AudioAPIHeadAudioStreamRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r AudioAPIHeadAudioStreamRequest) VideoStreamIndex(videoStreamIndex int32) AudioAPIHeadAudioStreamRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
func (r AudioAPIHeadAudioStreamRequest) Context(context JellyfinEncodingContext) AudioAPIHeadAudioStreamRequest {
	r.context = &context
	return r
}

// Optional. The streaming options.
func (r AudioAPIHeadAudioStreamRequest) StreamOptions(streamOptions map[string]string) AudioAPIHeadAudioStreamRequest {
	r.streamOptions = &streamOptions
	return r
}

// Optional. Whether to enable Audio Encoding.
func (r AudioAPIHeadAudioStreamRequest) EnableAudioVbrEncoding(enableAudioVbrEncoding bool) AudioAPIHeadAudioStreamRequest {
	r.enableAudioVbrEncoding = &enableAudioVbrEncoding
	return r
}

func (r AudioAPIHeadAudioStreamRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.HeadAudioStreamExecute(r)
}

/*
HeadAudioStream Gets an audio stream.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return AudioAPIHeadAudioStreamRequest
*/
func (a *AudioAPIService) HeadAudioStream(ctx context.Context, itemId string) AudioAPIHeadAudioStreamRequest {
	return AudioAPIHeadAudioStreamRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *AudioAPIService) HeadAudioStreamExecute(r AudioAPIHeadAudioStreamRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioAPIService.HeadAudioStream")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{itemId}/stream"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.container != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "container", r.container, "form", "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "static", r.static, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.segmentContainer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentContainer", r.segmentContainer, "form", "")
	}
	if r.segmentLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	}
	if r.minSegments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSegments", r.minSegments, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceId", r.deviceId, "form", "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.allowVideoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowVideoStreamCopy", r.allowVideoStreamCopy, "form", "")
	}
	if r.allowAudioStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowAudioStreamCopy", r.allowAudioStreamCopy, "form", "")
	}
	if r.breakOnNonKeyFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "breakOnNonKeyFrames", r.breakOnNonKeyFrames, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.maxAudioBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioBitDepth", r.maxAudioBitDepth, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.requireAvc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireAvc", r.requireAvc, "form", "")
	}
	if r.deInterlace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deInterlace", r.deInterlace, "form", "")
	}
	if r.requireNonAnamorphic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireNonAnamorphic", r.requireNonAnamorphic, "form", "")
	}
	if r.transcodingMaxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodingMaxAudioChannels", r.transcodingMaxAudioChannels, "form", "")
	}
	if r.cpuCoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpuCoreLimit", r.cpuCoreLimit, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.enableMpegtsM2TsMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableMpegtsM2TsMode", r.enableMpegtsM2TsMode, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoCodec", r.videoCodec, "form", "")
	}
	if r.subtitleCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleCodec", r.subtitleCodec, "form", "")
	}
	if r.transcodeReasons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodeReasons", r.transcodeReasons, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoStreamIndex", r.videoStreamIndex, "form", "")
	}
	if r.context != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "form", "")
	}
	if r.streamOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streamOptions", r.streamOptions, "form", "")
	}
	if r.enableAudioVbrEncoding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAudioVbrEncoding", r.enableAudioVbrEncoding, "form", "")
	} else {
		var defaultValue bool = true
		r.enableAudioVbrEncoding = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"audio/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AudioAPIHeadAudioStreamByContainerRequest struct {
	ctx context.Context
	ApiService *AudioAPIService
	itemId string
	container string
	static *bool
	params *string
	tag *string
	deviceProfileId *string
	playSessionId *string
	segmentContainer *string
	segmentLength *int32
	minSegments *int32
	mediaSourceId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	allowVideoStreamCopy *bool
	allowAudioStreamCopy *bool
	breakOnNonKeyFrames *bool
	audioSampleRate *int32
	maxAudioBitDepth *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *JellyfinSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	requireAvc *bool
	deInterlace *bool
	requireNonAnamorphic *bool
	transcodingMaxAudioChannels *int32
	cpuCoreLimit *int32
	liveStreamId *string
	enableMpegtsM2TsMode *bool
	videoCodec *string
	subtitleCodec *string
	transcodeReasons *string
	audioStreamIndex *int32
	videoStreamIndex *int32
	context *JellyfinEncodingContext
	streamOptions *map[string]string
	enableAudioVbrEncoding *bool
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.
func (r AudioAPIHeadAudioStreamByContainerRequest) Static(static bool) AudioAPIHeadAudioStreamByContainerRequest {
	r.static = &static
	return r
}

// The streaming parameters.
func (r AudioAPIHeadAudioStreamByContainerRequest) Params(params string) AudioAPIHeadAudioStreamByContainerRequest {
	r.params = &params
	return r
}

// The tag.
func (r AudioAPIHeadAudioStreamByContainerRequest) Tag(tag string) AudioAPIHeadAudioStreamByContainerRequest {
	r.tag = &tag
	return r
}

// Optional. The dlna device profile id to utilize.
// Deprecated
func (r AudioAPIHeadAudioStreamByContainerRequest) DeviceProfileId(deviceProfileId string) AudioAPIHeadAudioStreamByContainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The play session id.
func (r AudioAPIHeadAudioStreamByContainerRequest) PlaySessionId(playSessionId string) AudioAPIHeadAudioStreamByContainerRequest {
	r.playSessionId = &playSessionId
	return r
}

// The segment container.
func (r AudioAPIHeadAudioStreamByContainerRequest) SegmentContainer(segmentContainer string) AudioAPIHeadAudioStreamByContainerRequest {
	r.segmentContainer = &segmentContainer
	return r
}

// The segment length.
func (r AudioAPIHeadAudioStreamByContainerRequest) SegmentLength(segmentLength int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.segmentLength = &segmentLength
	return r
}

// The minimum number of segments.
func (r AudioAPIHeadAudioStreamByContainerRequest) MinSegments(minSegments int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.minSegments = &minSegments
	return r
}

// The media version id, if playing an alternate version.
func (r AudioAPIHeadAudioStreamByContainerRequest) MediaSourceId(mediaSourceId string) AudioAPIHeadAudioStreamByContainerRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r AudioAPIHeadAudioStreamByContainerRequest) DeviceId(deviceId string) AudioAPIHeadAudioStreamByContainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify an audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension.
func (r AudioAPIHeadAudioStreamByContainerRequest) AudioCodec(audioCodec string) AudioAPIHeadAudioStreamByContainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r AudioAPIHeadAudioStreamByContainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) AudioAPIHeadAudioStreamByContainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Whether or not to allow copying of the video stream url.
func (r AudioAPIHeadAudioStreamByContainerRequest) AllowVideoStreamCopy(allowVideoStreamCopy bool) AudioAPIHeadAudioStreamByContainerRequest {
	r.allowVideoStreamCopy = &allowVideoStreamCopy
	return r
}

// Whether or not to allow copying of the audio stream url.
func (r AudioAPIHeadAudioStreamByContainerRequest) AllowAudioStreamCopy(allowAudioStreamCopy bool) AudioAPIHeadAudioStreamByContainerRequest {
	r.allowAudioStreamCopy = &allowAudioStreamCopy
	return r
}

// Optional. Whether to break on non key frames.
func (r AudioAPIHeadAudioStreamByContainerRequest) BreakOnNonKeyFrames(breakOnNonKeyFrames bool) AudioAPIHeadAudioStreamByContainerRequest {
	r.breakOnNonKeyFrames = &breakOnNonKeyFrames
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100.
func (r AudioAPIHeadAudioStreamByContainerRequest) AudioSampleRate(audioSampleRate int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. The maximum audio bit depth.
func (r AudioAPIHeadAudioStreamByContainerRequest) MaxAudioBitDepth(maxAudioBitDepth int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.maxAudioBitDepth = &maxAudioBitDepth
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r AudioAPIHeadAudioStreamByContainerRequest) AudioBitRate(audioBitRate int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2.
func (r AudioAPIHeadAudioStreamByContainerRequest) AudioChannels(audioChannels int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2.
func (r AudioAPIHeadAudioStreamByContainerRequest) MaxAudioChannels(maxAudioChannels int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.
func (r AudioAPIHeadAudioStreamByContainerRequest) Profile(profile string) AudioAPIHeadAudioStreamByContainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.
func (r AudioAPIHeadAudioStreamByContainerRequest) Level(level string) AudioAPIHeadAudioStreamByContainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioAPIHeadAudioStreamByContainerRequest) Framerate(framerate float32) AudioAPIHeadAudioStreamByContainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioAPIHeadAudioStreamByContainerRequest) MaxFramerate(maxFramerate float32) AudioAPIHeadAudioStreamByContainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r AudioAPIHeadAudioStreamByContainerRequest) CopyTimestamps(copyTimestamps bool) AudioAPIHeadAudioStreamByContainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.
func (r AudioAPIHeadAudioStreamByContainerRequest) StartTimeTicks(startTimeTicks int64) AudioAPIHeadAudioStreamByContainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r AudioAPIHeadAudioStreamByContainerRequest) Width(width int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r AudioAPIHeadAudioStreamByContainerRequest) Height(height int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.height = &height
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r AudioAPIHeadAudioStreamByContainerRequest) VideoBitRate(videoBitRate int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r AudioAPIHeadAudioStreamByContainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r AudioAPIHeadAudioStreamByContainerRequest) SubtitleMethod(subtitleMethod JellyfinSubtitleDeliveryMethod) AudioAPIHeadAudioStreamByContainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r AudioAPIHeadAudioStreamByContainerRequest) MaxRefFrames(maxRefFrames int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional. The maximum video bit depth.
func (r AudioAPIHeadAudioStreamByContainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Whether to require avc.
func (r AudioAPIHeadAudioStreamByContainerRequest) RequireAvc(requireAvc bool) AudioAPIHeadAudioStreamByContainerRequest {
	r.requireAvc = &requireAvc
	return r
}

// Optional. Whether to deinterlace the video.
func (r AudioAPIHeadAudioStreamByContainerRequest) DeInterlace(deInterlace bool) AudioAPIHeadAudioStreamByContainerRequest {
	r.deInterlace = &deInterlace
	return r
}

// Optional. Whether to require a non anamporphic stream.
func (r AudioAPIHeadAudioStreamByContainerRequest) RequireNonAnamorphic(requireNonAnamorphic bool) AudioAPIHeadAudioStreamByContainerRequest {
	r.requireNonAnamorphic = &requireNonAnamorphic
	return r
}

// Optional. The maximum number of audio channels to transcode.
func (r AudioAPIHeadAudioStreamByContainerRequest) TranscodingMaxAudioChannels(transcodingMaxAudioChannels int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.transcodingMaxAudioChannels = &transcodingMaxAudioChannels
	return r
}

// Optional. The limit of how many cpu cores to use.
func (r AudioAPIHeadAudioStreamByContainerRequest) CpuCoreLimit(cpuCoreLimit int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.cpuCoreLimit = &cpuCoreLimit
	return r
}

// The live stream id.
func (r AudioAPIHeadAudioStreamByContainerRequest) LiveStreamId(liveStreamId string) AudioAPIHeadAudioStreamByContainerRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// Optional. Whether to enable the MpegtsM2Ts mode.
func (r AudioAPIHeadAudioStreamByContainerRequest) EnableMpegtsM2TsMode(enableMpegtsM2TsMode bool) AudioAPIHeadAudioStreamByContainerRequest {
	r.enableMpegtsM2TsMode = &enableMpegtsM2TsMode
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension.
func (r AudioAPIHeadAudioStreamByContainerRequest) VideoCodec(videoCodec string) AudioAPIHeadAudioStreamByContainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. Specify a subtitle codec to encode to.
func (r AudioAPIHeadAudioStreamByContainerRequest) SubtitleCodec(subtitleCodec string) AudioAPIHeadAudioStreamByContainerRequest {
	r.subtitleCodec = &subtitleCodec
	return r
}

// Optional. The transcoding reason.
func (r AudioAPIHeadAudioStreamByContainerRequest) TranscodeReasons(transcodeReasons string) AudioAPIHeadAudioStreamByContainerRequest {
	r.transcodeReasons = &transcodeReasons
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r AudioAPIHeadAudioStreamByContainerRequest) AudioStreamIndex(audioStreamIndex int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r AudioAPIHeadAudioStreamByContainerRequest) VideoStreamIndex(videoStreamIndex int32) AudioAPIHeadAudioStreamByContainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

// Optional. The MediaBrowser.Model.Dlna.EncodingContext.
func (r AudioAPIHeadAudioStreamByContainerRequest) Context(context JellyfinEncodingContext) AudioAPIHeadAudioStreamByContainerRequest {
	r.context = &context
	return r
}

// Optional. The streaming options.
func (r AudioAPIHeadAudioStreamByContainerRequest) StreamOptions(streamOptions map[string]string) AudioAPIHeadAudioStreamByContainerRequest {
	r.streamOptions = &streamOptions
	return r
}

// Optional. Whether to enable Audio Encoding.
func (r AudioAPIHeadAudioStreamByContainerRequest) EnableAudioVbrEncoding(enableAudioVbrEncoding bool) AudioAPIHeadAudioStreamByContainerRequest {
	r.enableAudioVbrEncoding = &enableAudioVbrEncoding
	return r
}

func (r AudioAPIHeadAudioStreamByContainerRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.HeadAudioStreamByContainerExecute(r)
}

/*
HeadAudioStreamByContainer Gets an audio stream.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @param container The audio container.
 @return AudioAPIHeadAudioStreamByContainerRequest
*/
func (a *AudioAPIService) HeadAudioStreamByContainer(ctx context.Context, itemId string, container string) AudioAPIHeadAudioStreamByContainerRequest {
	return AudioAPIHeadAudioStreamByContainerRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		container: container,
	}
}

// Execute executes the request
//  @return *os.File
func (a *AudioAPIService) HeadAudioStreamByContainerExecute(r AudioAPIHeadAudioStreamByContainerRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioAPIService.HeadAudioStreamByContainer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{itemId}/stream.{container}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"container"+"}", url.PathEscape(parameterValueToString(r.container, "container")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "static", r.static, "form", "")
	}
	if r.params != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "params", r.params, "form", "")
	}
	if r.tag != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tag", r.tag, "form", "")
	}
	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceProfileId", r.deviceProfileId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.segmentContainer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentContainer", r.segmentContainer, "form", "")
	}
	if r.segmentLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "segmentLength", r.segmentLength, "form", "")
	}
	if r.minSegments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSegments", r.minSegments, "form", "")
	}
	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceId", r.deviceId, "form", "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioCodec", r.audioCodec, "form", "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAutoStreamCopy", r.enableAutoStreamCopy, "form", "")
	}
	if r.allowVideoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowVideoStreamCopy", r.allowVideoStreamCopy, "form", "")
	}
	if r.allowAudioStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowAudioStreamCopy", r.allowAudioStreamCopy, "form", "")
	}
	if r.breakOnNonKeyFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "breakOnNonKeyFrames", r.breakOnNonKeyFrames, "form", "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioSampleRate", r.audioSampleRate, "form", "")
	}
	if r.maxAudioBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioBitDepth", r.maxAudioBitDepth, "form", "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioBitRate", r.audioBitRate, "form", "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioChannels", r.audioChannels, "form", "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAudioChannels", r.maxAudioChannels, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level", r.level, "form", "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "framerate", r.framerate, "form", "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFramerate", r.maxFramerate, "form", "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "copyTimestamps", r.copyTimestamps, "form", "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTimeTicks", r.startTimeTicks, "form", "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoBitRate", r.videoBitRate, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleMethod", r.subtitleMethod, "form", "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxRefFrames", r.maxRefFrames, "form", "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVideoBitDepth", r.maxVideoBitDepth, "form", "")
	}
	if r.requireAvc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireAvc", r.requireAvc, "form", "")
	}
	if r.deInterlace != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deInterlace", r.deInterlace, "form", "")
	}
	if r.requireNonAnamorphic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requireNonAnamorphic", r.requireNonAnamorphic, "form", "")
	}
	if r.transcodingMaxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodingMaxAudioChannels", r.transcodingMaxAudioChannels, "form", "")
	}
	if r.cpuCoreLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpuCoreLimit", r.cpuCoreLimit, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.enableMpegtsM2TsMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableMpegtsM2TsMode", r.enableMpegtsM2TsMode, "form", "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoCodec", r.videoCodec, "form", "")
	}
	if r.subtitleCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleCodec", r.subtitleCodec, "form", "")
	}
	if r.transcodeReasons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transcodeReasons", r.transcodeReasons, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "videoStreamIndex", r.videoStreamIndex, "form", "")
	}
	if r.context != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "context", r.context, "form", "")
	}
	if r.streamOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "streamOptions", r.streamOptions, "form", "")
	}
	if r.enableAudioVbrEncoding != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableAudioVbrEncoding", r.enableAudioVbrEncoding, "form", "")
	} else {
		var defaultValue bool = true
		r.enableAudioVbrEncoding = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"audio/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
