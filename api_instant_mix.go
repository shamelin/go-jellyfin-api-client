/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// InstantMixAPIService InstantMixAPI service
type InstantMixAPIService service

type InstantMixAPIGetInstantMixFromAlbumRequest struct {
	ctx context.Context
	ApiService *InstantMixAPIService
	itemId string
	userId *string
	limit *int32
	fields *[]JellyfinItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]JellyfinImageType
}

// Optional. Filter by user id, and attach user data.
func (r InstantMixAPIGetInstantMixFromAlbumRequest) UserId(userId string) InstantMixAPIGetInstantMixFromAlbumRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r InstantMixAPIGetInstantMixFromAlbumRequest) Limit(limit int32) InstantMixAPIGetInstantMixFromAlbumRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r InstantMixAPIGetInstantMixFromAlbumRequest) Fields(fields []JellyfinItemFields) InstantMixAPIGetInstantMixFromAlbumRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r InstantMixAPIGetInstantMixFromAlbumRequest) EnableImages(enableImages bool) InstantMixAPIGetInstantMixFromAlbumRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r InstantMixAPIGetInstantMixFromAlbumRequest) EnableUserData(enableUserData bool) InstantMixAPIGetInstantMixFromAlbumRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r InstantMixAPIGetInstantMixFromAlbumRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixAPIGetInstantMixFromAlbumRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixAPIGetInstantMixFromAlbumRequest) EnableImageTypes(enableImageTypes []JellyfinImageType) InstantMixAPIGetInstantMixFromAlbumRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r InstantMixAPIGetInstantMixFromAlbumRequest) Execute() (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromAlbumExecute(r)
}

/*
GetInstantMixFromAlbum Creates an instant playlist based on a given album.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return InstantMixAPIGetInstantMixFromAlbumRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromAlbum(ctx context.Context, itemId string) InstantMixAPIGetInstantMixFromAlbumRequest {
	return InstantMixAPIGetInstantMixFromAlbumRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return JellyfinBaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromAlbumExecute(r InstantMixAPIGetInstantMixFromAlbumRequest) (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinBaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromAlbum")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Albums/{itemId}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixAPIGetInstantMixFromArtistsRequest struct {
	ctx context.Context
	ApiService *InstantMixAPIService
	itemId string
	userId *string
	limit *int32
	fields *[]JellyfinItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]JellyfinImageType
}

// Optional. Filter by user id, and attach user data.
func (r InstantMixAPIGetInstantMixFromArtistsRequest) UserId(userId string) InstantMixAPIGetInstantMixFromArtistsRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r InstantMixAPIGetInstantMixFromArtistsRequest) Limit(limit int32) InstantMixAPIGetInstantMixFromArtistsRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r InstantMixAPIGetInstantMixFromArtistsRequest) Fields(fields []JellyfinItemFields) InstantMixAPIGetInstantMixFromArtistsRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r InstantMixAPIGetInstantMixFromArtistsRequest) EnableImages(enableImages bool) InstantMixAPIGetInstantMixFromArtistsRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r InstantMixAPIGetInstantMixFromArtistsRequest) EnableUserData(enableUserData bool) InstantMixAPIGetInstantMixFromArtistsRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r InstantMixAPIGetInstantMixFromArtistsRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixAPIGetInstantMixFromArtistsRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixAPIGetInstantMixFromArtistsRequest) EnableImageTypes(enableImageTypes []JellyfinImageType) InstantMixAPIGetInstantMixFromArtistsRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r InstantMixAPIGetInstantMixFromArtistsRequest) Execute() (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromArtistsExecute(r)
}

/*
GetInstantMixFromArtists Creates an instant playlist based on a given artist.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return InstantMixAPIGetInstantMixFromArtistsRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromArtists(ctx context.Context, itemId string) InstantMixAPIGetInstantMixFromArtistsRequest {
	return InstantMixAPIGetInstantMixFromArtistsRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return JellyfinBaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromArtistsExecute(r InstantMixAPIGetInstantMixFromArtistsRequest) (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinBaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromArtists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists/{itemId}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixAPIGetInstantMixFromArtists2Request struct {
	ctx context.Context
	ApiService *InstantMixAPIService
	id *string
	userId *string
	limit *int32
	fields *[]JellyfinItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]JellyfinImageType
}

// The item id.
func (r InstantMixAPIGetInstantMixFromArtists2Request) Id(id string) InstantMixAPIGetInstantMixFromArtists2Request {
	r.id = &id
	return r
}

// Optional. Filter by user id, and attach user data.
func (r InstantMixAPIGetInstantMixFromArtists2Request) UserId(userId string) InstantMixAPIGetInstantMixFromArtists2Request {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r InstantMixAPIGetInstantMixFromArtists2Request) Limit(limit int32) InstantMixAPIGetInstantMixFromArtists2Request {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r InstantMixAPIGetInstantMixFromArtists2Request) Fields(fields []JellyfinItemFields) InstantMixAPIGetInstantMixFromArtists2Request {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r InstantMixAPIGetInstantMixFromArtists2Request) EnableImages(enableImages bool) InstantMixAPIGetInstantMixFromArtists2Request {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r InstantMixAPIGetInstantMixFromArtists2Request) EnableUserData(enableUserData bool) InstantMixAPIGetInstantMixFromArtists2Request {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r InstantMixAPIGetInstantMixFromArtists2Request) ImageTypeLimit(imageTypeLimit int32) InstantMixAPIGetInstantMixFromArtists2Request {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixAPIGetInstantMixFromArtists2Request) EnableImageTypes(enableImageTypes []JellyfinImageType) InstantMixAPIGetInstantMixFromArtists2Request {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r InstantMixAPIGetInstantMixFromArtists2Request) Execute() (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromArtists2Execute(r)
}

/*
GetInstantMixFromArtists2 Creates an instant playlist based on a given artist.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstantMixAPIGetInstantMixFromArtists2Request

Deprecated
*/
func (a *InstantMixAPIService) GetInstantMixFromArtists2(ctx context.Context) InstantMixAPIGetInstantMixFromArtists2Request {
	return InstantMixAPIGetInstantMixFromArtists2Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JellyfinBaseItemDtoQueryResult
// Deprecated
func (a *InstantMixAPIService) GetInstantMixFromArtists2Execute(r InstantMixAPIGetInstantMixFromArtists2Request) (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinBaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromArtists2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists/InstantMix"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixAPIGetInstantMixFromItemRequest struct {
	ctx context.Context
	ApiService *InstantMixAPIService
	itemId string
	userId *string
	limit *int32
	fields *[]JellyfinItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]JellyfinImageType
}

// Optional. Filter by user id, and attach user data.
func (r InstantMixAPIGetInstantMixFromItemRequest) UserId(userId string) InstantMixAPIGetInstantMixFromItemRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r InstantMixAPIGetInstantMixFromItemRequest) Limit(limit int32) InstantMixAPIGetInstantMixFromItemRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r InstantMixAPIGetInstantMixFromItemRequest) Fields(fields []JellyfinItemFields) InstantMixAPIGetInstantMixFromItemRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r InstantMixAPIGetInstantMixFromItemRequest) EnableImages(enableImages bool) InstantMixAPIGetInstantMixFromItemRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r InstantMixAPIGetInstantMixFromItemRequest) EnableUserData(enableUserData bool) InstantMixAPIGetInstantMixFromItemRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r InstantMixAPIGetInstantMixFromItemRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixAPIGetInstantMixFromItemRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixAPIGetInstantMixFromItemRequest) EnableImageTypes(enableImageTypes []JellyfinImageType) InstantMixAPIGetInstantMixFromItemRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r InstantMixAPIGetInstantMixFromItemRequest) Execute() (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromItemExecute(r)
}

/*
GetInstantMixFromItem Creates an instant playlist based on a given item.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return InstantMixAPIGetInstantMixFromItemRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromItem(ctx context.Context, itemId string) InstantMixAPIGetInstantMixFromItemRequest {
	return InstantMixAPIGetInstantMixFromItemRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return JellyfinBaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromItemExecute(r InstantMixAPIGetInstantMixFromItemRequest) (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinBaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{itemId}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixAPIGetInstantMixFromMusicGenreByIdRequest struct {
	ctx context.Context
	ApiService *InstantMixAPIService
	id *string
	userId *string
	limit *int32
	fields *[]JellyfinItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]JellyfinImageType
}

// The item id.
func (r InstantMixAPIGetInstantMixFromMusicGenreByIdRequest) Id(id string) InstantMixAPIGetInstantMixFromMusicGenreByIdRequest {
	r.id = &id
	return r
}

// Optional. Filter by user id, and attach user data.
func (r InstantMixAPIGetInstantMixFromMusicGenreByIdRequest) UserId(userId string) InstantMixAPIGetInstantMixFromMusicGenreByIdRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r InstantMixAPIGetInstantMixFromMusicGenreByIdRequest) Limit(limit int32) InstantMixAPIGetInstantMixFromMusicGenreByIdRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r InstantMixAPIGetInstantMixFromMusicGenreByIdRequest) Fields(fields []JellyfinItemFields) InstantMixAPIGetInstantMixFromMusicGenreByIdRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r InstantMixAPIGetInstantMixFromMusicGenreByIdRequest) EnableImages(enableImages bool) InstantMixAPIGetInstantMixFromMusicGenreByIdRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r InstantMixAPIGetInstantMixFromMusicGenreByIdRequest) EnableUserData(enableUserData bool) InstantMixAPIGetInstantMixFromMusicGenreByIdRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r InstantMixAPIGetInstantMixFromMusicGenreByIdRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixAPIGetInstantMixFromMusicGenreByIdRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixAPIGetInstantMixFromMusicGenreByIdRequest) EnableImageTypes(enableImageTypes []JellyfinImageType) InstantMixAPIGetInstantMixFromMusicGenreByIdRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r InstantMixAPIGetInstantMixFromMusicGenreByIdRequest) Execute() (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromMusicGenreByIdExecute(r)
}

/*
GetInstantMixFromMusicGenreById Creates an instant playlist based on a given genre.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstantMixAPIGetInstantMixFromMusicGenreByIdRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromMusicGenreById(ctx context.Context) InstantMixAPIGetInstantMixFromMusicGenreByIdRequest {
	return InstantMixAPIGetInstantMixFromMusicGenreByIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JellyfinBaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromMusicGenreByIdExecute(r InstantMixAPIGetInstantMixFromMusicGenreByIdRequest) (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinBaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromMusicGenreById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MusicGenres/InstantMix"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixAPIGetInstantMixFromMusicGenreByNameRequest struct {
	ctx context.Context
	ApiService *InstantMixAPIService
	name string
	userId *string
	limit *int32
	fields *[]JellyfinItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]JellyfinImageType
}

// Optional. Filter by user id, and attach user data.
func (r InstantMixAPIGetInstantMixFromMusicGenreByNameRequest) UserId(userId string) InstantMixAPIGetInstantMixFromMusicGenreByNameRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r InstantMixAPIGetInstantMixFromMusicGenreByNameRequest) Limit(limit int32) InstantMixAPIGetInstantMixFromMusicGenreByNameRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r InstantMixAPIGetInstantMixFromMusicGenreByNameRequest) Fields(fields []JellyfinItemFields) InstantMixAPIGetInstantMixFromMusicGenreByNameRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r InstantMixAPIGetInstantMixFromMusicGenreByNameRequest) EnableImages(enableImages bool) InstantMixAPIGetInstantMixFromMusicGenreByNameRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r InstantMixAPIGetInstantMixFromMusicGenreByNameRequest) EnableUserData(enableUserData bool) InstantMixAPIGetInstantMixFromMusicGenreByNameRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r InstantMixAPIGetInstantMixFromMusicGenreByNameRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixAPIGetInstantMixFromMusicGenreByNameRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixAPIGetInstantMixFromMusicGenreByNameRequest) EnableImageTypes(enableImageTypes []JellyfinImageType) InstantMixAPIGetInstantMixFromMusicGenreByNameRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r InstantMixAPIGetInstantMixFromMusicGenreByNameRequest) Execute() (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromMusicGenreByNameExecute(r)
}

/*
GetInstantMixFromMusicGenreByName Creates an instant playlist based on a given genre.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name The genre name.
 @return InstantMixAPIGetInstantMixFromMusicGenreByNameRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromMusicGenreByName(ctx context.Context, name string) InstantMixAPIGetInstantMixFromMusicGenreByNameRequest {
	return InstantMixAPIGetInstantMixFromMusicGenreByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return JellyfinBaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromMusicGenreByNameExecute(r InstantMixAPIGetInstantMixFromMusicGenreByNameRequest) (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinBaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromMusicGenreByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MusicGenres/{name}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixAPIGetInstantMixFromPlaylistRequest struct {
	ctx context.Context
	ApiService *InstantMixAPIService
	itemId string
	userId *string
	limit *int32
	fields *[]JellyfinItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]JellyfinImageType
}

// Optional. Filter by user id, and attach user data.
func (r InstantMixAPIGetInstantMixFromPlaylistRequest) UserId(userId string) InstantMixAPIGetInstantMixFromPlaylistRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r InstantMixAPIGetInstantMixFromPlaylistRequest) Limit(limit int32) InstantMixAPIGetInstantMixFromPlaylistRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r InstantMixAPIGetInstantMixFromPlaylistRequest) Fields(fields []JellyfinItemFields) InstantMixAPIGetInstantMixFromPlaylistRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r InstantMixAPIGetInstantMixFromPlaylistRequest) EnableImages(enableImages bool) InstantMixAPIGetInstantMixFromPlaylistRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r InstantMixAPIGetInstantMixFromPlaylistRequest) EnableUserData(enableUserData bool) InstantMixAPIGetInstantMixFromPlaylistRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r InstantMixAPIGetInstantMixFromPlaylistRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixAPIGetInstantMixFromPlaylistRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixAPIGetInstantMixFromPlaylistRequest) EnableImageTypes(enableImageTypes []JellyfinImageType) InstantMixAPIGetInstantMixFromPlaylistRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r InstantMixAPIGetInstantMixFromPlaylistRequest) Execute() (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromPlaylistExecute(r)
}

/*
GetInstantMixFromPlaylist Creates an instant playlist based on a given playlist.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return InstantMixAPIGetInstantMixFromPlaylistRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromPlaylist(ctx context.Context, itemId string) InstantMixAPIGetInstantMixFromPlaylistRequest {
	return InstantMixAPIGetInstantMixFromPlaylistRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return JellyfinBaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromPlaylistExecute(r InstantMixAPIGetInstantMixFromPlaylistRequest) (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinBaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromPlaylist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{itemId}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixAPIGetInstantMixFromSongRequest struct {
	ctx context.Context
	ApiService *InstantMixAPIService
	itemId string
	userId *string
	limit *int32
	fields *[]JellyfinItemFields
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]JellyfinImageType
}

// Optional. Filter by user id, and attach user data.
func (r InstantMixAPIGetInstantMixFromSongRequest) UserId(userId string) InstantMixAPIGetInstantMixFromSongRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return.
func (r InstantMixAPIGetInstantMixFromSongRequest) Limit(limit int32) InstantMixAPIGetInstantMixFromSongRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r InstantMixAPIGetInstantMixFromSongRequest) Fields(fields []JellyfinItemFields) InstantMixAPIGetInstantMixFromSongRequest {
	r.fields = &fields
	return r
}

// Optional. Include image information in output.
func (r InstantMixAPIGetInstantMixFromSongRequest) EnableImages(enableImages bool) InstantMixAPIGetInstantMixFromSongRequest {
	r.enableImages = &enableImages
	return r
}

// Optional. Include user data.
func (r InstantMixAPIGetInstantMixFromSongRequest) EnableUserData(enableUserData bool) InstantMixAPIGetInstantMixFromSongRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional. The max number of images to return, per image type.
func (r InstantMixAPIGetInstantMixFromSongRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixAPIGetInstantMixFromSongRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixAPIGetInstantMixFromSongRequest) EnableImageTypes(enableImageTypes []JellyfinImageType) InstantMixAPIGetInstantMixFromSongRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r InstantMixAPIGetInstantMixFromSongRequest) Execute() (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetInstantMixFromSongExecute(r)
}

/*
GetInstantMixFromSong Creates an instant playlist based on a given song.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId The item id.
 @return InstantMixAPIGetInstantMixFromSongRequest
*/
func (a *InstantMixAPIService) GetInstantMixFromSong(ctx context.Context, itemId string) InstantMixAPIGetInstantMixFromSongRequest {
	return InstantMixAPIGetInstantMixFromSongRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return JellyfinBaseItemDtoQueryResult
func (a *InstantMixAPIService) GetInstantMixFromSongExecute(r InstantMixAPIGetInstantMixFromSongRequest) (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinBaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixAPIService.GetInstantMixFromSong")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Songs/{itemId}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
