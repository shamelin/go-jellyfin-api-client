/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinMetadataEditorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinMetadataEditorInfo{}

// JellyfinMetadataEditorInfo struct for JellyfinMetadataEditorInfo
type JellyfinMetadataEditorInfo struct {
	ParentalRatingOptions []JellyfinParentalRating `json:"ParentalRatingOptions,omitempty"`
	Countries []JellyfinCountryInfo `json:"Countries,omitempty"`
	Cultures []JellyfinCultureDto `json:"Cultures,omitempty"`
	ExternalIdInfos []JellyfinExternalIdInfo `json:"ExternalIdInfos,omitempty"`
	ContentType NullableJellyfinCollectionType `json:"ContentType,omitempty"`
	ContentTypeOptions []JellyfinNameValuePair `json:"ContentTypeOptions,omitempty"`
}

// NewJellyfinMetadataEditorInfo instantiates a new JellyfinMetadataEditorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinMetadataEditorInfo() *JellyfinMetadataEditorInfo {
	this := JellyfinMetadataEditorInfo{}
	return &this
}

// NewJellyfinMetadataEditorInfoWithDefaults instantiates a new JellyfinMetadataEditorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinMetadataEditorInfoWithDefaults() *JellyfinMetadataEditorInfo {
	this := JellyfinMetadataEditorInfo{}
	return &this
}

// GetParentalRatingOptions returns the ParentalRatingOptions field value if set, zero value otherwise.
func (o *JellyfinMetadataEditorInfo) GetParentalRatingOptions() []JellyfinParentalRating {
	if o == nil || IsNil(o.ParentalRatingOptions) {
		var ret []JellyfinParentalRating
		return ret
	}
	return o.ParentalRatingOptions
}

// GetParentalRatingOptionsOk returns a tuple with the ParentalRatingOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinMetadataEditorInfo) GetParentalRatingOptionsOk() ([]JellyfinParentalRating, bool) {
	if o == nil || IsNil(o.ParentalRatingOptions) {
		return nil, false
	}
	return o.ParentalRatingOptions, true
}

// HasParentalRatingOptions returns a boolean if a field has been set.
func (o *JellyfinMetadataEditorInfo) HasParentalRatingOptions() bool {
	if o != nil && !IsNil(o.ParentalRatingOptions) {
		return true
	}

	return false
}

// SetParentalRatingOptions gets a reference to the given []JellyfinParentalRating and assigns it to the ParentalRatingOptions field.
func (o *JellyfinMetadataEditorInfo) SetParentalRatingOptions(v []JellyfinParentalRating) {
	o.ParentalRatingOptions = v
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *JellyfinMetadataEditorInfo) GetCountries() []JellyfinCountryInfo {
	if o == nil || IsNil(o.Countries) {
		var ret []JellyfinCountryInfo
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinMetadataEditorInfo) GetCountriesOk() ([]JellyfinCountryInfo, bool) {
	if o == nil || IsNil(o.Countries) {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *JellyfinMetadataEditorInfo) HasCountries() bool {
	if o != nil && !IsNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []JellyfinCountryInfo and assigns it to the Countries field.
func (o *JellyfinMetadataEditorInfo) SetCountries(v []JellyfinCountryInfo) {
	o.Countries = v
}

// GetCultures returns the Cultures field value if set, zero value otherwise.
func (o *JellyfinMetadataEditorInfo) GetCultures() []JellyfinCultureDto {
	if o == nil || IsNil(o.Cultures) {
		var ret []JellyfinCultureDto
		return ret
	}
	return o.Cultures
}

// GetCulturesOk returns a tuple with the Cultures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinMetadataEditorInfo) GetCulturesOk() ([]JellyfinCultureDto, bool) {
	if o == nil || IsNil(o.Cultures) {
		return nil, false
	}
	return o.Cultures, true
}

// HasCultures returns a boolean if a field has been set.
func (o *JellyfinMetadataEditorInfo) HasCultures() bool {
	if o != nil && !IsNil(o.Cultures) {
		return true
	}

	return false
}

// SetCultures gets a reference to the given []JellyfinCultureDto and assigns it to the Cultures field.
func (o *JellyfinMetadataEditorInfo) SetCultures(v []JellyfinCultureDto) {
	o.Cultures = v
}

// GetExternalIdInfos returns the ExternalIdInfos field value if set, zero value otherwise.
func (o *JellyfinMetadataEditorInfo) GetExternalIdInfos() []JellyfinExternalIdInfo {
	if o == nil || IsNil(o.ExternalIdInfos) {
		var ret []JellyfinExternalIdInfo
		return ret
	}
	return o.ExternalIdInfos
}

// GetExternalIdInfosOk returns a tuple with the ExternalIdInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinMetadataEditorInfo) GetExternalIdInfosOk() ([]JellyfinExternalIdInfo, bool) {
	if o == nil || IsNil(o.ExternalIdInfos) {
		return nil, false
	}
	return o.ExternalIdInfos, true
}

// HasExternalIdInfos returns a boolean if a field has been set.
func (o *JellyfinMetadataEditorInfo) HasExternalIdInfos() bool {
	if o != nil && !IsNil(o.ExternalIdInfos) {
		return true
	}

	return false
}

// SetExternalIdInfos gets a reference to the given []JellyfinExternalIdInfo and assigns it to the ExternalIdInfos field.
func (o *JellyfinMetadataEditorInfo) SetExternalIdInfos(v []JellyfinExternalIdInfo) {
	o.ExternalIdInfos = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinMetadataEditorInfo) GetContentType() JellyfinCollectionType {
	if o == nil || IsNil(o.ContentType.Get()) {
		var ret JellyfinCollectionType
		return ret
	}
	return *o.ContentType.Get()
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinMetadataEditorInfo) GetContentTypeOk() (*JellyfinCollectionType, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentType.Get(), o.ContentType.IsSet()
}

// HasContentType returns a boolean if a field has been set.
func (o *JellyfinMetadataEditorInfo) HasContentType() bool {
	if o != nil && o.ContentType.IsSet() {
		return true
	}

	return false
}

// SetContentType gets a reference to the given NullableJellyfinCollectionType and assigns it to the ContentType field.
func (o *JellyfinMetadataEditorInfo) SetContentType(v JellyfinCollectionType) {
	o.ContentType.Set(&v)
}
// SetContentTypeNil sets the value for ContentType to be an explicit nil
func (o *JellyfinMetadataEditorInfo) SetContentTypeNil() {
	o.ContentType.Set(nil)
}

// UnsetContentType ensures that no value is present for ContentType, not even an explicit nil
func (o *JellyfinMetadataEditorInfo) UnsetContentType() {
	o.ContentType.Unset()
}

// GetContentTypeOptions returns the ContentTypeOptions field value if set, zero value otherwise.
func (o *JellyfinMetadataEditorInfo) GetContentTypeOptions() []JellyfinNameValuePair {
	if o == nil || IsNil(o.ContentTypeOptions) {
		var ret []JellyfinNameValuePair
		return ret
	}
	return o.ContentTypeOptions
}

// GetContentTypeOptionsOk returns a tuple with the ContentTypeOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinMetadataEditorInfo) GetContentTypeOptionsOk() ([]JellyfinNameValuePair, bool) {
	if o == nil || IsNil(o.ContentTypeOptions) {
		return nil, false
	}
	return o.ContentTypeOptions, true
}

// HasContentTypeOptions returns a boolean if a field has been set.
func (o *JellyfinMetadataEditorInfo) HasContentTypeOptions() bool {
	if o != nil && !IsNil(o.ContentTypeOptions) {
		return true
	}

	return false
}

// SetContentTypeOptions gets a reference to the given []JellyfinNameValuePair and assigns it to the ContentTypeOptions field.
func (o *JellyfinMetadataEditorInfo) SetContentTypeOptions(v []JellyfinNameValuePair) {
	o.ContentTypeOptions = v
}

func (o JellyfinMetadataEditorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinMetadataEditorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParentalRatingOptions) {
		toSerialize["ParentalRatingOptions"] = o.ParentalRatingOptions
	}
	if !IsNil(o.Countries) {
		toSerialize["Countries"] = o.Countries
	}
	if !IsNil(o.Cultures) {
		toSerialize["Cultures"] = o.Cultures
	}
	if !IsNil(o.ExternalIdInfos) {
		toSerialize["ExternalIdInfos"] = o.ExternalIdInfos
	}
	if o.ContentType.IsSet() {
		toSerialize["ContentType"] = o.ContentType.Get()
	}
	if !IsNil(o.ContentTypeOptions) {
		toSerialize["ContentTypeOptions"] = o.ContentTypeOptions
	}
	return toSerialize, nil
}

type NullableJellyfinMetadataEditorInfo struct {
	value *JellyfinMetadataEditorInfo
	isSet bool
}

func (v NullableJellyfinMetadataEditorInfo) Get() *JellyfinMetadataEditorInfo {
	return v.value
}

func (v *NullableJellyfinMetadataEditorInfo) Set(val *JellyfinMetadataEditorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinMetadataEditorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinMetadataEditorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinMetadataEditorInfo(val *JellyfinMetadataEditorInfo) *NullableJellyfinMetadataEditorInfo {
	return &NullableJellyfinMetadataEditorInfo{value: val, isSet: true}
}

func (v NullableJellyfinMetadataEditorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinMetadataEditorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


