/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinChannelType Enum ChannelType.
type JellyfinChannelType string

// List of ChannelType
const (
	TV JellyfinChannelType = "TV"
	RADIO JellyfinChannelType = "Radio"
)

// All allowed values of JellyfinChannelType enum
var AllowedJellyfinChannelTypeEnumValues = []JellyfinChannelType{
	"TV",
	"Radio",
}

func (v *JellyfinChannelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinChannelType(value)
	for _, existing := range AllowedJellyfinChannelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinChannelType", value)
}

// NewJellyfinChannelTypeFromValue returns a pointer to a valid JellyfinChannelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinChannelTypeFromValue(v string) (*JellyfinChannelType, error) {
	ev := JellyfinChannelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinChannelType: valid values are %v", v, AllowedJellyfinChannelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinChannelType) IsValid() bool {
	for _, existing := range AllowedJellyfinChannelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChannelType value
func (v JellyfinChannelType) Ptr() *JellyfinChannelType {
	return &v
}

type NullableJellyfinChannelType struct {
	value *JellyfinChannelType
	isSet bool
}

func (v NullableJellyfinChannelType) Get() *JellyfinChannelType {
	return v.value
}

func (v *NullableJellyfinChannelType) Set(val *JellyfinChannelType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinChannelType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinChannelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinChannelType(val *JellyfinChannelType) *NullableJellyfinChannelType {
	return &NullableJellyfinChannelType{value: val, isSet: true}
}

func (v NullableJellyfinChannelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinChannelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

