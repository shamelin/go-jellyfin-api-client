/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"time"
)

// checks if the JellyfinFontFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinFontFile{}

// JellyfinFontFile Class FontFile.
type JellyfinFontFile struct {
	// Gets or sets the name.
	Name NullableString `json:"Name,omitempty"`
	// Gets or sets the size.
	Size *int64 `json:"Size,omitempty"`
	// Gets or sets the date created.
	DateCreated *time.Time `json:"DateCreated,omitempty"`
	// Gets or sets the date modified.
	DateModified *time.Time `json:"DateModified,omitempty"`
}

// NewJellyfinFontFile instantiates a new JellyfinFontFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinFontFile() *JellyfinFontFile {
	this := JellyfinFontFile{}
	return &this
}

// NewJellyfinFontFileWithDefaults instantiates a new JellyfinFontFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinFontFileWithDefaults() *JellyfinFontFile {
	this := JellyfinFontFile{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinFontFile) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinFontFile) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *JellyfinFontFile) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *JellyfinFontFile) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *JellyfinFontFile) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *JellyfinFontFile) UnsetName() {
	o.Name.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *JellyfinFontFile) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinFontFile) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *JellyfinFontFile) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *JellyfinFontFile) SetSize(v int64) {
	o.Size = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *JellyfinFontFile) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinFontFile) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *JellyfinFontFile) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *JellyfinFontFile) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetDateModified returns the DateModified field value if set, zero value otherwise.
func (o *JellyfinFontFile) GetDateModified() time.Time {
	if o == nil || IsNil(o.DateModified) {
		var ret time.Time
		return ret
	}
	return *o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinFontFile) GetDateModifiedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateModified) {
		return nil, false
	}
	return o.DateModified, true
}

// HasDateModified returns a boolean if a field has been set.
func (o *JellyfinFontFile) HasDateModified() bool {
	if o != nil && !IsNil(o.DateModified) {
		return true
	}

	return false
}

// SetDateModified gets a reference to the given time.Time and assigns it to the DateModified field.
func (o *JellyfinFontFile) SetDateModified(v time.Time) {
	o.DateModified = &v
}

func (o JellyfinFontFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinFontFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if !IsNil(o.Size) {
		toSerialize["Size"] = o.Size
	}
	if !IsNil(o.DateCreated) {
		toSerialize["DateCreated"] = o.DateCreated
	}
	if !IsNil(o.DateModified) {
		toSerialize["DateModified"] = o.DateModified
	}
	return toSerialize, nil
}

type NullableJellyfinFontFile struct {
	value *JellyfinFontFile
	isSet bool
}

func (v NullableJellyfinFontFile) Get() *JellyfinFontFile {
	return v.value
}

func (v *NullableJellyfinFontFile) Set(val *JellyfinFontFile) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinFontFile) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinFontFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinFontFile(val *JellyfinFontFile) *NullableJellyfinFontFile {
	return &NullableJellyfinFontFile{value: val, isSet: true}
}

func (v NullableJellyfinFontFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinFontFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


