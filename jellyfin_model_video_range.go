/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinVideoRange An enum representing video ranges.
type JellyfinVideoRange string

// List of VideoRange
const (
	UNKNOWN JellyfinVideoRange = "Unknown"
	SDR JellyfinVideoRange = "SDR"
	HDR JellyfinVideoRange = "HDR"
)

// All allowed values of JellyfinVideoRange enum
var AllowedJellyfinVideoRangeEnumValues = []JellyfinVideoRange{
	"Unknown",
	"SDR",
	"HDR",
}

func (v *JellyfinVideoRange) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinVideoRange(value)
	for _, existing := range AllowedJellyfinVideoRangeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinVideoRange", value)
}

// NewJellyfinVideoRangeFromValue returns a pointer to a valid JellyfinVideoRange
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinVideoRangeFromValue(v string) (*JellyfinVideoRange, error) {
	ev := JellyfinVideoRange(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinVideoRange: valid values are %v", v, AllowedJellyfinVideoRangeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinVideoRange) IsValid() bool {
	for _, existing := range AllowedJellyfinVideoRangeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VideoRange value
func (v JellyfinVideoRange) Ptr() *JellyfinVideoRange {
	return &v
}

type NullableJellyfinVideoRange struct {
	value *JellyfinVideoRange
	isSet bool
}

func (v NullableJellyfinVideoRange) Get() *JellyfinVideoRange {
	return v.value
}

func (v *NullableJellyfinVideoRange) Set(val *JellyfinVideoRange) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinVideoRange) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinVideoRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinVideoRange(val *JellyfinVideoRange) *NullableJellyfinVideoRange {
	return &NullableJellyfinVideoRange{value: val, isSet: true}
}

func (v NullableJellyfinVideoRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinVideoRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

