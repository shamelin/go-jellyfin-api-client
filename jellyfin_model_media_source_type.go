/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinMediaSourceType the model 'JellyfinMediaSourceType'
type JellyfinMediaSourceType string

// List of MediaSourceType
const (
	JELLYFINMEDIASOURCETYPE_DEFAULT JellyfinMediaSourceType = "Default"
	JELLYFINMEDIASOURCETYPE_GROUPING JellyfinMediaSourceType = "Grouping"
	JELLYFINMEDIASOURCETYPE_PLACEHOLDER JellyfinMediaSourceType = "Placeholder"
)

// All allowed values of JellyfinMediaSourceType enum
var AllowedJellyfinMediaSourceTypeEnumValues = []JellyfinMediaSourceType{
	"Default",
	"Grouping",
	"Placeholder",
}

func (v *JellyfinMediaSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinMediaSourceType(value)
	for _, existing := range AllowedJellyfinMediaSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinMediaSourceType", value)
}

// NewJellyfinMediaSourceTypeFromValue returns a pointer to a valid JellyfinMediaSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinMediaSourceTypeFromValue(v string) (*JellyfinMediaSourceType, error) {
	ev := JellyfinMediaSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinMediaSourceType: valid values are %v", v, AllowedJellyfinMediaSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinMediaSourceType) IsValid() bool {
	for _, existing := range AllowedJellyfinMediaSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MediaSourceType value
func (v JellyfinMediaSourceType) Ptr() *JellyfinMediaSourceType {
	return &v
}

type NullableJellyfinMediaSourceType struct {
	value *JellyfinMediaSourceType
	isSet bool
}

func (v NullableJellyfinMediaSourceType) Get() *JellyfinMediaSourceType {
	return v.value
}

func (v *NullableJellyfinMediaSourceType) Set(val *JellyfinMediaSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinMediaSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinMediaSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinMediaSourceType(val *JellyfinMediaSourceType) *NullableJellyfinMediaSourceType {
	return &NullableJellyfinMediaSourceType{value: val, isSet: true}
}

func (v NullableJellyfinMediaSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinMediaSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

