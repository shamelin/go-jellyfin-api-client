/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinImageOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinImageOption{}

// JellyfinImageOption struct for JellyfinImageOption
type JellyfinImageOption struct {
	// Gets or sets the type.
	Type *JellyfinImageType `json:"Type,omitempty"`
	// Gets or sets the limit.
	Limit *int32 `json:"Limit,omitempty"`
	// Gets or sets the minimum width.
	MinWidth *int32 `json:"MinWidth,omitempty"`
}

// NewJellyfinImageOption instantiates a new JellyfinImageOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinImageOption() *JellyfinImageOption {
	this := JellyfinImageOption{}
	return &this
}

// NewJellyfinImageOptionWithDefaults instantiates a new JellyfinImageOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinImageOptionWithDefaults() *JellyfinImageOption {
	this := JellyfinImageOption{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JellyfinImageOption) GetType() JellyfinImageType {
	if o == nil || IsNil(o.Type) {
		var ret JellyfinImageType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinImageOption) GetTypeOk() (*JellyfinImageType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JellyfinImageOption) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given JellyfinImageType and assigns it to the Type field.
func (o *JellyfinImageOption) SetType(v JellyfinImageType) {
	o.Type = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *JellyfinImageOption) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinImageOption) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *JellyfinImageOption) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *JellyfinImageOption) SetLimit(v int32) {
	o.Limit = &v
}

// GetMinWidth returns the MinWidth field value if set, zero value otherwise.
func (o *JellyfinImageOption) GetMinWidth() int32 {
	if o == nil || IsNil(o.MinWidth) {
		var ret int32
		return ret
	}
	return *o.MinWidth
}

// GetMinWidthOk returns a tuple with the MinWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinImageOption) GetMinWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinWidth) {
		return nil, false
	}
	return o.MinWidth, true
}

// HasMinWidth returns a boolean if a field has been set.
func (o *JellyfinImageOption) HasMinWidth() bool {
	if o != nil && !IsNil(o.MinWidth) {
		return true
	}

	return false
}

// SetMinWidth gets a reference to the given int32 and assigns it to the MinWidth field.
func (o *JellyfinImageOption) SetMinWidth(v int32) {
	o.MinWidth = &v
}

func (o JellyfinImageOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinImageOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Limit) {
		toSerialize["Limit"] = o.Limit
	}
	if !IsNil(o.MinWidth) {
		toSerialize["MinWidth"] = o.MinWidth
	}
	return toSerialize, nil
}

type NullableJellyfinImageOption struct {
	value *JellyfinImageOption
	isSet bool
}

func (v NullableJellyfinImageOption) Get() *JellyfinImageOption {
	return v.value
}

func (v *NullableJellyfinImageOption) Set(val *JellyfinImageOption) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinImageOption) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinImageOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinImageOption(val *JellyfinImageOption) *NullableJellyfinImageOption {
	return &NullableJellyfinImageOption{value: val, isSet: true}
}

func (v NullableJellyfinImageOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinImageOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


