/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinChannelMediaContentType the model 'JellyfinChannelMediaContentType'
type JellyfinChannelMediaContentType string

// List of ChannelMediaContentType
const (
	CLIP JellyfinChannelMediaContentType = "Clip"
	PODCAST JellyfinChannelMediaContentType = "Podcast"
	TRAILER JellyfinChannelMediaContentType = "Trailer"
	MOVIE JellyfinChannelMediaContentType = "Movie"
	EPISODE JellyfinChannelMediaContentType = "Episode"
	SONG JellyfinChannelMediaContentType = "Song"
	MOVIE_EXTRA JellyfinChannelMediaContentType = "MovieExtra"
	TV_EXTRA JellyfinChannelMediaContentType = "TvExtra"
)

// All allowed values of JellyfinChannelMediaContentType enum
var AllowedJellyfinChannelMediaContentTypeEnumValues = []JellyfinChannelMediaContentType{
	"Clip",
	"Podcast",
	"Trailer",
	"Movie",
	"Episode",
	"Song",
	"MovieExtra",
	"TvExtra",
}

func (v *JellyfinChannelMediaContentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinChannelMediaContentType(value)
	for _, existing := range AllowedJellyfinChannelMediaContentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinChannelMediaContentType", value)
}

// NewJellyfinChannelMediaContentTypeFromValue returns a pointer to a valid JellyfinChannelMediaContentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinChannelMediaContentTypeFromValue(v string) (*JellyfinChannelMediaContentType, error) {
	ev := JellyfinChannelMediaContentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinChannelMediaContentType: valid values are %v", v, AllowedJellyfinChannelMediaContentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinChannelMediaContentType) IsValid() bool {
	for _, existing := range AllowedJellyfinChannelMediaContentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChannelMediaContentType value
func (v JellyfinChannelMediaContentType) Ptr() *JellyfinChannelMediaContentType {
	return &v
}

type NullableJellyfinChannelMediaContentType struct {
	value *JellyfinChannelMediaContentType
	isSet bool
}

func (v NullableJellyfinChannelMediaContentType) Get() *JellyfinChannelMediaContentType {
	return v.value
}

func (v *NullableJellyfinChannelMediaContentType) Set(val *JellyfinChannelMediaContentType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinChannelMediaContentType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinChannelMediaContentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinChannelMediaContentType(val *JellyfinChannelMediaContentType) *NullableJellyfinChannelMediaContentType {
	return &NullableJellyfinChannelMediaContentType{value: val, isSet: true}
}

func (v NullableJellyfinChannelMediaContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinChannelMediaContentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

