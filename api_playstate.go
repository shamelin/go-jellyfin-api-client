/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// PlaystateAPIService PlaystateAPI service
type PlaystateAPIService service

type PlaystateAPIMarkPlayedItemRequest struct {
	ctx context.Context
	ApiService *PlaystateAPIService
	itemId string
	userId *string
	datePlayed *time.Time
}

// User id.
func (r PlaystateAPIMarkPlayedItemRequest) UserId(userId string) PlaystateAPIMarkPlayedItemRequest {
	r.userId = &userId
	return r
}

// Optional. The date the item was played.
func (r PlaystateAPIMarkPlayedItemRequest) DatePlayed(datePlayed time.Time) PlaystateAPIMarkPlayedItemRequest {
	r.datePlayed = &datePlayed
	return r
}

func (r PlaystateAPIMarkPlayedItemRequest) Execute() (*JellyfinUserItemDataDto, *http.Response, error) {
	return r.ApiService.MarkPlayedItemExecute(r)
}

/*
MarkPlayedItem Marks an item as played for user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId Item id.
 @return PlaystateAPIMarkPlayedItemRequest
*/
func (a *PlaystateAPIService) MarkPlayedItem(ctx context.Context, itemId string) PlaystateAPIMarkPlayedItemRequest {
	return PlaystateAPIMarkPlayedItemRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return JellyfinUserItemDataDto
func (a *PlaystateAPIService) MarkPlayedItemExecute(r PlaystateAPIMarkPlayedItemRequest) (*JellyfinUserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinUserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.MarkPlayedItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/UserPlayedItems/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.datePlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "datePlayed", r.datePlayed, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlaystateAPIMarkUnplayedItemRequest struct {
	ctx context.Context
	ApiService *PlaystateAPIService
	itemId string
	userId *string
}

// User id.
func (r PlaystateAPIMarkUnplayedItemRequest) UserId(userId string) PlaystateAPIMarkUnplayedItemRequest {
	r.userId = &userId
	return r
}

func (r PlaystateAPIMarkUnplayedItemRequest) Execute() (*JellyfinUserItemDataDto, *http.Response, error) {
	return r.ApiService.MarkUnplayedItemExecute(r)
}

/*
MarkUnplayedItem Marks an item as unplayed for user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId Item id.
 @return PlaystateAPIMarkUnplayedItemRequest
*/
func (a *PlaystateAPIService) MarkUnplayedItem(ctx context.Context, itemId string) PlaystateAPIMarkUnplayedItemRequest {
	return PlaystateAPIMarkUnplayedItemRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return JellyfinUserItemDataDto
func (a *PlaystateAPIService) MarkUnplayedItemExecute(r PlaystateAPIMarkUnplayedItemRequest) (*JellyfinUserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinUserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.MarkUnplayedItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/UserPlayedItems/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlaystateAPIOnPlaybackProgressRequest struct {
	ctx context.Context
	ApiService *PlaystateAPIService
	itemId string
	mediaSourceId *string
	positionTicks *int64
	audioStreamIndex *int32
	subtitleStreamIndex *int32
	volumeLevel *int32
	playMethod *JellyfinPlayMethod
	liveStreamId *string
	playSessionId *string
	repeatMode *JellyfinRepeatMode
	isPaused *bool
	isMuted *bool
}

// The id of the MediaSource.
func (r PlaystateAPIOnPlaybackProgressRequest) MediaSourceId(mediaSourceId string) PlaystateAPIOnPlaybackProgressRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms.
func (r PlaystateAPIOnPlaybackProgressRequest) PositionTicks(positionTicks int64) PlaystateAPIOnPlaybackProgressRequest {
	r.positionTicks = &positionTicks
	return r
}

// The audio stream index.
func (r PlaystateAPIOnPlaybackProgressRequest) AudioStreamIndex(audioStreamIndex int32) PlaystateAPIOnPlaybackProgressRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// The subtitle stream index.
func (r PlaystateAPIOnPlaybackProgressRequest) SubtitleStreamIndex(subtitleStreamIndex int32) PlaystateAPIOnPlaybackProgressRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Scale of 0-100.
func (r PlaystateAPIOnPlaybackProgressRequest) VolumeLevel(volumeLevel int32) PlaystateAPIOnPlaybackProgressRequest {
	r.volumeLevel = &volumeLevel
	return r
}

// The play method.
func (r PlaystateAPIOnPlaybackProgressRequest) PlayMethod(playMethod JellyfinPlayMethod) PlaystateAPIOnPlaybackProgressRequest {
	r.playMethod = &playMethod
	return r
}

// The live stream id.
func (r PlaystateAPIOnPlaybackProgressRequest) LiveStreamId(liveStreamId string) PlaystateAPIOnPlaybackProgressRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// The play session id.
func (r PlaystateAPIOnPlaybackProgressRequest) PlaySessionId(playSessionId string) PlaystateAPIOnPlaybackProgressRequest {
	r.playSessionId = &playSessionId
	return r
}

// The repeat mode.
func (r PlaystateAPIOnPlaybackProgressRequest) RepeatMode(repeatMode JellyfinRepeatMode) PlaystateAPIOnPlaybackProgressRequest {
	r.repeatMode = &repeatMode
	return r
}

// Indicates if the player is paused.
func (r PlaystateAPIOnPlaybackProgressRequest) IsPaused(isPaused bool) PlaystateAPIOnPlaybackProgressRequest {
	r.isPaused = &isPaused
	return r
}

// Indicates if the player is muted.
func (r PlaystateAPIOnPlaybackProgressRequest) IsMuted(isMuted bool) PlaystateAPIOnPlaybackProgressRequest {
	r.isMuted = &isMuted
	return r
}

func (r PlaystateAPIOnPlaybackProgressRequest) Execute() (*http.Response, error) {
	return r.ApiService.OnPlaybackProgressExecute(r)
}

/*
OnPlaybackProgress Reports a session's playback progress.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId Item id.
 @return PlaystateAPIOnPlaybackProgressRequest
*/
func (a *PlaystateAPIService) OnPlaybackProgress(ctx context.Context, itemId string) PlaystateAPIOnPlaybackProgressRequest {
	return PlaystateAPIOnPlaybackProgressRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) OnPlaybackProgressExecute(r PlaystateAPIOnPlaybackProgressRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.OnPlaybackProgress")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/PlayingItems/{itemId}/Progress"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.positionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "positionTicks", r.positionTicks, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.volumeLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volumeLevel", r.volumeLevel, "form", "")
	}
	if r.playMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playMethod", r.playMethod, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.repeatMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repeatMode", r.repeatMode, "form", "")
	}
	if r.isPaused != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isPaused", r.isPaused, "form", "")
	} else {
		var defaultValue bool = false
		r.isPaused = &defaultValue
	}
	if r.isMuted != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isMuted", r.isMuted, "form", "")
	} else {
		var defaultValue bool = false
		r.isMuted = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PlaystateAPIOnPlaybackStartRequest struct {
	ctx context.Context
	ApiService *PlaystateAPIService
	itemId string
	mediaSourceId *string
	audioStreamIndex *int32
	subtitleStreamIndex *int32
	playMethod *JellyfinPlayMethod
	liveStreamId *string
	playSessionId *string
	canSeek *bool
}

// The id of the MediaSource.
func (r PlaystateAPIOnPlaybackStartRequest) MediaSourceId(mediaSourceId string) PlaystateAPIOnPlaybackStartRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The audio stream index.
func (r PlaystateAPIOnPlaybackStartRequest) AudioStreamIndex(audioStreamIndex int32) PlaystateAPIOnPlaybackStartRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// The subtitle stream index.
func (r PlaystateAPIOnPlaybackStartRequest) SubtitleStreamIndex(subtitleStreamIndex int32) PlaystateAPIOnPlaybackStartRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// The play method.
func (r PlaystateAPIOnPlaybackStartRequest) PlayMethod(playMethod JellyfinPlayMethod) PlaystateAPIOnPlaybackStartRequest {
	r.playMethod = &playMethod
	return r
}

// The live stream id.
func (r PlaystateAPIOnPlaybackStartRequest) LiveStreamId(liveStreamId string) PlaystateAPIOnPlaybackStartRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// The play session id.
func (r PlaystateAPIOnPlaybackStartRequest) PlaySessionId(playSessionId string) PlaystateAPIOnPlaybackStartRequest {
	r.playSessionId = &playSessionId
	return r
}

// Indicates if the client can seek.
func (r PlaystateAPIOnPlaybackStartRequest) CanSeek(canSeek bool) PlaystateAPIOnPlaybackStartRequest {
	r.canSeek = &canSeek
	return r
}

func (r PlaystateAPIOnPlaybackStartRequest) Execute() (*http.Response, error) {
	return r.ApiService.OnPlaybackStartExecute(r)
}

/*
OnPlaybackStart Reports that a session has begun playing an item.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId Item id.
 @return PlaystateAPIOnPlaybackStartRequest
*/
func (a *PlaystateAPIService) OnPlaybackStart(ctx context.Context, itemId string) PlaystateAPIOnPlaybackStartRequest {
	return PlaystateAPIOnPlaybackStartRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) OnPlaybackStartExecute(r PlaystateAPIOnPlaybackStartRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.OnPlaybackStart")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/PlayingItems/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "audioStreamIndex", r.audioStreamIndex, "form", "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtitleStreamIndex", r.subtitleStreamIndex, "form", "")
	}
	if r.playMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playMethod", r.playMethod, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	if r.canSeek != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "canSeek", r.canSeek, "form", "")
	} else {
		var defaultValue bool = false
		r.canSeek = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PlaystateAPIOnPlaybackStoppedRequest struct {
	ctx context.Context
	ApiService *PlaystateAPIService
	itemId string
	mediaSourceId *string
	nextMediaType *string
	positionTicks *int64
	liveStreamId *string
	playSessionId *string
}

// The id of the MediaSource.
func (r PlaystateAPIOnPlaybackStoppedRequest) MediaSourceId(mediaSourceId string) PlaystateAPIOnPlaybackStoppedRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// The next media type that will play.
func (r PlaystateAPIOnPlaybackStoppedRequest) NextMediaType(nextMediaType string) PlaystateAPIOnPlaybackStoppedRequest {
	r.nextMediaType = &nextMediaType
	return r
}

// Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms.
func (r PlaystateAPIOnPlaybackStoppedRequest) PositionTicks(positionTicks int64) PlaystateAPIOnPlaybackStoppedRequest {
	r.positionTicks = &positionTicks
	return r
}

// The live stream id.
func (r PlaystateAPIOnPlaybackStoppedRequest) LiveStreamId(liveStreamId string) PlaystateAPIOnPlaybackStoppedRequest {
	r.liveStreamId = &liveStreamId
	return r
}

// The play session id.
func (r PlaystateAPIOnPlaybackStoppedRequest) PlaySessionId(playSessionId string) PlaystateAPIOnPlaybackStoppedRequest {
	r.playSessionId = &playSessionId
	return r
}

func (r PlaystateAPIOnPlaybackStoppedRequest) Execute() (*http.Response, error) {
	return r.ApiService.OnPlaybackStoppedExecute(r)
}

/*
OnPlaybackStopped Reports that a session has stopped playing an item.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId Item id.
 @return PlaystateAPIOnPlaybackStoppedRequest
*/
func (a *PlaystateAPIService) OnPlaybackStopped(ctx context.Context, itemId string) PlaystateAPIOnPlaybackStoppedRequest {
	return PlaystateAPIOnPlaybackStoppedRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) OnPlaybackStoppedExecute(r PlaystateAPIOnPlaybackStoppedRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.OnPlaybackStopped")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/PlayingItems/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mediaSourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mediaSourceId", r.mediaSourceId, "form", "")
	}
	if r.nextMediaType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextMediaType", r.nextMediaType, "form", "")
	}
	if r.positionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "positionTicks", r.positionTicks, "form", "")
	}
	if r.liveStreamId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "liveStreamId", r.liveStreamId, "form", "")
	}
	if r.playSessionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PlaystateAPIPingPlaybackSessionRequest struct {
	ctx context.Context
	ApiService *PlaystateAPIService
	playSessionId *string
}

// Playback session id.
func (r PlaystateAPIPingPlaybackSessionRequest) PlaySessionId(playSessionId string) PlaystateAPIPingPlaybackSessionRequest {
	r.playSessionId = &playSessionId
	return r
}

func (r PlaystateAPIPingPlaybackSessionRequest) Execute() (*http.Response, error) {
	return r.ApiService.PingPlaybackSessionExecute(r)
}

/*
PingPlaybackSession Pings a playback session.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PlaystateAPIPingPlaybackSessionRequest
*/
func (a *PlaystateAPIService) PingPlaybackSession(ctx context.Context) PlaystateAPIPingPlaybackSessionRequest {
	return PlaystateAPIPingPlaybackSessionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) PingPlaybackSessionExecute(r PlaystateAPIPingPlaybackSessionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.PingPlaybackSession")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Sessions/Playing/Ping"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.playSessionId == nil {
		return nil, reportError("playSessionId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "playSessionId", r.playSessionId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PlaystateAPIReportPlaybackProgressRequest struct {
	ctx context.Context
	ApiService *PlaystateAPIService
	jellyfinPlaybackProgressInfo *JellyfinPlaybackProgressInfo
}

// The playback progress info.
func (r PlaystateAPIReportPlaybackProgressRequest) JellyfinPlaybackProgressInfo(jellyfinPlaybackProgressInfo JellyfinPlaybackProgressInfo) PlaystateAPIReportPlaybackProgressRequest {
	r.jellyfinPlaybackProgressInfo = &jellyfinPlaybackProgressInfo
	return r
}

func (r PlaystateAPIReportPlaybackProgressRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReportPlaybackProgressExecute(r)
}

/*
ReportPlaybackProgress Reports playback progress within a session.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PlaystateAPIReportPlaybackProgressRequest
*/
func (a *PlaystateAPIService) ReportPlaybackProgress(ctx context.Context) PlaystateAPIReportPlaybackProgressRequest {
	return PlaystateAPIReportPlaybackProgressRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) ReportPlaybackProgressExecute(r PlaystateAPIReportPlaybackProgressRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.ReportPlaybackProgress")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Sessions/Playing/Progress"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinPlaybackProgressInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PlaystateAPIReportPlaybackStartRequest struct {
	ctx context.Context
	ApiService *PlaystateAPIService
	jellyfinPlaybackStartInfo *JellyfinPlaybackStartInfo
}

// The playback start info.
func (r PlaystateAPIReportPlaybackStartRequest) JellyfinPlaybackStartInfo(jellyfinPlaybackStartInfo JellyfinPlaybackStartInfo) PlaystateAPIReportPlaybackStartRequest {
	r.jellyfinPlaybackStartInfo = &jellyfinPlaybackStartInfo
	return r
}

func (r PlaystateAPIReportPlaybackStartRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReportPlaybackStartExecute(r)
}

/*
ReportPlaybackStart Reports playback has started within a session.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PlaystateAPIReportPlaybackStartRequest
*/
func (a *PlaystateAPIService) ReportPlaybackStart(ctx context.Context) PlaystateAPIReportPlaybackStartRequest {
	return PlaystateAPIReportPlaybackStartRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) ReportPlaybackStartExecute(r PlaystateAPIReportPlaybackStartRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.ReportPlaybackStart")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Sessions/Playing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinPlaybackStartInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PlaystateAPIReportPlaybackStoppedRequest struct {
	ctx context.Context
	ApiService *PlaystateAPIService
	jellyfinPlaybackStopInfo *JellyfinPlaybackStopInfo
}

// The playback stop info.
func (r PlaystateAPIReportPlaybackStoppedRequest) JellyfinPlaybackStopInfo(jellyfinPlaybackStopInfo JellyfinPlaybackStopInfo) PlaystateAPIReportPlaybackStoppedRequest {
	r.jellyfinPlaybackStopInfo = &jellyfinPlaybackStopInfo
	return r
}

func (r PlaystateAPIReportPlaybackStoppedRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReportPlaybackStoppedExecute(r)
}

/*
ReportPlaybackStopped Reports playback has stopped within a session.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PlaystateAPIReportPlaybackStoppedRequest
*/
func (a *PlaystateAPIService) ReportPlaybackStopped(ctx context.Context) PlaystateAPIReportPlaybackStoppedRequest {
	return PlaystateAPIReportPlaybackStoppedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *PlaystateAPIService) ReportPlaybackStoppedExecute(r PlaystateAPIReportPlaybackStoppedRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaystateAPIService.ReportPlaybackStopped")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Sessions/Playing/Stopped"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinPlaybackStopInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
