/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinSessionUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinSessionUserInfo{}

// JellyfinSessionUserInfo Class SessionUserInfo.
type JellyfinSessionUserInfo struct {
	// Gets or sets the user identifier.
	UserId *string `json:"UserId,omitempty"`
	// Gets or sets the name of the user.
	UserName NullableString `json:"UserName,omitempty"`
}

// NewJellyfinSessionUserInfo instantiates a new JellyfinSessionUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinSessionUserInfo() *JellyfinSessionUserInfo {
	this := JellyfinSessionUserInfo{}
	return &this
}

// NewJellyfinSessionUserInfoWithDefaults instantiates a new JellyfinSessionUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinSessionUserInfoWithDefaults() *JellyfinSessionUserInfo {
	this := JellyfinSessionUserInfo{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *JellyfinSessionUserInfo) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSessionUserInfo) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *JellyfinSessionUserInfo) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *JellyfinSessionUserInfo) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionUserInfo) GetUserName() string {
	if o == nil || IsNil(o.UserName.Get()) {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionUserInfo) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *JellyfinSessionUserInfo) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *JellyfinSessionUserInfo) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *JellyfinSessionUserInfo) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *JellyfinSessionUserInfo) UnsetUserName() {
	o.UserName.Unset()
}

func (o JellyfinSessionUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinSessionUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["UserId"] = o.UserId
	}
	if o.UserName.IsSet() {
		toSerialize["UserName"] = o.UserName.Get()
	}
	return toSerialize, nil
}

type NullableJellyfinSessionUserInfo struct {
	value *JellyfinSessionUserInfo
	isSet bool
}

func (v NullableJellyfinSessionUserInfo) Get() *JellyfinSessionUserInfo {
	return v.value
}

func (v *NullableJellyfinSessionUserInfo) Set(val *JellyfinSessionUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinSessionUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinSessionUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinSessionUserInfo(val *JellyfinSessionUserInfo) *NullableJellyfinSessionUserInfo {
	return &NullableJellyfinSessionUserInfo{value: val, isSet: true}
}

func (v NullableJellyfinSessionUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinSessionUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


