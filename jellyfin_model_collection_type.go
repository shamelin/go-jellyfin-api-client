/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinCollectionType Collection type.
type JellyfinCollectionType string

// List of CollectionType
const (
	UNKNOWN JellyfinCollectionType = "unknown"
	MOVIES JellyfinCollectionType = "movies"
	TVSHOWS JellyfinCollectionType = "tvshows"
	MUSIC JellyfinCollectionType = "music"
	MUSICVIDEOS JellyfinCollectionType = "musicvideos"
	TRAILERS JellyfinCollectionType = "trailers"
	HOMEVIDEOS JellyfinCollectionType = "homevideos"
	BOXSETS JellyfinCollectionType = "boxsets"
	BOOKS JellyfinCollectionType = "books"
	PHOTOS JellyfinCollectionType = "photos"
	LIVETV JellyfinCollectionType = "livetv"
	PLAYLISTS JellyfinCollectionType = "playlists"
	FOLDERS JellyfinCollectionType = "folders"
)

// All allowed values of JellyfinCollectionType enum
var AllowedJellyfinCollectionTypeEnumValues = []JellyfinCollectionType{
	"unknown",
	"movies",
	"tvshows",
	"music",
	"musicvideos",
	"trailers",
	"homevideos",
	"boxsets",
	"books",
	"photos",
	"livetv",
	"playlists",
	"folders",
}

func (v *JellyfinCollectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinCollectionType(value)
	for _, existing := range AllowedJellyfinCollectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinCollectionType", value)
}

// NewJellyfinCollectionTypeFromValue returns a pointer to a valid JellyfinCollectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinCollectionTypeFromValue(v string) (*JellyfinCollectionType, error) {
	ev := JellyfinCollectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinCollectionType: valid values are %v", v, AllowedJellyfinCollectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinCollectionType) IsValid() bool {
	for _, existing := range AllowedJellyfinCollectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CollectionType value
func (v JellyfinCollectionType) Ptr() *JellyfinCollectionType {
	return &v
}

type NullableJellyfinCollectionType struct {
	value *JellyfinCollectionType
	isSet bool
}

func (v NullableJellyfinCollectionType) Get() *JellyfinCollectionType {
	return v.value
}

func (v *NullableJellyfinCollectionType) Set(val *JellyfinCollectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinCollectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinCollectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinCollectionType(val *JellyfinCollectionType) *NullableJellyfinCollectionType {
	return &NullableJellyfinCollectionType{value: val, isSet: true}
}

func (v NullableJellyfinCollectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinCollectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

