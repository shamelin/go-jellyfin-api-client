/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinExtraType the model 'JellyfinExtraType'
type JellyfinExtraType string

// List of ExtraType
const (
	JELLYFINEXTRATYPE_UNKNOWN JellyfinExtraType = "Unknown"
	JELLYFINEXTRATYPE_CLIP JellyfinExtraType = "Clip"
	JELLYFINEXTRATYPE_TRAILER JellyfinExtraType = "Trailer"
	JELLYFINEXTRATYPE_BEHIND_THE_SCENES JellyfinExtraType = "BehindTheScenes"
	JELLYFINEXTRATYPE_DELETED_SCENE JellyfinExtraType = "DeletedScene"
	JELLYFINEXTRATYPE_INTERVIEW JellyfinExtraType = "Interview"
	JELLYFINEXTRATYPE_SCENE JellyfinExtraType = "Scene"
	JELLYFINEXTRATYPE_SAMPLE JellyfinExtraType = "Sample"
	JELLYFINEXTRATYPE_THEME_SONG JellyfinExtraType = "ThemeSong"
	JELLYFINEXTRATYPE_THEME_VIDEO JellyfinExtraType = "ThemeVideo"
	JELLYFINEXTRATYPE_FEATURETTE JellyfinExtraType = "Featurette"
	JELLYFINEXTRATYPE_SHORT JellyfinExtraType = "Short"
)

// All allowed values of JellyfinExtraType enum
var AllowedJellyfinExtraTypeEnumValues = []JellyfinExtraType{
	"Unknown",
	"Clip",
	"Trailer",
	"BehindTheScenes",
	"DeletedScene",
	"Interview",
	"Scene",
	"Sample",
	"ThemeSong",
	"ThemeVideo",
	"Featurette",
	"Short",
}

func (v *JellyfinExtraType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinExtraType(value)
	for _, existing := range AllowedJellyfinExtraTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinExtraType", value)
}

// NewJellyfinExtraTypeFromValue returns a pointer to a valid JellyfinExtraType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinExtraTypeFromValue(v string) (*JellyfinExtraType, error) {
	ev := JellyfinExtraType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinExtraType: valid values are %v", v, AllowedJellyfinExtraTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinExtraType) IsValid() bool {
	for _, existing := range AllowedJellyfinExtraTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExtraType value
func (v JellyfinExtraType) Ptr() *JellyfinExtraType {
	return &v
}

type NullableJellyfinExtraType struct {
	value *JellyfinExtraType
	isSet bool
}

func (v NullableJellyfinExtraType) Get() *JellyfinExtraType {
	return v.value
}

func (v *NullableJellyfinExtraType) Set(val *JellyfinExtraType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinExtraType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinExtraType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinExtraType(val *JellyfinExtraType) *NullableJellyfinExtraType {
	return &NullableJellyfinExtraType{value: val, isSet: true}
}

func (v NullableJellyfinExtraType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinExtraType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

