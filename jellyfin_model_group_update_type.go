/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinGroupUpdateType Enum GroupUpdateType.
type JellyfinGroupUpdateType string

// List of GroupUpdateType
const (
	USER_JOINED JellyfinGroupUpdateType = "UserJoined"
	USER_LEFT JellyfinGroupUpdateType = "UserLeft"
	GROUP_JOINED JellyfinGroupUpdateType = "GroupJoined"
	GROUP_LEFT JellyfinGroupUpdateType = "GroupLeft"
	STATE_UPDATE JellyfinGroupUpdateType = "StateUpdate"
	PLAY_QUEUE JellyfinGroupUpdateType = "PlayQueue"
	NOT_IN_GROUP JellyfinGroupUpdateType = "NotInGroup"
	GROUP_DOES_NOT_EXIST JellyfinGroupUpdateType = "GroupDoesNotExist"
	CREATE_GROUP_DENIED JellyfinGroupUpdateType = "CreateGroupDenied"
	JOIN_GROUP_DENIED JellyfinGroupUpdateType = "JoinGroupDenied"
	LIBRARY_ACCESS_DENIED JellyfinGroupUpdateType = "LibraryAccessDenied"
)

// All allowed values of JellyfinGroupUpdateType enum
var AllowedJellyfinGroupUpdateTypeEnumValues = []JellyfinGroupUpdateType{
	"UserJoined",
	"UserLeft",
	"GroupJoined",
	"GroupLeft",
	"StateUpdate",
	"PlayQueue",
	"NotInGroup",
	"GroupDoesNotExist",
	"CreateGroupDenied",
	"JoinGroupDenied",
	"LibraryAccessDenied",
}

func (v *JellyfinGroupUpdateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinGroupUpdateType(value)
	for _, existing := range AllowedJellyfinGroupUpdateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinGroupUpdateType", value)
}

// NewJellyfinGroupUpdateTypeFromValue returns a pointer to a valid JellyfinGroupUpdateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinGroupUpdateTypeFromValue(v string) (*JellyfinGroupUpdateType, error) {
	ev := JellyfinGroupUpdateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinGroupUpdateType: valid values are %v", v, AllowedJellyfinGroupUpdateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinGroupUpdateType) IsValid() bool {
	for _, existing := range AllowedJellyfinGroupUpdateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupUpdateType value
func (v JellyfinGroupUpdateType) Ptr() *JellyfinGroupUpdateType {
	return &v
}

type NullableJellyfinGroupUpdateType struct {
	value *JellyfinGroupUpdateType
	isSet bool
}

func (v NullableJellyfinGroupUpdateType) Get() *JellyfinGroupUpdateType {
	return v.value
}

func (v *NullableJellyfinGroupUpdateType) Set(val *JellyfinGroupUpdateType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinGroupUpdateType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinGroupUpdateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinGroupUpdateType(val *JellyfinGroupUpdateType) *NullableJellyfinGroupUpdateType {
	return &NullableJellyfinGroupUpdateType{value: val, isSet: true}
}

func (v NullableJellyfinGroupUpdateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinGroupUpdateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

