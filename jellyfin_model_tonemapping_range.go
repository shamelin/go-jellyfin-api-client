/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinTonemappingRange Enum containing tonemapping ranges.
type JellyfinTonemappingRange string

// List of TonemappingRange
const (
	JELLYFINTONEMAPPINGRANGE_AUTO JellyfinTonemappingRange = "auto"
	JELLYFINTONEMAPPINGRANGE_TV JellyfinTonemappingRange = "tv"
	JELLYFINTONEMAPPINGRANGE_PC JellyfinTonemappingRange = "pc"
)

// All allowed values of JellyfinTonemappingRange enum
var AllowedJellyfinTonemappingRangeEnumValues = []JellyfinTonemappingRange{
	"auto",
	"tv",
	"pc",
}

func (v *JellyfinTonemappingRange) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinTonemappingRange(value)
	for _, existing := range AllowedJellyfinTonemappingRangeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinTonemappingRange", value)
}

// NewJellyfinTonemappingRangeFromValue returns a pointer to a valid JellyfinTonemappingRange
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinTonemappingRangeFromValue(v string) (*JellyfinTonemappingRange, error) {
	ev := JellyfinTonemappingRange(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinTonemappingRange: valid values are %v", v, AllowedJellyfinTonemappingRangeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinTonemappingRange) IsValid() bool {
	for _, existing := range AllowedJellyfinTonemappingRangeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TonemappingRange value
func (v JellyfinTonemappingRange) Ptr() *JellyfinTonemappingRange {
	return &v
}

type NullableJellyfinTonemappingRange struct {
	value *JellyfinTonemappingRange
	isSet bool
}

func (v NullableJellyfinTonemappingRange) Get() *JellyfinTonemappingRange {
	return v.value
}

func (v *NullableJellyfinTonemappingRange) Set(val *JellyfinTonemappingRange) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinTonemappingRange) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinTonemappingRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinTonemappingRange(val *JellyfinTonemappingRange) *NullableJellyfinTonemappingRange {
	return &NullableJellyfinTonemappingRange{value: val, isSet: true}
}

func (v NullableJellyfinTonemappingRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinTonemappingRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

