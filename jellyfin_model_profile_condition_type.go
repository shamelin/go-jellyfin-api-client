/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinProfileConditionType the model 'JellyfinProfileConditionType'
type JellyfinProfileConditionType string

// List of ProfileConditionType
const (
	EQUALS JellyfinProfileConditionType = "Equals"
	NOT_EQUALS JellyfinProfileConditionType = "NotEquals"
	LESS_THAN_EQUAL JellyfinProfileConditionType = "LessThanEqual"
	GREATER_THAN_EQUAL JellyfinProfileConditionType = "GreaterThanEqual"
	EQUALS_ANY JellyfinProfileConditionType = "EqualsAny"
)

// All allowed values of JellyfinProfileConditionType enum
var AllowedJellyfinProfileConditionTypeEnumValues = []JellyfinProfileConditionType{
	"Equals",
	"NotEquals",
	"LessThanEqual",
	"GreaterThanEqual",
	"EqualsAny",
}

func (v *JellyfinProfileConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinProfileConditionType(value)
	for _, existing := range AllowedJellyfinProfileConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinProfileConditionType", value)
}

// NewJellyfinProfileConditionTypeFromValue returns a pointer to a valid JellyfinProfileConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinProfileConditionTypeFromValue(v string) (*JellyfinProfileConditionType, error) {
	ev := JellyfinProfileConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinProfileConditionType: valid values are %v", v, AllowedJellyfinProfileConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinProfileConditionType) IsValid() bool {
	for _, existing := range AllowedJellyfinProfileConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProfileConditionType value
func (v JellyfinProfileConditionType) Ptr() *JellyfinProfileConditionType {
	return &v
}

type NullableJellyfinProfileConditionType struct {
	value *JellyfinProfileConditionType
	isSet bool
}

func (v NullableJellyfinProfileConditionType) Get() *JellyfinProfileConditionType {
	return v.value
}

func (v *NullableJellyfinProfileConditionType) Set(val *JellyfinProfileConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinProfileConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinProfileConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinProfileConditionType(val *JellyfinProfileConditionType) *NullableJellyfinProfileConditionType {
	return &NullableJellyfinProfileConditionType{value: val, isSet: true}
}

func (v NullableJellyfinProfileConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinProfileConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

