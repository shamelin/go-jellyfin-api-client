/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GeneralCommandType This exists simply to identify a set of known commands.
type GeneralCommandType string

// List of GeneralCommandType
const (
	MOVE_UP GeneralCommandType = "MoveUp"
	MOVE_DOWN GeneralCommandType = "MoveDown"
	MOVE_LEFT GeneralCommandType = "MoveLeft"
	MOVE_RIGHT GeneralCommandType = "MoveRight"
	PAGE_UP GeneralCommandType = "PageUp"
	PAGE_DOWN GeneralCommandType = "PageDown"
	PREVIOUS_LETTER GeneralCommandType = "PreviousLetter"
	NEXT_LETTER GeneralCommandType = "NextLetter"
	TOGGLE_OSD GeneralCommandType = "ToggleOsd"
	TOGGLE_CONTEXT_MENU GeneralCommandType = "ToggleContextMenu"
	SELECT GeneralCommandType = "Select"
	BACK GeneralCommandType = "Back"
	TAKE_SCREENSHOT GeneralCommandType = "TakeScreenshot"
	SEND_KEY GeneralCommandType = "SendKey"
	SEND_STRING GeneralCommandType = "SendString"
	GO_HOME GeneralCommandType = "GoHome"
	GO_TO_SETTINGS GeneralCommandType = "GoToSettings"
	VOLUME_UP GeneralCommandType = "VolumeUp"
	VOLUME_DOWN GeneralCommandType = "VolumeDown"
	MUTE GeneralCommandType = "Mute"
	UNMUTE GeneralCommandType = "Unmute"
	TOGGLE_MUTE GeneralCommandType = "ToggleMute"
	SET_VOLUME GeneralCommandType = "SetVolume"
	SET_AUDIO_STREAM_INDEX GeneralCommandType = "SetAudioStreamIndex"
	SET_SUBTITLE_STREAM_INDEX GeneralCommandType = "SetSubtitleStreamIndex"
	TOGGLE_FULLSCREEN GeneralCommandType = "ToggleFullscreen"
	DISPLAY_CONTENT GeneralCommandType = "DisplayContent"
	GO_TO_SEARCH GeneralCommandType = "GoToSearch"
	DISPLAY_MESSAGE GeneralCommandType = "DisplayMessage"
	SET_REPEAT_MODE GeneralCommandType = "SetRepeatMode"
	CHANNEL_UP GeneralCommandType = "ChannelUp"
	CHANNEL_DOWN GeneralCommandType = "ChannelDown"
	GUIDE GeneralCommandType = "Guide"
	TOGGLE_STATS GeneralCommandType = "ToggleStats"
	PLAY_MEDIA_SOURCE GeneralCommandType = "PlayMediaSource"
	PLAY_TRAILERS GeneralCommandType = "PlayTrailers"
	SET_SHUFFLE_QUEUE GeneralCommandType = "SetShuffleQueue"
	PLAY_STATE GeneralCommandType = "PlayState"
	PLAY_NEXT GeneralCommandType = "PlayNext"
	TOGGLE_OSD_MENU GeneralCommandType = "ToggleOsdMenu"
	PLAY GeneralCommandType = "Play"
	SET_MAX_STREAMING_BITRATE GeneralCommandType = "SetMaxStreamingBitrate"
	SET_PLAYBACK_ORDER GeneralCommandType = "SetPlaybackOrder"
)

// All allowed values of GeneralCommandType enum
var AllowedGeneralCommandTypeEnumValues = []GeneralCommandType{
	"MoveUp",
	"MoveDown",
	"MoveLeft",
	"MoveRight",
	"PageUp",
	"PageDown",
	"PreviousLetter",
	"NextLetter",
	"ToggleOsd",
	"ToggleContextMenu",
	"Select",
	"Back",
	"TakeScreenshot",
	"SendKey",
	"SendString",
	"GoHome",
	"GoToSettings",
	"VolumeUp",
	"VolumeDown",
	"Mute",
	"Unmute",
	"ToggleMute",
	"SetVolume",
	"SetAudioStreamIndex",
	"SetSubtitleStreamIndex",
	"ToggleFullscreen",
	"DisplayContent",
	"GoToSearch",
	"DisplayMessage",
	"SetRepeatMode",
	"ChannelUp",
	"ChannelDown",
	"Guide",
	"ToggleStats",
	"PlayMediaSource",
	"PlayTrailers",
	"SetShuffleQueue",
	"PlayState",
	"PlayNext",
	"ToggleOsdMenu",
	"Play",
	"SetMaxStreamingBitrate",
	"SetPlaybackOrder",
}

func (v *GeneralCommandType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GeneralCommandType(value)
	for _, existing := range AllowedGeneralCommandTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GeneralCommandType", value)
}

// NewGeneralCommandTypeFromValue returns a pointer to a valid GeneralCommandType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGeneralCommandTypeFromValue(v string) (*GeneralCommandType, error) {
	ev := GeneralCommandType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GeneralCommandType: valid values are %v", v, AllowedGeneralCommandTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GeneralCommandType) IsValid() bool {
	for _, existing := range AllowedGeneralCommandTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GeneralCommandType value
func (v GeneralCommandType) Ptr() *GeneralCommandType {
	return &v
}

type NullableGeneralCommandType struct {
	value *GeneralCommandType
	isSet bool
}

func (v NullableGeneralCommandType) Get() *GeneralCommandType {
	return v.value
}

func (v *NullableGeneralCommandType) Set(val *GeneralCommandType) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralCommandType) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralCommandType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralCommandType(val *GeneralCommandType) *NullableGeneralCommandType {
	return &NullableGeneralCommandType{value: val, isSet: true}
}

func (v NullableGeneralCommandType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralCommandType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

