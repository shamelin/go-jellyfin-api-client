/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinRecommendationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinRecommendationDto{}

// JellyfinRecommendationDto struct for JellyfinRecommendationDto
type JellyfinRecommendationDto struct {
	Items []JellyfinBaseItemDto `json:"Items,omitempty"`
	RecommendationType *JellyfinRecommendationType `json:"RecommendationType,omitempty"`
	BaselineItemName NullableString `json:"BaselineItemName,omitempty"`
	CategoryId *string `json:"CategoryId,omitempty"`
}

// NewJellyfinRecommendationDto instantiates a new JellyfinRecommendationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinRecommendationDto() *JellyfinRecommendationDto {
	this := JellyfinRecommendationDto{}
	return &this
}

// NewJellyfinRecommendationDtoWithDefaults instantiates a new JellyfinRecommendationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinRecommendationDtoWithDefaults() *JellyfinRecommendationDto {
	this := JellyfinRecommendationDto{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinRecommendationDto) GetItems() []JellyfinBaseItemDto {
	if o == nil {
		var ret []JellyfinBaseItemDto
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinRecommendationDto) GetItemsOk() ([]JellyfinBaseItemDto, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *JellyfinRecommendationDto) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []JellyfinBaseItemDto and assigns it to the Items field.
func (o *JellyfinRecommendationDto) SetItems(v []JellyfinBaseItemDto) {
	o.Items = v
}

// GetRecommendationType returns the RecommendationType field value if set, zero value otherwise.
func (o *JellyfinRecommendationDto) GetRecommendationType() JellyfinRecommendationType {
	if o == nil || IsNil(o.RecommendationType) {
		var ret JellyfinRecommendationType
		return ret
	}
	return *o.RecommendationType
}

// GetRecommendationTypeOk returns a tuple with the RecommendationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinRecommendationDto) GetRecommendationTypeOk() (*JellyfinRecommendationType, bool) {
	if o == nil || IsNil(o.RecommendationType) {
		return nil, false
	}
	return o.RecommendationType, true
}

// HasRecommendationType returns a boolean if a field has been set.
func (o *JellyfinRecommendationDto) HasRecommendationType() bool {
	if o != nil && !IsNil(o.RecommendationType) {
		return true
	}

	return false
}

// SetRecommendationType gets a reference to the given JellyfinRecommendationType and assigns it to the RecommendationType field.
func (o *JellyfinRecommendationDto) SetRecommendationType(v JellyfinRecommendationType) {
	o.RecommendationType = &v
}

// GetBaselineItemName returns the BaselineItemName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinRecommendationDto) GetBaselineItemName() string {
	if o == nil || IsNil(o.BaselineItemName.Get()) {
		var ret string
		return ret
	}
	return *o.BaselineItemName.Get()
}

// GetBaselineItemNameOk returns a tuple with the BaselineItemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinRecommendationDto) GetBaselineItemNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaselineItemName.Get(), o.BaselineItemName.IsSet()
}

// HasBaselineItemName returns a boolean if a field has been set.
func (o *JellyfinRecommendationDto) HasBaselineItemName() bool {
	if o != nil && o.BaselineItemName.IsSet() {
		return true
	}

	return false
}

// SetBaselineItemName gets a reference to the given NullableString and assigns it to the BaselineItemName field.
func (o *JellyfinRecommendationDto) SetBaselineItemName(v string) {
	o.BaselineItemName.Set(&v)
}
// SetBaselineItemNameNil sets the value for BaselineItemName to be an explicit nil
func (o *JellyfinRecommendationDto) SetBaselineItemNameNil() {
	o.BaselineItemName.Set(nil)
}

// UnsetBaselineItemName ensures that no value is present for BaselineItemName, not even an explicit nil
func (o *JellyfinRecommendationDto) UnsetBaselineItemName() {
	o.BaselineItemName.Unset()
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *JellyfinRecommendationDto) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinRecommendationDto) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *JellyfinRecommendationDto) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *JellyfinRecommendationDto) SetCategoryId(v string) {
	o.CategoryId = &v
}

func (o JellyfinRecommendationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinRecommendationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["Items"] = o.Items
	}
	if !IsNil(o.RecommendationType) {
		toSerialize["RecommendationType"] = o.RecommendationType
	}
	if o.BaselineItemName.IsSet() {
		toSerialize["BaselineItemName"] = o.BaselineItemName.Get()
	}
	if !IsNil(o.CategoryId) {
		toSerialize["CategoryId"] = o.CategoryId
	}
	return toSerialize, nil
}

type NullableJellyfinRecommendationDto struct {
	value *JellyfinRecommendationDto
	isSet bool
}

func (v NullableJellyfinRecommendationDto) Get() *JellyfinRecommendationDto {
	return v.value
}

func (v *NullableJellyfinRecommendationDto) Set(val *JellyfinRecommendationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinRecommendationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinRecommendationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinRecommendationDto(val *JellyfinRecommendationDto) *NullableJellyfinRecommendationDto {
	return &NullableJellyfinRecommendationDto{value: val, isSet: true}
}

func (v NullableJellyfinRecommendationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinRecommendationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


