/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinSeriesStatus The status of a series.
type JellyfinSeriesStatus string

// List of SeriesStatus
const (
	JELLYFINSERIESSTATUS_CONTINUING JellyfinSeriesStatus = "Continuing"
	JELLYFINSERIESSTATUS_ENDED JellyfinSeriesStatus = "Ended"
	JELLYFINSERIESSTATUS_UNRELEASED JellyfinSeriesStatus = "Unreleased"
)

// All allowed values of JellyfinSeriesStatus enum
var AllowedJellyfinSeriesStatusEnumValues = []JellyfinSeriesStatus{
	"Continuing",
	"Ended",
	"Unreleased",
}

func (v *JellyfinSeriesStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinSeriesStatus(value)
	for _, existing := range AllowedJellyfinSeriesStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinSeriesStatus", value)
}

// NewJellyfinSeriesStatusFromValue returns a pointer to a valid JellyfinSeriesStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinSeriesStatusFromValue(v string) (*JellyfinSeriesStatus, error) {
	ev := JellyfinSeriesStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinSeriesStatus: valid values are %v", v, AllowedJellyfinSeriesStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinSeriesStatus) IsValid() bool {
	for _, existing := range AllowedJellyfinSeriesStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SeriesStatus value
func (v JellyfinSeriesStatus) Ptr() *JellyfinSeriesStatus {
	return &v
}

type NullableJellyfinSeriesStatus struct {
	value *JellyfinSeriesStatus
	isSet bool
}

func (v NullableJellyfinSeriesStatus) Get() *JellyfinSeriesStatus {
	return v.value
}

func (v *NullableJellyfinSeriesStatus) Set(val *JellyfinSeriesStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinSeriesStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinSeriesStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinSeriesStatus(val *JellyfinSeriesStatus) *NullableJellyfinSeriesStatus {
	return &NullableJellyfinSeriesStatus{value: val, isSet: true}
}

func (v NullableJellyfinSeriesStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinSeriesStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

