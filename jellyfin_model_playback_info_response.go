/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinPlaybackInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinPlaybackInfoResponse{}

// JellyfinPlaybackInfoResponse Class PlaybackInfoResponse.
type JellyfinPlaybackInfoResponse struct {
	// Gets or sets the media sources.
	MediaSources []JellyfinMediaSourceInfo `json:"MediaSources,omitempty"`
	// Gets or sets the play session identifier.
	PlaySessionId NullableString `json:"PlaySessionId,omitempty"`
	// Gets or sets the error code.
	ErrorCode NullableJellyfinPlaybackErrorCode `json:"ErrorCode,omitempty"`
}

// NewJellyfinPlaybackInfoResponse instantiates a new JellyfinPlaybackInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinPlaybackInfoResponse() *JellyfinPlaybackInfoResponse {
	this := JellyfinPlaybackInfoResponse{}
	return &this
}

// NewJellyfinPlaybackInfoResponseWithDefaults instantiates a new JellyfinPlaybackInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinPlaybackInfoResponseWithDefaults() *JellyfinPlaybackInfoResponse {
	this := JellyfinPlaybackInfoResponse{}
	return &this
}

// GetMediaSources returns the MediaSources field value if set, zero value otherwise.
func (o *JellyfinPlaybackInfoResponse) GetMediaSources() []JellyfinMediaSourceInfo {
	if o == nil || IsNil(o.MediaSources) {
		var ret []JellyfinMediaSourceInfo
		return ret
	}
	return o.MediaSources
}

// GetMediaSourcesOk returns a tuple with the MediaSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinPlaybackInfoResponse) GetMediaSourcesOk() ([]JellyfinMediaSourceInfo, bool) {
	if o == nil || IsNil(o.MediaSources) {
		return nil, false
	}
	return o.MediaSources, true
}

// HasMediaSources returns a boolean if a field has been set.
func (o *JellyfinPlaybackInfoResponse) HasMediaSources() bool {
	if o != nil && !IsNil(o.MediaSources) {
		return true
	}

	return false
}

// SetMediaSources gets a reference to the given []JellyfinMediaSourceInfo and assigns it to the MediaSources field.
func (o *JellyfinPlaybackInfoResponse) SetMediaSources(v []JellyfinMediaSourceInfo) {
	o.MediaSources = v
}

// GetPlaySessionId returns the PlaySessionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinPlaybackInfoResponse) GetPlaySessionId() string {
	if o == nil || IsNil(o.PlaySessionId.Get()) {
		var ret string
		return ret
	}
	return *o.PlaySessionId.Get()
}

// GetPlaySessionIdOk returns a tuple with the PlaySessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinPlaybackInfoResponse) GetPlaySessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlaySessionId.Get(), o.PlaySessionId.IsSet()
}

// HasPlaySessionId returns a boolean if a field has been set.
func (o *JellyfinPlaybackInfoResponse) HasPlaySessionId() bool {
	if o != nil && o.PlaySessionId.IsSet() {
		return true
	}

	return false
}

// SetPlaySessionId gets a reference to the given NullableString and assigns it to the PlaySessionId field.
func (o *JellyfinPlaybackInfoResponse) SetPlaySessionId(v string) {
	o.PlaySessionId.Set(&v)
}
// SetPlaySessionIdNil sets the value for PlaySessionId to be an explicit nil
func (o *JellyfinPlaybackInfoResponse) SetPlaySessionIdNil() {
	o.PlaySessionId.Set(nil)
}

// UnsetPlaySessionId ensures that no value is present for PlaySessionId, not even an explicit nil
func (o *JellyfinPlaybackInfoResponse) UnsetPlaySessionId() {
	o.PlaySessionId.Unset()
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinPlaybackInfoResponse) GetErrorCode() JellyfinPlaybackErrorCode {
	if o == nil || IsNil(o.ErrorCode.Get()) {
		var ret JellyfinPlaybackErrorCode
		return ret
	}
	return *o.ErrorCode.Get()
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinPlaybackInfoResponse) GetErrorCodeOk() (*JellyfinPlaybackErrorCode, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorCode.Get(), o.ErrorCode.IsSet()
}

// HasErrorCode returns a boolean if a field has been set.
func (o *JellyfinPlaybackInfoResponse) HasErrorCode() bool {
	if o != nil && o.ErrorCode.IsSet() {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given NullableJellyfinPlaybackErrorCode and assigns it to the ErrorCode field.
func (o *JellyfinPlaybackInfoResponse) SetErrorCode(v JellyfinPlaybackErrorCode) {
	o.ErrorCode.Set(&v)
}
// SetErrorCodeNil sets the value for ErrorCode to be an explicit nil
func (o *JellyfinPlaybackInfoResponse) SetErrorCodeNil() {
	o.ErrorCode.Set(nil)
}

// UnsetErrorCode ensures that no value is present for ErrorCode, not even an explicit nil
func (o *JellyfinPlaybackInfoResponse) UnsetErrorCode() {
	o.ErrorCode.Unset()
}

func (o JellyfinPlaybackInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinPlaybackInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MediaSources) {
		toSerialize["MediaSources"] = o.MediaSources
	}
	if o.PlaySessionId.IsSet() {
		toSerialize["PlaySessionId"] = o.PlaySessionId.Get()
	}
	if o.ErrorCode.IsSet() {
		toSerialize["ErrorCode"] = o.ErrorCode.Get()
	}
	return toSerialize, nil
}

type NullableJellyfinPlaybackInfoResponse struct {
	value *JellyfinPlaybackInfoResponse
	isSet bool
}

func (v NullableJellyfinPlaybackInfoResponse) Get() *JellyfinPlaybackInfoResponse {
	return v.value
}

func (v *NullableJellyfinPlaybackInfoResponse) Set(val *JellyfinPlaybackInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinPlaybackInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinPlaybackInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinPlaybackInfoResponse(val *JellyfinPlaybackInfoResponse) *NullableJellyfinPlaybackInfoResponse {
	return &NullableJellyfinPlaybackInfoResponse{value: val, isSet: true}
}

func (v NullableJellyfinPlaybackInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinPlaybackInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


