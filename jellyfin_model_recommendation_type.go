/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinRecommendationType the model 'JellyfinRecommendationType'
type JellyfinRecommendationType string

// List of RecommendationType
const (
	SIMILAR_TO_RECENTLY_PLAYED JellyfinRecommendationType = "SimilarToRecentlyPlayed"
	SIMILAR_TO_LIKED_ITEM JellyfinRecommendationType = "SimilarToLikedItem"
	HAS_DIRECTOR_FROM_RECENTLY_PLAYED JellyfinRecommendationType = "HasDirectorFromRecentlyPlayed"
	HAS_ACTOR_FROM_RECENTLY_PLAYED JellyfinRecommendationType = "HasActorFromRecentlyPlayed"
	HAS_LIKED_DIRECTOR JellyfinRecommendationType = "HasLikedDirector"
	HAS_LIKED_ACTOR JellyfinRecommendationType = "HasLikedActor"
)

// All allowed values of JellyfinRecommendationType enum
var AllowedJellyfinRecommendationTypeEnumValues = []JellyfinRecommendationType{
	"SimilarToRecentlyPlayed",
	"SimilarToLikedItem",
	"HasDirectorFromRecentlyPlayed",
	"HasActorFromRecentlyPlayed",
	"HasLikedDirector",
	"HasLikedActor",
}

func (v *JellyfinRecommendationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinRecommendationType(value)
	for _, existing := range AllowedJellyfinRecommendationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinRecommendationType", value)
}

// NewJellyfinRecommendationTypeFromValue returns a pointer to a valid JellyfinRecommendationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinRecommendationTypeFromValue(v string) (*JellyfinRecommendationType, error) {
	ev := JellyfinRecommendationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinRecommendationType: valid values are %v", v, AllowedJellyfinRecommendationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinRecommendationType) IsValid() bool {
	for _, existing := range AllowedJellyfinRecommendationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RecommendationType value
func (v JellyfinRecommendationType) Ptr() *JellyfinRecommendationType {
	return &v
}

type NullableJellyfinRecommendationType struct {
	value *JellyfinRecommendationType
	isSet bool
}

func (v NullableJellyfinRecommendationType) Get() *JellyfinRecommendationType {
	return v.value
}

func (v *NullableJellyfinRecommendationType) Set(val *JellyfinRecommendationType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinRecommendationType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinRecommendationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinRecommendationType(val *JellyfinRecommendationType) *NullableJellyfinRecommendationType {
	return &NullableJellyfinRecommendationType{value: val, isSet: true}
}

func (v NullableJellyfinRecommendationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinRecommendationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

