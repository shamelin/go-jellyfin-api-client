/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinPlayQueueUpdateReason Enum PlayQueueUpdateReason.
type JellyfinPlayQueueUpdateReason string

// List of PlayQueueUpdateReason
const (
	NEW_PLAYLIST JellyfinPlayQueueUpdateReason = "NewPlaylist"
	SET_CURRENT_ITEM JellyfinPlayQueueUpdateReason = "SetCurrentItem"
	REMOVE_ITEMS JellyfinPlayQueueUpdateReason = "RemoveItems"
	MOVE_ITEM JellyfinPlayQueueUpdateReason = "MoveItem"
	QUEUE JellyfinPlayQueueUpdateReason = "Queue"
	QUEUE_NEXT JellyfinPlayQueueUpdateReason = "QueueNext"
	NEXT_ITEM JellyfinPlayQueueUpdateReason = "NextItem"
	PREVIOUS_ITEM JellyfinPlayQueueUpdateReason = "PreviousItem"
	REPEAT_MODE JellyfinPlayQueueUpdateReason = "RepeatMode"
	SHUFFLE_MODE JellyfinPlayQueueUpdateReason = "ShuffleMode"
)

// All allowed values of JellyfinPlayQueueUpdateReason enum
var AllowedJellyfinPlayQueueUpdateReasonEnumValues = []JellyfinPlayQueueUpdateReason{
	"NewPlaylist",
	"SetCurrentItem",
	"RemoveItems",
	"MoveItem",
	"Queue",
	"QueueNext",
	"NextItem",
	"PreviousItem",
	"RepeatMode",
	"ShuffleMode",
}

func (v *JellyfinPlayQueueUpdateReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinPlayQueueUpdateReason(value)
	for _, existing := range AllowedJellyfinPlayQueueUpdateReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinPlayQueueUpdateReason", value)
}

// NewJellyfinPlayQueueUpdateReasonFromValue returns a pointer to a valid JellyfinPlayQueueUpdateReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinPlayQueueUpdateReasonFromValue(v string) (*JellyfinPlayQueueUpdateReason, error) {
	ev := JellyfinPlayQueueUpdateReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinPlayQueueUpdateReason: valid values are %v", v, AllowedJellyfinPlayQueueUpdateReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinPlayQueueUpdateReason) IsValid() bool {
	for _, existing := range AllowedJellyfinPlayQueueUpdateReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlayQueueUpdateReason value
func (v JellyfinPlayQueueUpdateReason) Ptr() *JellyfinPlayQueueUpdateReason {
	return &v
}

type NullableJellyfinPlayQueueUpdateReason struct {
	value *JellyfinPlayQueueUpdateReason
	isSet bool
}

func (v NullableJellyfinPlayQueueUpdateReason) Get() *JellyfinPlayQueueUpdateReason {
	return v.value
}

func (v *NullableJellyfinPlayQueueUpdateReason) Set(val *JellyfinPlayQueueUpdateReason) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinPlayQueueUpdateReason) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinPlayQueueUpdateReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinPlayQueueUpdateReason(val *JellyfinPlayQueueUpdateReason) *NullableJellyfinPlayQueueUpdateReason {
	return &NullableJellyfinPlayQueueUpdateReason{value: val, isSet: true}
}

func (v NullableJellyfinPlayQueueUpdateReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinPlayQueueUpdateReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

