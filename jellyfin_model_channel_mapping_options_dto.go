/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinChannelMappingOptionsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinChannelMappingOptionsDto{}

// JellyfinChannelMappingOptionsDto Channel mapping options dto.
type JellyfinChannelMappingOptionsDto struct {
	// Gets or sets list of tuner channels.
	TunerChannels []JellyfinTunerChannelMapping `json:"TunerChannels,omitempty"`
	// Gets or sets list of provider channels.
	ProviderChannels []JellyfinNameIdPair `json:"ProviderChannels,omitempty"`
	// Gets or sets list of mappings.
	Mappings []JellyfinNameValuePair `json:"Mappings,omitempty"`
	// Gets or sets provider name.
	ProviderName NullableString `json:"ProviderName,omitempty"`
}

// NewJellyfinChannelMappingOptionsDto instantiates a new JellyfinChannelMappingOptionsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinChannelMappingOptionsDto() *JellyfinChannelMappingOptionsDto {
	this := JellyfinChannelMappingOptionsDto{}
	return &this
}

// NewJellyfinChannelMappingOptionsDtoWithDefaults instantiates a new JellyfinChannelMappingOptionsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinChannelMappingOptionsDtoWithDefaults() *JellyfinChannelMappingOptionsDto {
	this := JellyfinChannelMappingOptionsDto{}
	return &this
}

// GetTunerChannels returns the TunerChannels field value if set, zero value otherwise.
func (o *JellyfinChannelMappingOptionsDto) GetTunerChannels() []JellyfinTunerChannelMapping {
	if o == nil || IsNil(o.TunerChannels) {
		var ret []JellyfinTunerChannelMapping
		return ret
	}
	return o.TunerChannels
}

// GetTunerChannelsOk returns a tuple with the TunerChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinChannelMappingOptionsDto) GetTunerChannelsOk() ([]JellyfinTunerChannelMapping, bool) {
	if o == nil || IsNil(o.TunerChannels) {
		return nil, false
	}
	return o.TunerChannels, true
}

// HasTunerChannels returns a boolean if a field has been set.
func (o *JellyfinChannelMappingOptionsDto) HasTunerChannels() bool {
	if o != nil && !IsNil(o.TunerChannels) {
		return true
	}

	return false
}

// SetTunerChannels gets a reference to the given []JellyfinTunerChannelMapping and assigns it to the TunerChannels field.
func (o *JellyfinChannelMappingOptionsDto) SetTunerChannels(v []JellyfinTunerChannelMapping) {
	o.TunerChannels = v
}

// GetProviderChannels returns the ProviderChannels field value if set, zero value otherwise.
func (o *JellyfinChannelMappingOptionsDto) GetProviderChannels() []JellyfinNameIdPair {
	if o == nil || IsNil(o.ProviderChannels) {
		var ret []JellyfinNameIdPair
		return ret
	}
	return o.ProviderChannels
}

// GetProviderChannelsOk returns a tuple with the ProviderChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinChannelMappingOptionsDto) GetProviderChannelsOk() ([]JellyfinNameIdPair, bool) {
	if o == nil || IsNil(o.ProviderChannels) {
		return nil, false
	}
	return o.ProviderChannels, true
}

// HasProviderChannels returns a boolean if a field has been set.
func (o *JellyfinChannelMappingOptionsDto) HasProviderChannels() bool {
	if o != nil && !IsNil(o.ProviderChannels) {
		return true
	}

	return false
}

// SetProviderChannels gets a reference to the given []JellyfinNameIdPair and assigns it to the ProviderChannels field.
func (o *JellyfinChannelMappingOptionsDto) SetProviderChannels(v []JellyfinNameIdPair) {
	o.ProviderChannels = v
}

// GetMappings returns the Mappings field value if set, zero value otherwise.
func (o *JellyfinChannelMappingOptionsDto) GetMappings() []JellyfinNameValuePair {
	if o == nil || IsNil(o.Mappings) {
		var ret []JellyfinNameValuePair
		return ret
	}
	return o.Mappings
}

// GetMappingsOk returns a tuple with the Mappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinChannelMappingOptionsDto) GetMappingsOk() ([]JellyfinNameValuePair, bool) {
	if o == nil || IsNil(o.Mappings) {
		return nil, false
	}
	return o.Mappings, true
}

// HasMappings returns a boolean if a field has been set.
func (o *JellyfinChannelMappingOptionsDto) HasMappings() bool {
	if o != nil && !IsNil(o.Mappings) {
		return true
	}

	return false
}

// SetMappings gets a reference to the given []JellyfinNameValuePair and assigns it to the Mappings field.
func (o *JellyfinChannelMappingOptionsDto) SetMappings(v []JellyfinNameValuePair) {
	o.Mappings = v
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinChannelMappingOptionsDto) GetProviderName() string {
	if o == nil || IsNil(o.ProviderName.Get()) {
		var ret string
		return ret
	}
	return *o.ProviderName.Get()
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinChannelMappingOptionsDto) GetProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProviderName.Get(), o.ProviderName.IsSet()
}

// HasProviderName returns a boolean if a field has been set.
func (o *JellyfinChannelMappingOptionsDto) HasProviderName() bool {
	if o != nil && o.ProviderName.IsSet() {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given NullableString and assigns it to the ProviderName field.
func (o *JellyfinChannelMappingOptionsDto) SetProviderName(v string) {
	o.ProviderName.Set(&v)
}
// SetProviderNameNil sets the value for ProviderName to be an explicit nil
func (o *JellyfinChannelMappingOptionsDto) SetProviderNameNil() {
	o.ProviderName.Set(nil)
}

// UnsetProviderName ensures that no value is present for ProviderName, not even an explicit nil
func (o *JellyfinChannelMappingOptionsDto) UnsetProviderName() {
	o.ProviderName.Unset()
}

func (o JellyfinChannelMappingOptionsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinChannelMappingOptionsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TunerChannels) {
		toSerialize["TunerChannels"] = o.TunerChannels
	}
	if !IsNil(o.ProviderChannels) {
		toSerialize["ProviderChannels"] = o.ProviderChannels
	}
	if !IsNil(o.Mappings) {
		toSerialize["Mappings"] = o.Mappings
	}
	if o.ProviderName.IsSet() {
		toSerialize["ProviderName"] = o.ProviderName.Get()
	}
	return toSerialize, nil
}

type NullableJellyfinChannelMappingOptionsDto struct {
	value *JellyfinChannelMappingOptionsDto
	isSet bool
}

func (v NullableJellyfinChannelMappingOptionsDto) Get() *JellyfinChannelMappingOptionsDto {
	return v.value
}

func (v *NullableJellyfinChannelMappingOptionsDto) Set(val *JellyfinChannelMappingOptionsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinChannelMappingOptionsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinChannelMappingOptionsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinChannelMappingOptionsDto(val *JellyfinChannelMappingOptionsDto) *NullableJellyfinChannelMappingOptionsDto {
	return &NullableJellyfinChannelMappingOptionsDto{value: val, isSet: true}
}

func (v NullableJellyfinChannelMappingOptionsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinChannelMappingOptionsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


