/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinMetadataField Enum MetadataFields.
type JellyfinMetadataField string

// List of MetadataField
const (
	CAST JellyfinMetadataField = "Cast"
	GENRES JellyfinMetadataField = "Genres"
	PRODUCTION_LOCATIONS JellyfinMetadataField = "ProductionLocations"
	STUDIOS JellyfinMetadataField = "Studios"
	TAGS JellyfinMetadataField = "Tags"
	NAME JellyfinMetadataField = "Name"
	OVERVIEW JellyfinMetadataField = "Overview"
	RUNTIME JellyfinMetadataField = "Runtime"
	OFFICIAL_RATING JellyfinMetadataField = "OfficialRating"
)

// All allowed values of JellyfinMetadataField enum
var AllowedJellyfinMetadataFieldEnumValues = []JellyfinMetadataField{
	"Cast",
	"Genres",
	"ProductionLocations",
	"Studios",
	"Tags",
	"Name",
	"Overview",
	"Runtime",
	"OfficialRating",
}

func (v *JellyfinMetadataField) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinMetadataField(value)
	for _, existing := range AllowedJellyfinMetadataFieldEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinMetadataField", value)
}

// NewJellyfinMetadataFieldFromValue returns a pointer to a valid JellyfinMetadataField
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinMetadataFieldFromValue(v string) (*JellyfinMetadataField, error) {
	ev := JellyfinMetadataField(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinMetadataField: valid values are %v", v, AllowedJellyfinMetadataFieldEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinMetadataField) IsValid() bool {
	for _, existing := range AllowedJellyfinMetadataFieldEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetadataField value
func (v JellyfinMetadataField) Ptr() *JellyfinMetadataField {
	return &v
}

type NullableJellyfinMetadataField struct {
	value *JellyfinMetadataField
	isSet bool
}

func (v NullableJellyfinMetadataField) Get() *JellyfinMetadataField {
	return v.value
}

func (v *NullableJellyfinMetadataField) Set(val *JellyfinMetadataField) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinMetadataField) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinMetadataField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinMetadataField(val *JellyfinMetadataField) *NullableJellyfinMetadataField {
	return &NullableJellyfinMetadataField{value: val, isSet: true}
}

func (v NullableJellyfinMetadataField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinMetadataField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

