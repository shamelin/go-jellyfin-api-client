/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinGroupQueueMode Enum GroupQueueMode.
type JellyfinGroupQueueMode string

// List of GroupQueueMode
const (
	QUEUE JellyfinGroupQueueMode = "Queue"
	QUEUE_NEXT JellyfinGroupQueueMode = "QueueNext"
)

// All allowed values of JellyfinGroupQueueMode enum
var AllowedJellyfinGroupQueueModeEnumValues = []JellyfinGroupQueueMode{
	"Queue",
	"QueueNext",
}

func (v *JellyfinGroupQueueMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinGroupQueueMode(value)
	for _, existing := range AllowedJellyfinGroupQueueModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinGroupQueueMode", value)
}

// NewJellyfinGroupQueueModeFromValue returns a pointer to a valid JellyfinGroupQueueMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinGroupQueueModeFromValue(v string) (*JellyfinGroupQueueMode, error) {
	ev := JellyfinGroupQueueMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinGroupQueueMode: valid values are %v", v, AllowedJellyfinGroupQueueModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinGroupQueueMode) IsValid() bool {
	for _, existing := range AllowedJellyfinGroupQueueModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupQueueMode value
func (v JellyfinGroupQueueMode) Ptr() *JellyfinGroupQueueMode {
	return &v
}

type NullableJellyfinGroupQueueMode struct {
	value *JellyfinGroupQueueMode
	isSet bool
}

func (v NullableJellyfinGroupQueueMode) Get() *JellyfinGroupQueueMode {
	return v.value
}

func (v *NullableJellyfinGroupQueueMode) Set(val *JellyfinGroupQueueMode) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinGroupQueueMode) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinGroupQueueMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinGroupQueueMode(val *JellyfinGroupQueueMode) *NullableJellyfinGroupQueueMode {
	return &NullableJellyfinGroupQueueMode{value: val, isSet: true}
}

func (v NullableJellyfinGroupQueueMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinGroupQueueMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

