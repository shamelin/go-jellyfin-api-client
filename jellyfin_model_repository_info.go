/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinRepositoryInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinRepositoryInfo{}

// JellyfinRepositoryInfo Class RepositoryInfo.
type JellyfinRepositoryInfo struct {
	// Gets or sets the name.
	Name NullableString `json:"Name,omitempty"`
	// Gets or sets the URL.
	Url NullableString `json:"Url,omitempty"`
	// Gets or sets a value indicating whether the repository is enabled.
	Enabled *bool `json:"Enabled,omitempty"`
}

// NewJellyfinRepositoryInfo instantiates a new JellyfinRepositoryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinRepositoryInfo() *JellyfinRepositoryInfo {
	this := JellyfinRepositoryInfo{}
	return &this
}

// NewJellyfinRepositoryInfoWithDefaults instantiates a new JellyfinRepositoryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinRepositoryInfoWithDefaults() *JellyfinRepositoryInfo {
	this := JellyfinRepositoryInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinRepositoryInfo) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinRepositoryInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *JellyfinRepositoryInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *JellyfinRepositoryInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *JellyfinRepositoryInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *JellyfinRepositoryInfo) UnsetName() {
	o.Name.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinRepositoryInfo) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinRepositoryInfo) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *JellyfinRepositoryInfo) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *JellyfinRepositoryInfo) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *JellyfinRepositoryInfo) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *JellyfinRepositoryInfo) UnsetUrl() {
	o.Url.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *JellyfinRepositoryInfo) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinRepositoryInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *JellyfinRepositoryInfo) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *JellyfinRepositoryInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o JellyfinRepositoryInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinRepositoryInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.Url.IsSet() {
		toSerialize["Url"] = o.Url.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableJellyfinRepositoryInfo struct {
	value *JellyfinRepositoryInfo
	isSet bool
}

func (v NullableJellyfinRepositoryInfo) Get() *JellyfinRepositoryInfo {
	return v.value
}

func (v *NullableJellyfinRepositoryInfo) Set(val *JellyfinRepositoryInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinRepositoryInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinRepositoryInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinRepositoryInfo(val *JellyfinRepositoryInfo) *NullableJellyfinRepositoryInfo {
	return &NullableJellyfinRepositoryInfo{value: val, isSet: true}
}

func (v NullableJellyfinRepositoryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinRepositoryInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


