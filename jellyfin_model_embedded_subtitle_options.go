/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinEmbeddedSubtitleOptions An enum representing the options to disable embedded subs.
type JellyfinEmbeddedSubtitleOptions string

// List of EmbeddedSubtitleOptions
const (
	JELLYFINEMBEDDEDSUBTITLEOPTIONS_ALLOW_ALL JellyfinEmbeddedSubtitleOptions = "AllowAll"
	JELLYFINEMBEDDEDSUBTITLEOPTIONS_ALLOW_TEXT JellyfinEmbeddedSubtitleOptions = "AllowText"
	JELLYFINEMBEDDEDSUBTITLEOPTIONS_ALLOW_IMAGE JellyfinEmbeddedSubtitleOptions = "AllowImage"
	JELLYFINEMBEDDEDSUBTITLEOPTIONS_ALLOW_NONE JellyfinEmbeddedSubtitleOptions = "AllowNone"
)

// All allowed values of JellyfinEmbeddedSubtitleOptions enum
var AllowedJellyfinEmbeddedSubtitleOptionsEnumValues = []JellyfinEmbeddedSubtitleOptions{
	"AllowAll",
	"AllowText",
	"AllowImage",
	"AllowNone",
}

func (v *JellyfinEmbeddedSubtitleOptions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinEmbeddedSubtitleOptions(value)
	for _, existing := range AllowedJellyfinEmbeddedSubtitleOptionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinEmbeddedSubtitleOptions", value)
}

// NewJellyfinEmbeddedSubtitleOptionsFromValue returns a pointer to a valid JellyfinEmbeddedSubtitleOptions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinEmbeddedSubtitleOptionsFromValue(v string) (*JellyfinEmbeddedSubtitleOptions, error) {
	ev := JellyfinEmbeddedSubtitleOptions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinEmbeddedSubtitleOptions: valid values are %v", v, AllowedJellyfinEmbeddedSubtitleOptionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinEmbeddedSubtitleOptions) IsValid() bool {
	for _, existing := range AllowedJellyfinEmbeddedSubtitleOptionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EmbeddedSubtitleOptions value
func (v JellyfinEmbeddedSubtitleOptions) Ptr() *JellyfinEmbeddedSubtitleOptions {
	return &v
}

type NullableJellyfinEmbeddedSubtitleOptions struct {
	value *JellyfinEmbeddedSubtitleOptions
	isSet bool
}

func (v NullableJellyfinEmbeddedSubtitleOptions) Get() *JellyfinEmbeddedSubtitleOptions {
	return v.value
}

func (v *NullableJellyfinEmbeddedSubtitleOptions) Set(val *JellyfinEmbeddedSubtitleOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinEmbeddedSubtitleOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinEmbeddedSubtitleOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinEmbeddedSubtitleOptions(val *JellyfinEmbeddedSubtitleOptions) *NullableJellyfinEmbeddedSubtitleOptions {
	return &NullableJellyfinEmbeddedSubtitleOptions{value: val, isSet: true}
}

func (v NullableJellyfinEmbeddedSubtitleOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinEmbeddedSubtitleOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

