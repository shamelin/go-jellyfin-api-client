/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinDynamicDayOfWeek An enum that represents a day of the week, weekdays, weekends, or all days.
type JellyfinDynamicDayOfWeek string

// List of DynamicDayOfWeek
const (
	JELLYFINDYNAMICDAYOFWEEK_SUNDAY JellyfinDynamicDayOfWeek = "Sunday"
	JELLYFINDYNAMICDAYOFWEEK_MONDAY JellyfinDynamicDayOfWeek = "Monday"
	JELLYFINDYNAMICDAYOFWEEK_TUESDAY JellyfinDynamicDayOfWeek = "Tuesday"
	JELLYFINDYNAMICDAYOFWEEK_WEDNESDAY JellyfinDynamicDayOfWeek = "Wednesday"
	JELLYFINDYNAMICDAYOFWEEK_THURSDAY JellyfinDynamicDayOfWeek = "Thursday"
	JELLYFINDYNAMICDAYOFWEEK_FRIDAY JellyfinDynamicDayOfWeek = "Friday"
	JELLYFINDYNAMICDAYOFWEEK_SATURDAY JellyfinDynamicDayOfWeek = "Saturday"
	JELLYFINDYNAMICDAYOFWEEK_EVERYDAY JellyfinDynamicDayOfWeek = "Everyday"
	JELLYFINDYNAMICDAYOFWEEK_WEEKDAY JellyfinDynamicDayOfWeek = "Weekday"
	JELLYFINDYNAMICDAYOFWEEK_WEEKEND JellyfinDynamicDayOfWeek = "Weekend"
)

// All allowed values of JellyfinDynamicDayOfWeek enum
var AllowedJellyfinDynamicDayOfWeekEnumValues = []JellyfinDynamicDayOfWeek{
	"Sunday",
	"Monday",
	"Tuesday",
	"Wednesday",
	"Thursday",
	"Friday",
	"Saturday",
	"Everyday",
	"Weekday",
	"Weekend",
}

func (v *JellyfinDynamicDayOfWeek) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinDynamicDayOfWeek(value)
	for _, existing := range AllowedJellyfinDynamicDayOfWeekEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinDynamicDayOfWeek", value)
}

// NewJellyfinDynamicDayOfWeekFromValue returns a pointer to a valid JellyfinDynamicDayOfWeek
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinDynamicDayOfWeekFromValue(v string) (*JellyfinDynamicDayOfWeek, error) {
	ev := JellyfinDynamicDayOfWeek(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinDynamicDayOfWeek: valid values are %v", v, AllowedJellyfinDynamicDayOfWeekEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinDynamicDayOfWeek) IsValid() bool {
	for _, existing := range AllowedJellyfinDynamicDayOfWeekEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DynamicDayOfWeek value
func (v JellyfinDynamicDayOfWeek) Ptr() *JellyfinDynamicDayOfWeek {
	return &v
}

type NullableJellyfinDynamicDayOfWeek struct {
	value *JellyfinDynamicDayOfWeek
	isSet bool
}

func (v NullableJellyfinDynamicDayOfWeek) Get() *JellyfinDynamicDayOfWeek {
	return v.value
}

func (v *NullableJellyfinDynamicDayOfWeek) Set(val *JellyfinDynamicDayOfWeek) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinDynamicDayOfWeek) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinDynamicDayOfWeek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinDynamicDayOfWeek(val *JellyfinDynamicDayOfWeek) *NullableJellyfinDynamicDayOfWeek {
	return &NullableJellyfinDynamicDayOfWeek{value: val, isSet: true}
}

func (v NullableJellyfinDynamicDayOfWeek) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinDynamicDayOfWeek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

