/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinPlayCommand Enum PlayCommand.
type JellyfinPlayCommand string

// List of PlayCommand
const (
	PLAY_NOW JellyfinPlayCommand = "PlayNow"
	PLAY_NEXT JellyfinPlayCommand = "PlayNext"
	PLAY_LAST JellyfinPlayCommand = "PlayLast"
	PLAY_INSTANT_MIX JellyfinPlayCommand = "PlayInstantMix"
	PLAY_SHUFFLE JellyfinPlayCommand = "PlayShuffle"
)

// All allowed values of JellyfinPlayCommand enum
var AllowedJellyfinPlayCommandEnumValues = []JellyfinPlayCommand{
	"PlayNow",
	"PlayNext",
	"PlayLast",
	"PlayInstantMix",
	"PlayShuffle",
}

func (v *JellyfinPlayCommand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinPlayCommand(value)
	for _, existing := range AllowedJellyfinPlayCommandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinPlayCommand", value)
}

// NewJellyfinPlayCommandFromValue returns a pointer to a valid JellyfinPlayCommand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinPlayCommandFromValue(v string) (*JellyfinPlayCommand, error) {
	ev := JellyfinPlayCommand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinPlayCommand: valid values are %v", v, AllowedJellyfinPlayCommandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinPlayCommand) IsValid() bool {
	for _, existing := range AllowedJellyfinPlayCommandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlayCommand value
func (v JellyfinPlayCommand) Ptr() *JellyfinPlayCommand {
	return &v
}

type NullableJellyfinPlayCommand struct {
	value *JellyfinPlayCommand
	isSet bool
}

func (v NullableJellyfinPlayCommand) Get() *JellyfinPlayCommand {
	return v.value
}

func (v *NullableJellyfinPlayCommand) Set(val *JellyfinPlayCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinPlayCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinPlayCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinPlayCommand(val *JellyfinPlayCommand) *NullableJellyfinPlayCommand {
	return &NullableJellyfinPlayCommand{value: val, isSet: true}
}

func (v NullableJellyfinPlayCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinPlayCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

