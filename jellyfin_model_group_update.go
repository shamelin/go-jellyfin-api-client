/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// JellyfinGroupUpdate - Group update without data.
type JellyfinGroupUpdate struct {
	JellyfinGroupInfoDtoGroupUpdate *JellyfinGroupInfoDtoGroupUpdate
	JellyfinGroupStateUpdateGroupUpdate *JellyfinGroupStateUpdateGroupUpdate
	JellyfinPlayQueueUpdateGroupUpdate *JellyfinPlayQueueUpdateGroupUpdate
	JellyfinStringGroupUpdate *JellyfinStringGroupUpdate
}

// JellyfinGroupInfoDtoGroupUpdateAsJellyfinGroupUpdate is a convenience function that returns JellyfinGroupInfoDtoGroupUpdate wrapped in JellyfinGroupUpdate
func JellyfinGroupInfoDtoGroupUpdateAsJellyfinGroupUpdate(v *JellyfinGroupInfoDtoGroupUpdate) JellyfinGroupUpdate {
	return JellyfinGroupUpdate{
		JellyfinGroupInfoDtoGroupUpdate: v,
	}
}

// JellyfinGroupStateUpdateGroupUpdateAsJellyfinGroupUpdate is a convenience function that returns JellyfinGroupStateUpdateGroupUpdate wrapped in JellyfinGroupUpdate
func JellyfinGroupStateUpdateGroupUpdateAsJellyfinGroupUpdate(v *JellyfinGroupStateUpdateGroupUpdate) JellyfinGroupUpdate {
	return JellyfinGroupUpdate{
		JellyfinGroupStateUpdateGroupUpdate: v,
	}
}

// JellyfinPlayQueueUpdateGroupUpdateAsJellyfinGroupUpdate is a convenience function that returns JellyfinPlayQueueUpdateGroupUpdate wrapped in JellyfinGroupUpdate
func JellyfinPlayQueueUpdateGroupUpdateAsJellyfinGroupUpdate(v *JellyfinPlayQueueUpdateGroupUpdate) JellyfinGroupUpdate {
	return JellyfinGroupUpdate{
		JellyfinPlayQueueUpdateGroupUpdate: v,
	}
}

// JellyfinStringGroupUpdateAsJellyfinGroupUpdate is a convenience function that returns JellyfinStringGroupUpdate wrapped in JellyfinGroupUpdate
func JellyfinStringGroupUpdateAsJellyfinGroupUpdate(v *JellyfinStringGroupUpdate) JellyfinGroupUpdate {
	return JellyfinGroupUpdate{
		JellyfinStringGroupUpdate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *JellyfinGroupUpdate) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into JellyfinGroupInfoDtoGroupUpdate
	err = newStrictDecoder(data).Decode(&dst.JellyfinGroupInfoDtoGroupUpdate)
	if err == nil {
		jsonJellyfinGroupInfoDtoGroupUpdate, _ := json.Marshal(dst.JellyfinGroupInfoDtoGroupUpdate)
		if string(jsonJellyfinGroupInfoDtoGroupUpdate) == "{}" { // empty struct
			dst.JellyfinGroupInfoDtoGroupUpdate = nil
		} else {
			if err = validator.Validate(dst.JellyfinGroupInfoDtoGroupUpdate); err != nil {
				dst.JellyfinGroupInfoDtoGroupUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.JellyfinGroupInfoDtoGroupUpdate = nil
	}

	// try to unmarshal data into JellyfinGroupStateUpdateGroupUpdate
	err = newStrictDecoder(data).Decode(&dst.JellyfinGroupStateUpdateGroupUpdate)
	if err == nil {
		jsonJellyfinGroupStateUpdateGroupUpdate, _ := json.Marshal(dst.JellyfinGroupStateUpdateGroupUpdate)
		if string(jsonJellyfinGroupStateUpdateGroupUpdate) == "{}" { // empty struct
			dst.JellyfinGroupStateUpdateGroupUpdate = nil
		} else {
			if err = validator.Validate(dst.JellyfinGroupStateUpdateGroupUpdate); err != nil {
				dst.JellyfinGroupStateUpdateGroupUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.JellyfinGroupStateUpdateGroupUpdate = nil
	}

	// try to unmarshal data into JellyfinPlayQueueUpdateGroupUpdate
	err = newStrictDecoder(data).Decode(&dst.JellyfinPlayQueueUpdateGroupUpdate)
	if err == nil {
		jsonJellyfinPlayQueueUpdateGroupUpdate, _ := json.Marshal(dst.JellyfinPlayQueueUpdateGroupUpdate)
		if string(jsonJellyfinPlayQueueUpdateGroupUpdate) == "{}" { // empty struct
			dst.JellyfinPlayQueueUpdateGroupUpdate = nil
		} else {
			if err = validator.Validate(dst.JellyfinPlayQueueUpdateGroupUpdate); err != nil {
				dst.JellyfinPlayQueueUpdateGroupUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.JellyfinPlayQueueUpdateGroupUpdate = nil
	}

	// try to unmarshal data into JellyfinStringGroupUpdate
	err = newStrictDecoder(data).Decode(&dst.JellyfinStringGroupUpdate)
	if err == nil {
		jsonJellyfinStringGroupUpdate, _ := json.Marshal(dst.JellyfinStringGroupUpdate)
		if string(jsonJellyfinStringGroupUpdate) == "{}" { // empty struct
			dst.JellyfinStringGroupUpdate = nil
		} else {
			if err = validator.Validate(dst.JellyfinStringGroupUpdate); err != nil {
				dst.JellyfinStringGroupUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.JellyfinStringGroupUpdate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.JellyfinGroupInfoDtoGroupUpdate = nil
		dst.JellyfinGroupStateUpdateGroupUpdate = nil
		dst.JellyfinPlayQueueUpdateGroupUpdate = nil
		dst.JellyfinStringGroupUpdate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(JellyfinGroupUpdate)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(JellyfinGroupUpdate)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JellyfinGroupUpdate) MarshalJSON() ([]byte, error) {
	if src.JellyfinGroupInfoDtoGroupUpdate != nil {
		return json.Marshal(&src.JellyfinGroupInfoDtoGroupUpdate)
	}

	if src.JellyfinGroupStateUpdateGroupUpdate != nil {
		return json.Marshal(&src.JellyfinGroupStateUpdateGroupUpdate)
	}

	if src.JellyfinPlayQueueUpdateGroupUpdate != nil {
		return json.Marshal(&src.JellyfinPlayQueueUpdateGroupUpdate)
	}

	if src.JellyfinStringGroupUpdate != nil {
		return json.Marshal(&src.JellyfinStringGroupUpdate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JellyfinGroupUpdate) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.JellyfinGroupInfoDtoGroupUpdate != nil {
		return obj.JellyfinGroupInfoDtoGroupUpdate
	}

	if obj.JellyfinGroupStateUpdateGroupUpdate != nil {
		return obj.JellyfinGroupStateUpdateGroupUpdate
	}

	if obj.JellyfinPlayQueueUpdateGroupUpdate != nil {
		return obj.JellyfinPlayQueueUpdateGroupUpdate
	}

	if obj.JellyfinStringGroupUpdate != nil {
		return obj.JellyfinStringGroupUpdate
	}

	// all schemas are nil
	return nil
}

type NullableJellyfinGroupUpdate struct {
	value *JellyfinGroupUpdate
	isSet bool
}

func (v NullableJellyfinGroupUpdate) Get() *JellyfinGroupUpdate {
	return v.value
}

func (v *NullableJellyfinGroupUpdate) Set(val *JellyfinGroupUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinGroupUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinGroupUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinGroupUpdate(val *JellyfinGroupUpdate) *NullableJellyfinGroupUpdate {
	return &NullableJellyfinGroupUpdate{value: val, isSet: true}
}

func (v NullableJellyfinGroupUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinGroupUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


