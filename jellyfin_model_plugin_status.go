/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinPluginStatus Plugin load status.
type JellyfinPluginStatus string

// List of PluginStatus
const (
	JELLYFINPLUGINSTATUS_ACTIVE JellyfinPluginStatus = "Active"
	JELLYFINPLUGINSTATUS_RESTART JellyfinPluginStatus = "Restart"
	JELLYFINPLUGINSTATUS_DELETED JellyfinPluginStatus = "Deleted"
	JELLYFINPLUGINSTATUS_SUPERCEDED JellyfinPluginStatus = "Superceded"
	JELLYFINPLUGINSTATUS_MALFUNCTIONED JellyfinPluginStatus = "Malfunctioned"
	JELLYFINPLUGINSTATUS_NOT_SUPPORTED JellyfinPluginStatus = "NotSupported"
	JELLYFINPLUGINSTATUS_DISABLED JellyfinPluginStatus = "Disabled"
)

// All allowed values of JellyfinPluginStatus enum
var AllowedJellyfinPluginStatusEnumValues = []JellyfinPluginStatus{
	"Active",
	"Restart",
	"Deleted",
	"Superceded",
	"Malfunctioned",
	"NotSupported",
	"Disabled",
}

func (v *JellyfinPluginStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinPluginStatus(value)
	for _, existing := range AllowedJellyfinPluginStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinPluginStatus", value)
}

// NewJellyfinPluginStatusFromValue returns a pointer to a valid JellyfinPluginStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinPluginStatusFromValue(v string) (*JellyfinPluginStatus, error) {
	ev := JellyfinPluginStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinPluginStatus: valid values are %v", v, AllowedJellyfinPluginStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinPluginStatus) IsValid() bool {
	for _, existing := range AllowedJellyfinPluginStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PluginStatus value
func (v JellyfinPluginStatus) Ptr() *JellyfinPluginStatus {
	return &v
}

type NullableJellyfinPluginStatus struct {
	value *JellyfinPluginStatus
	isSet bool
}

func (v NullableJellyfinPluginStatus) Get() *JellyfinPluginStatus {
	return v.value
}

func (v *NullableJellyfinPluginStatus) Set(val *JellyfinPluginStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinPluginStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinPluginStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinPluginStatus(val *JellyfinPluginStatus) *NullableJellyfinPluginStatus {
	return &NullableJellyfinPluginStatus{value: val, isSet: true}
}

func (v NullableJellyfinPluginStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinPluginStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

