/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinTranscodeReason the model 'JellyfinTranscodeReason'
type JellyfinTranscodeReason string

// List of TranscodeReason
const (
	JELLYFINTRANSCODEREASON_CONTAINER_NOT_SUPPORTED JellyfinTranscodeReason = "ContainerNotSupported"
	JELLYFINTRANSCODEREASON_VIDEO_CODEC_NOT_SUPPORTED JellyfinTranscodeReason = "VideoCodecNotSupported"
	JELLYFINTRANSCODEREASON_AUDIO_CODEC_NOT_SUPPORTED JellyfinTranscodeReason = "AudioCodecNotSupported"
	JELLYFINTRANSCODEREASON_SUBTITLE_CODEC_NOT_SUPPORTED JellyfinTranscodeReason = "SubtitleCodecNotSupported"
	JELLYFINTRANSCODEREASON_AUDIO_IS_EXTERNAL JellyfinTranscodeReason = "AudioIsExternal"
	JELLYFINTRANSCODEREASON_SECONDARY_AUDIO_NOT_SUPPORTED JellyfinTranscodeReason = "SecondaryAudioNotSupported"
	JELLYFINTRANSCODEREASON_VIDEO_PROFILE_NOT_SUPPORTED JellyfinTranscodeReason = "VideoProfileNotSupported"
	JELLYFINTRANSCODEREASON_VIDEO_LEVEL_NOT_SUPPORTED JellyfinTranscodeReason = "VideoLevelNotSupported"
	JELLYFINTRANSCODEREASON_VIDEO_RESOLUTION_NOT_SUPPORTED JellyfinTranscodeReason = "VideoResolutionNotSupported"
	JELLYFINTRANSCODEREASON_VIDEO_BIT_DEPTH_NOT_SUPPORTED JellyfinTranscodeReason = "VideoBitDepthNotSupported"
	JELLYFINTRANSCODEREASON_VIDEO_FRAMERATE_NOT_SUPPORTED JellyfinTranscodeReason = "VideoFramerateNotSupported"
	JELLYFINTRANSCODEREASON_REF_FRAMES_NOT_SUPPORTED JellyfinTranscodeReason = "RefFramesNotSupported"
	JELLYFINTRANSCODEREASON_ANAMORPHIC_VIDEO_NOT_SUPPORTED JellyfinTranscodeReason = "AnamorphicVideoNotSupported"
	JELLYFINTRANSCODEREASON_INTERLACED_VIDEO_NOT_SUPPORTED JellyfinTranscodeReason = "InterlacedVideoNotSupported"
	JELLYFINTRANSCODEREASON_AUDIO_CHANNELS_NOT_SUPPORTED JellyfinTranscodeReason = "AudioChannelsNotSupported"
	JELLYFINTRANSCODEREASON_AUDIO_PROFILE_NOT_SUPPORTED JellyfinTranscodeReason = "AudioProfileNotSupported"
	JELLYFINTRANSCODEREASON_AUDIO_SAMPLE_RATE_NOT_SUPPORTED JellyfinTranscodeReason = "AudioSampleRateNotSupported"
	JELLYFINTRANSCODEREASON_AUDIO_BIT_DEPTH_NOT_SUPPORTED JellyfinTranscodeReason = "AudioBitDepthNotSupported"
	JELLYFINTRANSCODEREASON_CONTAINER_BITRATE_EXCEEDS_LIMIT JellyfinTranscodeReason = "ContainerBitrateExceedsLimit"
	JELLYFINTRANSCODEREASON_VIDEO_BITRATE_NOT_SUPPORTED JellyfinTranscodeReason = "VideoBitrateNotSupported"
	JELLYFINTRANSCODEREASON_AUDIO_BITRATE_NOT_SUPPORTED JellyfinTranscodeReason = "AudioBitrateNotSupported"
	JELLYFINTRANSCODEREASON_UNKNOWN_VIDEO_STREAM_INFO JellyfinTranscodeReason = "UnknownVideoStreamInfo"
	JELLYFINTRANSCODEREASON_UNKNOWN_AUDIO_STREAM_INFO JellyfinTranscodeReason = "UnknownAudioStreamInfo"
	JELLYFINTRANSCODEREASON_DIRECT_PLAY_ERROR JellyfinTranscodeReason = "DirectPlayError"
	JELLYFINTRANSCODEREASON_VIDEO_RANGE_TYPE_NOT_SUPPORTED JellyfinTranscodeReason = "VideoRangeTypeNotSupported"
	JELLYFINTRANSCODEREASON_VIDEO_CODEC_TAG_NOT_SUPPORTED JellyfinTranscodeReason = "VideoCodecTagNotSupported"
)

// All allowed values of JellyfinTranscodeReason enum
var AllowedJellyfinTranscodeReasonEnumValues = []JellyfinTranscodeReason{
	"ContainerNotSupported",
	"VideoCodecNotSupported",
	"AudioCodecNotSupported",
	"SubtitleCodecNotSupported",
	"AudioIsExternal",
	"SecondaryAudioNotSupported",
	"VideoProfileNotSupported",
	"VideoLevelNotSupported",
	"VideoResolutionNotSupported",
	"VideoBitDepthNotSupported",
	"VideoFramerateNotSupported",
	"RefFramesNotSupported",
	"AnamorphicVideoNotSupported",
	"InterlacedVideoNotSupported",
	"AudioChannelsNotSupported",
	"AudioProfileNotSupported",
	"AudioSampleRateNotSupported",
	"AudioBitDepthNotSupported",
	"ContainerBitrateExceedsLimit",
	"VideoBitrateNotSupported",
	"AudioBitrateNotSupported",
	"UnknownVideoStreamInfo",
	"UnknownAudioStreamInfo",
	"DirectPlayError",
	"VideoRangeTypeNotSupported",
	"VideoCodecTagNotSupported",
}

func (v *JellyfinTranscodeReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinTranscodeReason(value)
	for _, existing := range AllowedJellyfinTranscodeReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinTranscodeReason", value)
}

// NewJellyfinTranscodeReasonFromValue returns a pointer to a valid JellyfinTranscodeReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinTranscodeReasonFromValue(v string) (*JellyfinTranscodeReason, error) {
	ev := JellyfinTranscodeReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinTranscodeReason: valid values are %v", v, AllowedJellyfinTranscodeReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinTranscodeReason) IsValid() bool {
	for _, existing := range AllowedJellyfinTranscodeReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TranscodeReason value
func (v JellyfinTranscodeReason) Ptr() *JellyfinTranscodeReason {
	return &v
}

type NullableJellyfinTranscodeReason struct {
	value *JellyfinTranscodeReason
	isSet bool
}

func (v NullableJellyfinTranscodeReason) Get() *JellyfinTranscodeReason {
	return v.value
}

func (v *NullableJellyfinTranscodeReason) Set(val *JellyfinTranscodeReason) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinTranscodeReason) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinTranscodeReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinTranscodeReason(val *JellyfinTranscodeReason) *NullableJellyfinTranscodeReason {
	return &NullableJellyfinTranscodeReason{value: val, isSet: true}
}

func (v NullableJellyfinTranscodeReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinTranscodeReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

