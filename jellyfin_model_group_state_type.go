/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinGroupStateType Enum GroupState.
type JellyfinGroupStateType string

// List of GroupStateType
const (
	JELLYFINGROUPSTATETYPE_IDLE JellyfinGroupStateType = "Idle"
	JELLYFINGROUPSTATETYPE_WAITING JellyfinGroupStateType = "Waiting"
	JELLYFINGROUPSTATETYPE_PAUSED JellyfinGroupStateType = "Paused"
	JELLYFINGROUPSTATETYPE_PLAYING JellyfinGroupStateType = "Playing"
)

// All allowed values of JellyfinGroupStateType enum
var AllowedJellyfinGroupStateTypeEnumValues = []JellyfinGroupStateType{
	"Idle",
	"Waiting",
	"Paused",
	"Playing",
}

func (v *JellyfinGroupStateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinGroupStateType(value)
	for _, existing := range AllowedJellyfinGroupStateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinGroupStateType", value)
}

// NewJellyfinGroupStateTypeFromValue returns a pointer to a valid JellyfinGroupStateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinGroupStateTypeFromValue(v string) (*JellyfinGroupStateType, error) {
	ev := JellyfinGroupStateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinGroupStateType: valid values are %v", v, AllowedJellyfinGroupStateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinGroupStateType) IsValid() bool {
	for _, existing := range AllowedJellyfinGroupStateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupStateType value
func (v JellyfinGroupStateType) Ptr() *JellyfinGroupStateType {
	return &v
}

type NullableJellyfinGroupStateType struct {
	value *JellyfinGroupStateType
	isSet bool
}

func (v NullableJellyfinGroupStateType) Get() *JellyfinGroupStateType {
	return v.value
}

func (v *NullableJellyfinGroupStateType) Set(val *JellyfinGroupStateType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinGroupStateType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinGroupStateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinGroupStateType(val *JellyfinGroupStateType) *NullableJellyfinGroupStateType {
	return &NullableJellyfinGroupStateType{value: val, isSet: true}
}

func (v NullableJellyfinGroupStateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinGroupStateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

