/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinStartupConfigurationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinStartupConfigurationDto{}

// JellyfinStartupConfigurationDto The startup configuration DTO.
type JellyfinStartupConfigurationDto struct {
	// Gets or sets UI language culture.
	UICulture NullableString `json:"UICulture,omitempty"`
	// Gets or sets the metadata country code.
	MetadataCountryCode NullableString `json:"MetadataCountryCode,omitempty"`
	// Gets or sets the preferred language for the metadata.
	PreferredMetadataLanguage NullableString `json:"PreferredMetadataLanguage,omitempty"`
}

// NewJellyfinStartupConfigurationDto instantiates a new JellyfinStartupConfigurationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinStartupConfigurationDto() *JellyfinStartupConfigurationDto {
	this := JellyfinStartupConfigurationDto{}
	return &this
}

// NewJellyfinStartupConfigurationDtoWithDefaults instantiates a new JellyfinStartupConfigurationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinStartupConfigurationDtoWithDefaults() *JellyfinStartupConfigurationDto {
	this := JellyfinStartupConfigurationDto{}
	return &this
}

// GetUICulture returns the UICulture field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinStartupConfigurationDto) GetUICulture() string {
	if o == nil || IsNil(o.UICulture.Get()) {
		var ret string
		return ret
	}
	return *o.UICulture.Get()
}

// GetUICultureOk returns a tuple with the UICulture field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinStartupConfigurationDto) GetUICultureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UICulture.Get(), o.UICulture.IsSet()
}

// HasUICulture returns a boolean if a field has been set.
func (o *JellyfinStartupConfigurationDto) HasUICulture() bool {
	if o != nil && o.UICulture.IsSet() {
		return true
	}

	return false
}

// SetUICulture gets a reference to the given NullableString and assigns it to the UICulture field.
func (o *JellyfinStartupConfigurationDto) SetUICulture(v string) {
	o.UICulture.Set(&v)
}
// SetUICultureNil sets the value for UICulture to be an explicit nil
func (o *JellyfinStartupConfigurationDto) SetUICultureNil() {
	o.UICulture.Set(nil)
}

// UnsetUICulture ensures that no value is present for UICulture, not even an explicit nil
func (o *JellyfinStartupConfigurationDto) UnsetUICulture() {
	o.UICulture.Unset()
}

// GetMetadataCountryCode returns the MetadataCountryCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinStartupConfigurationDto) GetMetadataCountryCode() string {
	if o == nil || IsNil(o.MetadataCountryCode.Get()) {
		var ret string
		return ret
	}
	return *o.MetadataCountryCode.Get()
}

// GetMetadataCountryCodeOk returns a tuple with the MetadataCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinStartupConfigurationDto) GetMetadataCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataCountryCode.Get(), o.MetadataCountryCode.IsSet()
}

// HasMetadataCountryCode returns a boolean if a field has been set.
func (o *JellyfinStartupConfigurationDto) HasMetadataCountryCode() bool {
	if o != nil && o.MetadataCountryCode.IsSet() {
		return true
	}

	return false
}

// SetMetadataCountryCode gets a reference to the given NullableString and assigns it to the MetadataCountryCode field.
func (o *JellyfinStartupConfigurationDto) SetMetadataCountryCode(v string) {
	o.MetadataCountryCode.Set(&v)
}
// SetMetadataCountryCodeNil sets the value for MetadataCountryCode to be an explicit nil
func (o *JellyfinStartupConfigurationDto) SetMetadataCountryCodeNil() {
	o.MetadataCountryCode.Set(nil)
}

// UnsetMetadataCountryCode ensures that no value is present for MetadataCountryCode, not even an explicit nil
func (o *JellyfinStartupConfigurationDto) UnsetMetadataCountryCode() {
	o.MetadataCountryCode.Unset()
}

// GetPreferredMetadataLanguage returns the PreferredMetadataLanguage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinStartupConfigurationDto) GetPreferredMetadataLanguage() string {
	if o == nil || IsNil(o.PreferredMetadataLanguage.Get()) {
		var ret string
		return ret
	}
	return *o.PreferredMetadataLanguage.Get()
}

// GetPreferredMetadataLanguageOk returns a tuple with the PreferredMetadataLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinStartupConfigurationDto) GetPreferredMetadataLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreferredMetadataLanguage.Get(), o.PreferredMetadataLanguage.IsSet()
}

// HasPreferredMetadataLanguage returns a boolean if a field has been set.
func (o *JellyfinStartupConfigurationDto) HasPreferredMetadataLanguage() bool {
	if o != nil && o.PreferredMetadataLanguage.IsSet() {
		return true
	}

	return false
}

// SetPreferredMetadataLanguage gets a reference to the given NullableString and assigns it to the PreferredMetadataLanguage field.
func (o *JellyfinStartupConfigurationDto) SetPreferredMetadataLanguage(v string) {
	o.PreferredMetadataLanguage.Set(&v)
}
// SetPreferredMetadataLanguageNil sets the value for PreferredMetadataLanguage to be an explicit nil
func (o *JellyfinStartupConfigurationDto) SetPreferredMetadataLanguageNil() {
	o.PreferredMetadataLanguage.Set(nil)
}

// UnsetPreferredMetadataLanguage ensures that no value is present for PreferredMetadataLanguage, not even an explicit nil
func (o *JellyfinStartupConfigurationDto) UnsetPreferredMetadataLanguage() {
	o.PreferredMetadataLanguage.Unset()
}

func (o JellyfinStartupConfigurationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinStartupConfigurationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UICulture.IsSet() {
		toSerialize["UICulture"] = o.UICulture.Get()
	}
	if o.MetadataCountryCode.IsSet() {
		toSerialize["MetadataCountryCode"] = o.MetadataCountryCode.Get()
	}
	if o.PreferredMetadataLanguage.IsSet() {
		toSerialize["PreferredMetadataLanguage"] = o.PreferredMetadataLanguage.Get()
	}
	return toSerialize, nil
}

type NullableJellyfinStartupConfigurationDto struct {
	value *JellyfinStartupConfigurationDto
	isSet bool
}

func (v NullableJellyfinStartupConfigurationDto) Get() *JellyfinStartupConfigurationDto {
	return v.value
}

func (v *NullableJellyfinStartupConfigurationDto) Set(val *JellyfinStartupConfigurationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinStartupConfigurationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinStartupConfigurationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinStartupConfigurationDto(val *JellyfinStartupConfigurationDto) *NullableJellyfinStartupConfigurationDto {
	return &NullableJellyfinStartupConfigurationDto{value: val, isSet: true}
}

func (v NullableJellyfinStartupConfigurationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinStartupConfigurationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


