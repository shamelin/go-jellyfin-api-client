/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinVideo3DFormat the model 'JellyfinVideo3DFormat'
type JellyfinVideo3DFormat string

// List of Video3DFormat
const (
	HALF_SIDE_BY_SIDE JellyfinVideo3DFormat = "HalfSideBySide"
	FULL_SIDE_BY_SIDE JellyfinVideo3DFormat = "FullSideBySide"
	FULL_TOP_AND_BOTTOM JellyfinVideo3DFormat = "FullTopAndBottom"
	HALF_TOP_AND_BOTTOM JellyfinVideo3DFormat = "HalfTopAndBottom"
	MVC JellyfinVideo3DFormat = "MVC"
)

// All allowed values of JellyfinVideo3DFormat enum
var AllowedJellyfinVideo3DFormatEnumValues = []JellyfinVideo3DFormat{
	"HalfSideBySide",
	"FullSideBySide",
	"FullTopAndBottom",
	"HalfTopAndBottom",
	"MVC",
}

func (v *JellyfinVideo3DFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinVideo3DFormat(value)
	for _, existing := range AllowedJellyfinVideo3DFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinVideo3DFormat", value)
}

// NewJellyfinVideo3DFormatFromValue returns a pointer to a valid JellyfinVideo3DFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinVideo3DFormatFromValue(v string) (*JellyfinVideo3DFormat, error) {
	ev := JellyfinVideo3DFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinVideo3DFormat: valid values are %v", v, AllowedJellyfinVideo3DFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinVideo3DFormat) IsValid() bool {
	for _, existing := range AllowedJellyfinVideo3DFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Video3DFormat value
func (v JellyfinVideo3DFormat) Ptr() *JellyfinVideo3DFormat {
	return &v
}

type NullableJellyfinVideo3DFormat struct {
	value *JellyfinVideo3DFormat
	isSet bool
}

func (v NullableJellyfinVideo3DFormat) Get() *JellyfinVideo3DFormat {
	return v.value
}

func (v *NullableJellyfinVideo3DFormat) Set(val *JellyfinVideo3DFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinVideo3DFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinVideo3DFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinVideo3DFormat(val *JellyfinVideo3DFormat) *NullableJellyfinVideo3DFormat {
	return &NullableJellyfinVideo3DFormat{value: val, isSet: true}
}

func (v NullableJellyfinVideo3DFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinVideo3DFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

