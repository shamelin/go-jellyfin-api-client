/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"time"
)

// checks if the JellyfinSessionInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinSessionInfoDto{}

// JellyfinSessionInfoDto Session info DTO.
type JellyfinSessionInfoDto struct {
	// Gets or sets the play state.
	PlayState NullableJellyfinPlayerStateInfo `json:"PlayState,omitempty"`
	// Gets or sets the additional users.
	AdditionalUsers []JellyfinSessionUserInfo `json:"AdditionalUsers,omitempty"`
	// Gets or sets the client capabilities.
	Capabilities NullableJellyfinClientCapabilitiesDto `json:"Capabilities,omitempty"`
	// Gets or sets the remote end point.
	RemoteEndPoint NullableString `json:"RemoteEndPoint,omitempty"`
	// Gets or sets the playable media types.
	PlayableMediaTypes []JellyfinMediaType `json:"PlayableMediaTypes,omitempty"`
	// Gets or sets the id.
	Id NullableString `json:"Id,omitempty"`
	// Gets or sets the user id.
	UserId *string `json:"UserId,omitempty"`
	// Gets or sets the username.
	UserName NullableString `json:"UserName,omitempty"`
	// Gets or sets the type of the client.
	Client NullableString `json:"Client,omitempty"`
	// Gets or sets the last activity date.
	LastActivityDate *time.Time `json:"LastActivityDate,omitempty"`
	// Gets or sets the last playback check in.
	LastPlaybackCheckIn *time.Time `json:"LastPlaybackCheckIn,omitempty"`
	// Gets or sets the last paused date.
	LastPausedDate NullableTime `json:"LastPausedDate,omitempty"`
	// Gets or sets the name of the device.
	DeviceName NullableString `json:"DeviceName,omitempty"`
	// Gets or sets the type of the device.
	DeviceType NullableString `json:"DeviceType,omitempty"`
	// Gets or sets the now playing item.
	NowPlayingItem NullableJellyfinBaseItemDto `json:"NowPlayingItem,omitempty"`
	// Gets or sets the now viewing item.
	NowViewingItem NullableJellyfinBaseItemDto `json:"NowViewingItem,omitempty"`
	// Gets or sets the device id.
	DeviceId NullableString `json:"DeviceId,omitempty"`
	// Gets or sets the application version.
	ApplicationVersion NullableString `json:"ApplicationVersion,omitempty"`
	// Gets or sets the transcoding info.
	TranscodingInfo NullableJellyfinTranscodingInfo `json:"TranscodingInfo,omitempty"`
	// Gets or sets a value indicating whether this session is active.
	IsActive *bool `json:"IsActive,omitempty"`
	// Gets or sets a value indicating whether the session supports media control.
	SupportsMediaControl *bool `json:"SupportsMediaControl,omitempty"`
	// Gets or sets a value indicating whether the session supports remote control.
	SupportsRemoteControl *bool `json:"SupportsRemoteControl,omitempty"`
	// Gets or sets the now playing queue.
	NowPlayingQueue []JellyfinQueueItem `json:"NowPlayingQueue,omitempty"`
	// Gets or sets the now playing queue full items.
	NowPlayingQueueFullItems []JellyfinBaseItemDto `json:"NowPlayingQueueFullItems,omitempty"`
	// Gets or sets a value indicating whether the session has a custom device name.
	HasCustomDeviceName *bool `json:"HasCustomDeviceName,omitempty"`
	// Gets or sets the playlist item id.
	PlaylistItemId NullableString `json:"PlaylistItemId,omitempty"`
	// Gets or sets the server id.
	ServerId NullableString `json:"ServerId,omitempty"`
	// Gets or sets the user primary image tag.
	UserPrimaryImageTag NullableString `json:"UserPrimaryImageTag,omitempty"`
	// Gets or sets the supported commands.
	SupportedCommands []JellyfinGeneralCommandType `json:"SupportedCommands,omitempty"`
}

// NewJellyfinSessionInfoDto instantiates a new JellyfinSessionInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinSessionInfoDto() *JellyfinSessionInfoDto {
	this := JellyfinSessionInfoDto{}
	return &this
}

// NewJellyfinSessionInfoDtoWithDefaults instantiates a new JellyfinSessionInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinSessionInfoDtoWithDefaults() *JellyfinSessionInfoDto {
	this := JellyfinSessionInfoDto{}
	return &this
}

// GetPlayState returns the PlayState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetPlayState() JellyfinPlayerStateInfo {
	if o == nil || IsNil(o.PlayState.Get()) {
		var ret JellyfinPlayerStateInfo
		return ret
	}
	return *o.PlayState.Get()
}

// GetPlayStateOk returns a tuple with the PlayState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetPlayStateOk() (*JellyfinPlayerStateInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlayState.Get(), o.PlayState.IsSet()
}

// HasPlayState returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasPlayState() bool {
	if o != nil && o.PlayState.IsSet() {
		return true
	}

	return false
}

// SetPlayState gets a reference to the given NullableJellyfinPlayerStateInfo and assigns it to the PlayState field.
func (o *JellyfinSessionInfoDto) SetPlayState(v JellyfinPlayerStateInfo) {
	o.PlayState.Set(&v)
}
// SetPlayStateNil sets the value for PlayState to be an explicit nil
func (o *JellyfinSessionInfoDto) SetPlayStateNil() {
	o.PlayState.Set(nil)
}

// UnsetPlayState ensures that no value is present for PlayState, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetPlayState() {
	o.PlayState.Unset()
}

// GetAdditionalUsers returns the AdditionalUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetAdditionalUsers() []JellyfinSessionUserInfo {
	if o == nil {
		var ret []JellyfinSessionUserInfo
		return ret
	}
	return o.AdditionalUsers
}

// GetAdditionalUsersOk returns a tuple with the AdditionalUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetAdditionalUsersOk() ([]JellyfinSessionUserInfo, bool) {
	if o == nil || IsNil(o.AdditionalUsers) {
		return nil, false
	}
	return o.AdditionalUsers, true
}

// HasAdditionalUsers returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasAdditionalUsers() bool {
	if o != nil && !IsNil(o.AdditionalUsers) {
		return true
	}

	return false
}

// SetAdditionalUsers gets a reference to the given []JellyfinSessionUserInfo and assigns it to the AdditionalUsers field.
func (o *JellyfinSessionInfoDto) SetAdditionalUsers(v []JellyfinSessionUserInfo) {
	o.AdditionalUsers = v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetCapabilities() JellyfinClientCapabilitiesDto {
	if o == nil || IsNil(o.Capabilities.Get()) {
		var ret JellyfinClientCapabilitiesDto
		return ret
	}
	return *o.Capabilities.Get()
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetCapabilitiesOk() (*JellyfinClientCapabilitiesDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Capabilities.Get(), o.Capabilities.IsSet()
}

// HasCapabilities returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasCapabilities() bool {
	if o != nil && o.Capabilities.IsSet() {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given NullableJellyfinClientCapabilitiesDto and assigns it to the Capabilities field.
func (o *JellyfinSessionInfoDto) SetCapabilities(v JellyfinClientCapabilitiesDto) {
	o.Capabilities.Set(&v)
}
// SetCapabilitiesNil sets the value for Capabilities to be an explicit nil
func (o *JellyfinSessionInfoDto) SetCapabilitiesNil() {
	o.Capabilities.Set(nil)
}

// UnsetCapabilities ensures that no value is present for Capabilities, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetCapabilities() {
	o.Capabilities.Unset()
}

// GetRemoteEndPoint returns the RemoteEndPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetRemoteEndPoint() string {
	if o == nil || IsNil(o.RemoteEndPoint.Get()) {
		var ret string
		return ret
	}
	return *o.RemoteEndPoint.Get()
}

// GetRemoteEndPointOk returns a tuple with the RemoteEndPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetRemoteEndPointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoteEndPoint.Get(), o.RemoteEndPoint.IsSet()
}

// HasRemoteEndPoint returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasRemoteEndPoint() bool {
	if o != nil && o.RemoteEndPoint.IsSet() {
		return true
	}

	return false
}

// SetRemoteEndPoint gets a reference to the given NullableString and assigns it to the RemoteEndPoint field.
func (o *JellyfinSessionInfoDto) SetRemoteEndPoint(v string) {
	o.RemoteEndPoint.Set(&v)
}
// SetRemoteEndPointNil sets the value for RemoteEndPoint to be an explicit nil
func (o *JellyfinSessionInfoDto) SetRemoteEndPointNil() {
	o.RemoteEndPoint.Set(nil)
}

// UnsetRemoteEndPoint ensures that no value is present for RemoteEndPoint, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetRemoteEndPoint() {
	o.RemoteEndPoint.Unset()
}

// GetPlayableMediaTypes returns the PlayableMediaTypes field value if set, zero value otherwise.
func (o *JellyfinSessionInfoDto) GetPlayableMediaTypes() []JellyfinMediaType {
	if o == nil || IsNil(o.PlayableMediaTypes) {
		var ret []JellyfinMediaType
		return ret
	}
	return o.PlayableMediaTypes
}

// GetPlayableMediaTypesOk returns a tuple with the PlayableMediaTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSessionInfoDto) GetPlayableMediaTypesOk() ([]JellyfinMediaType, bool) {
	if o == nil || IsNil(o.PlayableMediaTypes) {
		return nil, false
	}
	return o.PlayableMediaTypes, true
}

// HasPlayableMediaTypes returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasPlayableMediaTypes() bool {
	if o != nil && !IsNil(o.PlayableMediaTypes) {
		return true
	}

	return false
}

// SetPlayableMediaTypes gets a reference to the given []JellyfinMediaType and assigns it to the PlayableMediaTypes field.
func (o *JellyfinSessionInfoDto) SetPlayableMediaTypes(v []JellyfinMediaType) {
	o.PlayableMediaTypes = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *JellyfinSessionInfoDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *JellyfinSessionInfoDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetId() {
	o.Id.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *JellyfinSessionInfoDto) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSessionInfoDto) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *JellyfinSessionInfoDto) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetUserName() string {
	if o == nil || IsNil(o.UserName.Get()) {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *JellyfinSessionInfoDto) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *JellyfinSessionInfoDto) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetUserName() {
	o.UserName.Unset()
}

// GetClient returns the Client field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetClient() string {
	if o == nil || IsNil(o.Client.Get()) {
		var ret string
		return ret
	}
	return *o.Client.Get()
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetClientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Client.Get(), o.Client.IsSet()
}

// HasClient returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasClient() bool {
	if o != nil && o.Client.IsSet() {
		return true
	}

	return false
}

// SetClient gets a reference to the given NullableString and assigns it to the Client field.
func (o *JellyfinSessionInfoDto) SetClient(v string) {
	o.Client.Set(&v)
}
// SetClientNil sets the value for Client to be an explicit nil
func (o *JellyfinSessionInfoDto) SetClientNil() {
	o.Client.Set(nil)
}

// UnsetClient ensures that no value is present for Client, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetClient() {
	o.Client.Unset()
}

// GetLastActivityDate returns the LastActivityDate field value if set, zero value otherwise.
func (o *JellyfinSessionInfoDto) GetLastActivityDate() time.Time {
	if o == nil || IsNil(o.LastActivityDate) {
		var ret time.Time
		return ret
	}
	return *o.LastActivityDate
}

// GetLastActivityDateOk returns a tuple with the LastActivityDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSessionInfoDto) GetLastActivityDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastActivityDate) {
		return nil, false
	}
	return o.LastActivityDate, true
}

// HasLastActivityDate returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasLastActivityDate() bool {
	if o != nil && !IsNil(o.LastActivityDate) {
		return true
	}

	return false
}

// SetLastActivityDate gets a reference to the given time.Time and assigns it to the LastActivityDate field.
func (o *JellyfinSessionInfoDto) SetLastActivityDate(v time.Time) {
	o.LastActivityDate = &v
}

// GetLastPlaybackCheckIn returns the LastPlaybackCheckIn field value if set, zero value otherwise.
func (o *JellyfinSessionInfoDto) GetLastPlaybackCheckIn() time.Time {
	if o == nil || IsNil(o.LastPlaybackCheckIn) {
		var ret time.Time
		return ret
	}
	return *o.LastPlaybackCheckIn
}

// GetLastPlaybackCheckInOk returns a tuple with the LastPlaybackCheckIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSessionInfoDto) GetLastPlaybackCheckInOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPlaybackCheckIn) {
		return nil, false
	}
	return o.LastPlaybackCheckIn, true
}

// HasLastPlaybackCheckIn returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasLastPlaybackCheckIn() bool {
	if o != nil && !IsNil(o.LastPlaybackCheckIn) {
		return true
	}

	return false
}

// SetLastPlaybackCheckIn gets a reference to the given time.Time and assigns it to the LastPlaybackCheckIn field.
func (o *JellyfinSessionInfoDto) SetLastPlaybackCheckIn(v time.Time) {
	o.LastPlaybackCheckIn = &v
}

// GetLastPausedDate returns the LastPausedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetLastPausedDate() time.Time {
	if o == nil || IsNil(o.LastPausedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastPausedDate.Get()
}

// GetLastPausedDateOk returns a tuple with the LastPausedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetLastPausedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastPausedDate.Get(), o.LastPausedDate.IsSet()
}

// HasLastPausedDate returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasLastPausedDate() bool {
	if o != nil && o.LastPausedDate.IsSet() {
		return true
	}

	return false
}

// SetLastPausedDate gets a reference to the given NullableTime and assigns it to the LastPausedDate field.
func (o *JellyfinSessionInfoDto) SetLastPausedDate(v time.Time) {
	o.LastPausedDate.Set(&v)
}
// SetLastPausedDateNil sets the value for LastPausedDate to be an explicit nil
func (o *JellyfinSessionInfoDto) SetLastPausedDateNil() {
	o.LastPausedDate.Set(nil)
}

// UnsetLastPausedDate ensures that no value is present for LastPausedDate, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetLastPausedDate() {
	o.LastPausedDate.Unset()
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceName.Get()
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetDeviceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceName.Get(), o.DeviceName.IsSet()
}

// HasDeviceName returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasDeviceName() bool {
	if o != nil && o.DeviceName.IsSet() {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given NullableString and assigns it to the DeviceName field.
func (o *JellyfinSessionInfoDto) SetDeviceName(v string) {
	o.DeviceName.Set(&v)
}
// SetDeviceNameNil sets the value for DeviceName to be an explicit nil
func (o *JellyfinSessionInfoDto) SetDeviceNameNil() {
	o.DeviceName.Set(nil)
}

// UnsetDeviceName ensures that no value is present for DeviceName, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetDeviceName() {
	o.DeviceName.Unset()
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceType.Get()
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetDeviceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceType.Get(), o.DeviceType.IsSet()
}

// HasDeviceType returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasDeviceType() bool {
	if o != nil && o.DeviceType.IsSet() {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given NullableString and assigns it to the DeviceType field.
func (o *JellyfinSessionInfoDto) SetDeviceType(v string) {
	o.DeviceType.Set(&v)
}
// SetDeviceTypeNil sets the value for DeviceType to be an explicit nil
func (o *JellyfinSessionInfoDto) SetDeviceTypeNil() {
	o.DeviceType.Set(nil)
}

// UnsetDeviceType ensures that no value is present for DeviceType, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetDeviceType() {
	o.DeviceType.Unset()
}

// GetNowPlayingItem returns the NowPlayingItem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetNowPlayingItem() JellyfinBaseItemDto {
	if o == nil || IsNil(o.NowPlayingItem.Get()) {
		var ret JellyfinBaseItemDto
		return ret
	}
	return *o.NowPlayingItem.Get()
}

// GetNowPlayingItemOk returns a tuple with the NowPlayingItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetNowPlayingItemOk() (*JellyfinBaseItemDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.NowPlayingItem.Get(), o.NowPlayingItem.IsSet()
}

// HasNowPlayingItem returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasNowPlayingItem() bool {
	if o != nil && o.NowPlayingItem.IsSet() {
		return true
	}

	return false
}

// SetNowPlayingItem gets a reference to the given NullableJellyfinBaseItemDto and assigns it to the NowPlayingItem field.
func (o *JellyfinSessionInfoDto) SetNowPlayingItem(v JellyfinBaseItemDto) {
	o.NowPlayingItem.Set(&v)
}
// SetNowPlayingItemNil sets the value for NowPlayingItem to be an explicit nil
func (o *JellyfinSessionInfoDto) SetNowPlayingItemNil() {
	o.NowPlayingItem.Set(nil)
}

// UnsetNowPlayingItem ensures that no value is present for NowPlayingItem, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetNowPlayingItem() {
	o.NowPlayingItem.Unset()
}

// GetNowViewingItem returns the NowViewingItem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetNowViewingItem() JellyfinBaseItemDto {
	if o == nil || IsNil(o.NowViewingItem.Get()) {
		var ret JellyfinBaseItemDto
		return ret
	}
	return *o.NowViewingItem.Get()
}

// GetNowViewingItemOk returns a tuple with the NowViewingItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetNowViewingItemOk() (*JellyfinBaseItemDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.NowViewingItem.Get(), o.NowViewingItem.IsSet()
}

// HasNowViewingItem returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasNowViewingItem() bool {
	if o != nil && o.NowViewingItem.IsSet() {
		return true
	}

	return false
}

// SetNowViewingItem gets a reference to the given NullableJellyfinBaseItemDto and assigns it to the NowViewingItem field.
func (o *JellyfinSessionInfoDto) SetNowViewingItem(v JellyfinBaseItemDto) {
	o.NowViewingItem.Set(&v)
}
// SetNowViewingItemNil sets the value for NowViewingItem to be an explicit nil
func (o *JellyfinSessionInfoDto) SetNowViewingItemNil() {
	o.NowViewingItem.Set(nil)
}

// UnsetNowViewingItem ensures that no value is present for NowViewingItem, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetNowViewingItem() {
	o.NowViewingItem.Unset()
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceId.Get()
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceId.Get(), o.DeviceId.IsSet()
}

// HasDeviceId returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasDeviceId() bool {
	if o != nil && o.DeviceId.IsSet() {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given NullableString and assigns it to the DeviceId field.
func (o *JellyfinSessionInfoDto) SetDeviceId(v string) {
	o.DeviceId.Set(&v)
}
// SetDeviceIdNil sets the value for DeviceId to be an explicit nil
func (o *JellyfinSessionInfoDto) SetDeviceIdNil() {
	o.DeviceId.Set(nil)
}

// UnsetDeviceId ensures that no value is present for DeviceId, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetDeviceId() {
	o.DeviceId.Unset()
}

// GetApplicationVersion returns the ApplicationVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetApplicationVersion() string {
	if o == nil || IsNil(o.ApplicationVersion.Get()) {
		var ret string
		return ret
	}
	return *o.ApplicationVersion.Get()
}

// GetApplicationVersionOk returns a tuple with the ApplicationVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetApplicationVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationVersion.Get(), o.ApplicationVersion.IsSet()
}

// HasApplicationVersion returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasApplicationVersion() bool {
	if o != nil && o.ApplicationVersion.IsSet() {
		return true
	}

	return false
}

// SetApplicationVersion gets a reference to the given NullableString and assigns it to the ApplicationVersion field.
func (o *JellyfinSessionInfoDto) SetApplicationVersion(v string) {
	o.ApplicationVersion.Set(&v)
}
// SetApplicationVersionNil sets the value for ApplicationVersion to be an explicit nil
func (o *JellyfinSessionInfoDto) SetApplicationVersionNil() {
	o.ApplicationVersion.Set(nil)
}

// UnsetApplicationVersion ensures that no value is present for ApplicationVersion, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetApplicationVersion() {
	o.ApplicationVersion.Unset()
}

// GetTranscodingInfo returns the TranscodingInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetTranscodingInfo() JellyfinTranscodingInfo {
	if o == nil || IsNil(o.TranscodingInfo.Get()) {
		var ret JellyfinTranscodingInfo
		return ret
	}
	return *o.TranscodingInfo.Get()
}

// GetTranscodingInfoOk returns a tuple with the TranscodingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetTranscodingInfoOk() (*JellyfinTranscodingInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.TranscodingInfo.Get(), o.TranscodingInfo.IsSet()
}

// HasTranscodingInfo returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasTranscodingInfo() bool {
	if o != nil && o.TranscodingInfo.IsSet() {
		return true
	}

	return false
}

// SetTranscodingInfo gets a reference to the given NullableJellyfinTranscodingInfo and assigns it to the TranscodingInfo field.
func (o *JellyfinSessionInfoDto) SetTranscodingInfo(v JellyfinTranscodingInfo) {
	o.TranscodingInfo.Set(&v)
}
// SetTranscodingInfoNil sets the value for TranscodingInfo to be an explicit nil
func (o *JellyfinSessionInfoDto) SetTranscodingInfoNil() {
	o.TranscodingInfo.Set(nil)
}

// UnsetTranscodingInfo ensures that no value is present for TranscodingInfo, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetTranscodingInfo() {
	o.TranscodingInfo.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *JellyfinSessionInfoDto) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSessionInfoDto) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *JellyfinSessionInfoDto) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetSupportsMediaControl returns the SupportsMediaControl field value if set, zero value otherwise.
func (o *JellyfinSessionInfoDto) GetSupportsMediaControl() bool {
	if o == nil || IsNil(o.SupportsMediaControl) {
		var ret bool
		return ret
	}
	return *o.SupportsMediaControl
}

// GetSupportsMediaControlOk returns a tuple with the SupportsMediaControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSessionInfoDto) GetSupportsMediaControlOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsMediaControl) {
		return nil, false
	}
	return o.SupportsMediaControl, true
}

// HasSupportsMediaControl returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasSupportsMediaControl() bool {
	if o != nil && !IsNil(o.SupportsMediaControl) {
		return true
	}

	return false
}

// SetSupportsMediaControl gets a reference to the given bool and assigns it to the SupportsMediaControl field.
func (o *JellyfinSessionInfoDto) SetSupportsMediaControl(v bool) {
	o.SupportsMediaControl = &v
}

// GetSupportsRemoteControl returns the SupportsRemoteControl field value if set, zero value otherwise.
func (o *JellyfinSessionInfoDto) GetSupportsRemoteControl() bool {
	if o == nil || IsNil(o.SupportsRemoteControl) {
		var ret bool
		return ret
	}
	return *o.SupportsRemoteControl
}

// GetSupportsRemoteControlOk returns a tuple with the SupportsRemoteControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSessionInfoDto) GetSupportsRemoteControlOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsRemoteControl) {
		return nil, false
	}
	return o.SupportsRemoteControl, true
}

// HasSupportsRemoteControl returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasSupportsRemoteControl() bool {
	if o != nil && !IsNil(o.SupportsRemoteControl) {
		return true
	}

	return false
}

// SetSupportsRemoteControl gets a reference to the given bool and assigns it to the SupportsRemoteControl field.
func (o *JellyfinSessionInfoDto) SetSupportsRemoteControl(v bool) {
	o.SupportsRemoteControl = &v
}

// GetNowPlayingQueue returns the NowPlayingQueue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetNowPlayingQueue() []JellyfinQueueItem {
	if o == nil {
		var ret []JellyfinQueueItem
		return ret
	}
	return o.NowPlayingQueue
}

// GetNowPlayingQueueOk returns a tuple with the NowPlayingQueue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetNowPlayingQueueOk() ([]JellyfinQueueItem, bool) {
	if o == nil || IsNil(o.NowPlayingQueue) {
		return nil, false
	}
	return o.NowPlayingQueue, true
}

// HasNowPlayingQueue returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasNowPlayingQueue() bool {
	if o != nil && !IsNil(o.NowPlayingQueue) {
		return true
	}

	return false
}

// SetNowPlayingQueue gets a reference to the given []JellyfinQueueItem and assigns it to the NowPlayingQueue field.
func (o *JellyfinSessionInfoDto) SetNowPlayingQueue(v []JellyfinQueueItem) {
	o.NowPlayingQueue = v
}

// GetNowPlayingQueueFullItems returns the NowPlayingQueueFullItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetNowPlayingQueueFullItems() []JellyfinBaseItemDto {
	if o == nil {
		var ret []JellyfinBaseItemDto
		return ret
	}
	return o.NowPlayingQueueFullItems
}

// GetNowPlayingQueueFullItemsOk returns a tuple with the NowPlayingQueueFullItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetNowPlayingQueueFullItemsOk() ([]JellyfinBaseItemDto, bool) {
	if o == nil || IsNil(o.NowPlayingQueueFullItems) {
		return nil, false
	}
	return o.NowPlayingQueueFullItems, true
}

// HasNowPlayingQueueFullItems returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasNowPlayingQueueFullItems() bool {
	if o != nil && !IsNil(o.NowPlayingQueueFullItems) {
		return true
	}

	return false
}

// SetNowPlayingQueueFullItems gets a reference to the given []JellyfinBaseItemDto and assigns it to the NowPlayingQueueFullItems field.
func (o *JellyfinSessionInfoDto) SetNowPlayingQueueFullItems(v []JellyfinBaseItemDto) {
	o.NowPlayingQueueFullItems = v
}

// GetHasCustomDeviceName returns the HasCustomDeviceName field value if set, zero value otherwise.
func (o *JellyfinSessionInfoDto) GetHasCustomDeviceName() bool {
	if o == nil || IsNil(o.HasCustomDeviceName) {
		var ret bool
		return ret
	}
	return *o.HasCustomDeviceName
}

// GetHasCustomDeviceNameOk returns a tuple with the HasCustomDeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSessionInfoDto) GetHasCustomDeviceNameOk() (*bool, bool) {
	if o == nil || IsNil(o.HasCustomDeviceName) {
		return nil, false
	}
	return o.HasCustomDeviceName, true
}

// HasHasCustomDeviceName returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasHasCustomDeviceName() bool {
	if o != nil && !IsNil(o.HasCustomDeviceName) {
		return true
	}

	return false
}

// SetHasCustomDeviceName gets a reference to the given bool and assigns it to the HasCustomDeviceName field.
func (o *JellyfinSessionInfoDto) SetHasCustomDeviceName(v bool) {
	o.HasCustomDeviceName = &v
}

// GetPlaylistItemId returns the PlaylistItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetPlaylistItemId() string {
	if o == nil || IsNil(o.PlaylistItemId.Get()) {
		var ret string
		return ret
	}
	return *o.PlaylistItemId.Get()
}

// GetPlaylistItemIdOk returns a tuple with the PlaylistItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetPlaylistItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlaylistItemId.Get(), o.PlaylistItemId.IsSet()
}

// HasPlaylistItemId returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasPlaylistItemId() bool {
	if o != nil && o.PlaylistItemId.IsSet() {
		return true
	}

	return false
}

// SetPlaylistItemId gets a reference to the given NullableString and assigns it to the PlaylistItemId field.
func (o *JellyfinSessionInfoDto) SetPlaylistItemId(v string) {
	o.PlaylistItemId.Set(&v)
}
// SetPlaylistItemIdNil sets the value for PlaylistItemId to be an explicit nil
func (o *JellyfinSessionInfoDto) SetPlaylistItemIdNil() {
	o.PlaylistItemId.Set(nil)
}

// UnsetPlaylistItemId ensures that no value is present for PlaylistItemId, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetPlaylistItemId() {
	o.PlaylistItemId.Unset()
}

// GetServerId returns the ServerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetServerId() string {
	if o == nil || IsNil(o.ServerId.Get()) {
		var ret string
		return ret
	}
	return *o.ServerId.Get()
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetServerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerId.Get(), o.ServerId.IsSet()
}

// HasServerId returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasServerId() bool {
	if o != nil && o.ServerId.IsSet() {
		return true
	}

	return false
}

// SetServerId gets a reference to the given NullableString and assigns it to the ServerId field.
func (o *JellyfinSessionInfoDto) SetServerId(v string) {
	o.ServerId.Set(&v)
}
// SetServerIdNil sets the value for ServerId to be an explicit nil
func (o *JellyfinSessionInfoDto) SetServerIdNil() {
	o.ServerId.Set(nil)
}

// UnsetServerId ensures that no value is present for ServerId, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetServerId() {
	o.ServerId.Unset()
}

// GetUserPrimaryImageTag returns the UserPrimaryImageTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinSessionInfoDto) GetUserPrimaryImageTag() string {
	if o == nil || IsNil(o.UserPrimaryImageTag.Get()) {
		var ret string
		return ret
	}
	return *o.UserPrimaryImageTag.Get()
}

// GetUserPrimaryImageTagOk returns a tuple with the UserPrimaryImageTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinSessionInfoDto) GetUserPrimaryImageTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserPrimaryImageTag.Get(), o.UserPrimaryImageTag.IsSet()
}

// HasUserPrimaryImageTag returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasUserPrimaryImageTag() bool {
	if o != nil && o.UserPrimaryImageTag.IsSet() {
		return true
	}

	return false
}

// SetUserPrimaryImageTag gets a reference to the given NullableString and assigns it to the UserPrimaryImageTag field.
func (o *JellyfinSessionInfoDto) SetUserPrimaryImageTag(v string) {
	o.UserPrimaryImageTag.Set(&v)
}
// SetUserPrimaryImageTagNil sets the value for UserPrimaryImageTag to be an explicit nil
func (o *JellyfinSessionInfoDto) SetUserPrimaryImageTagNil() {
	o.UserPrimaryImageTag.Set(nil)
}

// UnsetUserPrimaryImageTag ensures that no value is present for UserPrimaryImageTag, not even an explicit nil
func (o *JellyfinSessionInfoDto) UnsetUserPrimaryImageTag() {
	o.UserPrimaryImageTag.Unset()
}

// GetSupportedCommands returns the SupportedCommands field value if set, zero value otherwise.
func (o *JellyfinSessionInfoDto) GetSupportedCommands() []JellyfinGeneralCommandType {
	if o == nil || IsNil(o.SupportedCommands) {
		var ret []JellyfinGeneralCommandType
		return ret
	}
	return o.SupportedCommands
}

// GetSupportedCommandsOk returns a tuple with the SupportedCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSessionInfoDto) GetSupportedCommandsOk() ([]JellyfinGeneralCommandType, bool) {
	if o == nil || IsNil(o.SupportedCommands) {
		return nil, false
	}
	return o.SupportedCommands, true
}

// HasSupportedCommands returns a boolean if a field has been set.
func (o *JellyfinSessionInfoDto) HasSupportedCommands() bool {
	if o != nil && !IsNil(o.SupportedCommands) {
		return true
	}

	return false
}

// SetSupportedCommands gets a reference to the given []JellyfinGeneralCommandType and assigns it to the SupportedCommands field.
func (o *JellyfinSessionInfoDto) SetSupportedCommands(v []JellyfinGeneralCommandType) {
	o.SupportedCommands = v
}

func (o JellyfinSessionInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinSessionInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PlayState.IsSet() {
		toSerialize["PlayState"] = o.PlayState.Get()
	}
	if o.AdditionalUsers != nil {
		toSerialize["AdditionalUsers"] = o.AdditionalUsers
	}
	if o.Capabilities.IsSet() {
		toSerialize["Capabilities"] = o.Capabilities.Get()
	}
	if o.RemoteEndPoint.IsSet() {
		toSerialize["RemoteEndPoint"] = o.RemoteEndPoint.Get()
	}
	if !IsNil(o.PlayableMediaTypes) {
		toSerialize["PlayableMediaTypes"] = o.PlayableMediaTypes
	}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if !IsNil(o.UserId) {
		toSerialize["UserId"] = o.UserId
	}
	if o.UserName.IsSet() {
		toSerialize["UserName"] = o.UserName.Get()
	}
	if o.Client.IsSet() {
		toSerialize["Client"] = o.Client.Get()
	}
	if !IsNil(o.LastActivityDate) {
		toSerialize["LastActivityDate"] = o.LastActivityDate
	}
	if !IsNil(o.LastPlaybackCheckIn) {
		toSerialize["LastPlaybackCheckIn"] = o.LastPlaybackCheckIn
	}
	if o.LastPausedDate.IsSet() {
		toSerialize["LastPausedDate"] = o.LastPausedDate.Get()
	}
	if o.DeviceName.IsSet() {
		toSerialize["DeviceName"] = o.DeviceName.Get()
	}
	if o.DeviceType.IsSet() {
		toSerialize["DeviceType"] = o.DeviceType.Get()
	}
	if o.NowPlayingItem.IsSet() {
		toSerialize["NowPlayingItem"] = o.NowPlayingItem.Get()
	}
	if o.NowViewingItem.IsSet() {
		toSerialize["NowViewingItem"] = o.NowViewingItem.Get()
	}
	if o.DeviceId.IsSet() {
		toSerialize["DeviceId"] = o.DeviceId.Get()
	}
	if o.ApplicationVersion.IsSet() {
		toSerialize["ApplicationVersion"] = o.ApplicationVersion.Get()
	}
	if o.TranscodingInfo.IsSet() {
		toSerialize["TranscodingInfo"] = o.TranscodingInfo.Get()
	}
	if !IsNil(o.IsActive) {
		toSerialize["IsActive"] = o.IsActive
	}
	if !IsNil(o.SupportsMediaControl) {
		toSerialize["SupportsMediaControl"] = o.SupportsMediaControl
	}
	if !IsNil(o.SupportsRemoteControl) {
		toSerialize["SupportsRemoteControl"] = o.SupportsRemoteControl
	}
	if o.NowPlayingQueue != nil {
		toSerialize["NowPlayingQueue"] = o.NowPlayingQueue
	}
	if o.NowPlayingQueueFullItems != nil {
		toSerialize["NowPlayingQueueFullItems"] = o.NowPlayingQueueFullItems
	}
	if !IsNil(o.HasCustomDeviceName) {
		toSerialize["HasCustomDeviceName"] = o.HasCustomDeviceName
	}
	if o.PlaylistItemId.IsSet() {
		toSerialize["PlaylistItemId"] = o.PlaylistItemId.Get()
	}
	if o.ServerId.IsSet() {
		toSerialize["ServerId"] = o.ServerId.Get()
	}
	if o.UserPrimaryImageTag.IsSet() {
		toSerialize["UserPrimaryImageTag"] = o.UserPrimaryImageTag.Get()
	}
	if !IsNil(o.SupportedCommands) {
		toSerialize["SupportedCommands"] = o.SupportedCommands
	}
	return toSerialize, nil
}

type NullableJellyfinSessionInfoDto struct {
	value *JellyfinSessionInfoDto
	isSet bool
}

func (v NullableJellyfinSessionInfoDto) Get() *JellyfinSessionInfoDto {
	return v.value
}

func (v *NullableJellyfinSessionInfoDto) Set(val *JellyfinSessionInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinSessionInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinSessionInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinSessionInfoDto(val *JellyfinSessionInfoDto) *NullableJellyfinSessionInfoDto {
	return &NullableJellyfinSessionInfoDto{value: val, isSet: true}
}

func (v NullableJellyfinSessionInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinSessionInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


