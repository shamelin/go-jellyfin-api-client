/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinLiveStreamResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinLiveStreamResponse{}

// JellyfinLiveStreamResponse struct for JellyfinLiveStreamResponse
type JellyfinLiveStreamResponse struct {
	MediaSource *JellyfinMediaSourceInfo `json:"MediaSource,omitempty"`
}

// NewJellyfinLiveStreamResponse instantiates a new JellyfinLiveStreamResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinLiveStreamResponse() *JellyfinLiveStreamResponse {
	this := JellyfinLiveStreamResponse{}
	return &this
}

// NewJellyfinLiveStreamResponseWithDefaults instantiates a new JellyfinLiveStreamResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinLiveStreamResponseWithDefaults() *JellyfinLiveStreamResponse {
	this := JellyfinLiveStreamResponse{}
	return &this
}

// GetMediaSource returns the MediaSource field value if set, zero value otherwise.
func (o *JellyfinLiveStreamResponse) GetMediaSource() JellyfinMediaSourceInfo {
	if o == nil || IsNil(o.MediaSource) {
		var ret JellyfinMediaSourceInfo
		return ret
	}
	return *o.MediaSource
}

// GetMediaSourceOk returns a tuple with the MediaSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinLiveStreamResponse) GetMediaSourceOk() (*JellyfinMediaSourceInfo, bool) {
	if o == nil || IsNil(o.MediaSource) {
		return nil, false
	}
	return o.MediaSource, true
}

// HasMediaSource returns a boolean if a field has been set.
func (o *JellyfinLiveStreamResponse) HasMediaSource() bool {
	if o != nil && !IsNil(o.MediaSource) {
		return true
	}

	return false
}

// SetMediaSource gets a reference to the given JellyfinMediaSourceInfo and assigns it to the MediaSource field.
func (o *JellyfinLiveStreamResponse) SetMediaSource(v JellyfinMediaSourceInfo) {
	o.MediaSource = &v
}

func (o JellyfinLiveStreamResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinLiveStreamResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MediaSource) {
		toSerialize["MediaSource"] = o.MediaSource
	}
	return toSerialize, nil
}

type NullableJellyfinLiveStreamResponse struct {
	value *JellyfinLiveStreamResponse
	isSet bool
}

func (v NullableJellyfinLiveStreamResponse) Get() *JellyfinLiveStreamResponse {
	return v.value
}

func (v *NullableJellyfinLiveStreamResponse) Set(val *JellyfinLiveStreamResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinLiveStreamResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinLiveStreamResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinLiveStreamResponse(val *JellyfinLiveStreamResponse) *NullableJellyfinLiveStreamResponse {
	return &NullableJellyfinLiveStreamResponse{value: val, isSet: true}
}

func (v NullableJellyfinLiveStreamResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinLiveStreamResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


