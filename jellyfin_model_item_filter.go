/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinItemFilter Enum ItemFilter.
type JellyfinItemFilter string

// List of ItemFilter
const (
	IS_FOLDER JellyfinItemFilter = "IsFolder"
	IS_NOT_FOLDER JellyfinItemFilter = "IsNotFolder"
	IS_UNPLAYED JellyfinItemFilter = "IsUnplayed"
	IS_PLAYED JellyfinItemFilter = "IsPlayed"
	IS_FAVORITE JellyfinItemFilter = "IsFavorite"
	IS_RESUMABLE JellyfinItemFilter = "IsResumable"
	LIKES JellyfinItemFilter = "Likes"
	DISLIKES JellyfinItemFilter = "Dislikes"
	IS_FAVORITE_OR_LIKES JellyfinItemFilter = "IsFavoriteOrLikes"
)

// All allowed values of JellyfinItemFilter enum
var AllowedJellyfinItemFilterEnumValues = []JellyfinItemFilter{
	"IsFolder",
	"IsNotFolder",
	"IsUnplayed",
	"IsPlayed",
	"IsFavorite",
	"IsResumable",
	"Likes",
	"Dislikes",
	"IsFavoriteOrLikes",
}

func (v *JellyfinItemFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinItemFilter(value)
	for _, existing := range AllowedJellyfinItemFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinItemFilter", value)
}

// NewJellyfinItemFilterFromValue returns a pointer to a valid JellyfinItemFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinItemFilterFromValue(v string) (*JellyfinItemFilter, error) {
	ev := JellyfinItemFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinItemFilter: valid values are %v", v, AllowedJellyfinItemFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinItemFilter) IsValid() bool {
	for _, existing := range AllowedJellyfinItemFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ItemFilter value
func (v JellyfinItemFilter) Ptr() *JellyfinItemFilter {
	return &v
}

type NullableJellyfinItemFilter struct {
	value *JellyfinItemFilter
	isSet bool
}

func (v NullableJellyfinItemFilter) Get() *JellyfinItemFilter {
	return v.value
}

func (v *NullableJellyfinItemFilter) Set(val *JellyfinItemFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinItemFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinItemFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinItemFilter(val *JellyfinItemFilter) *NullableJellyfinItemFilter {
	return &NullableJellyfinItemFilter{value: val, isSet: true}
}

func (v NullableJellyfinItemFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinItemFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

