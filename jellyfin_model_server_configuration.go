/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinServerConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinServerConfiguration{}

// JellyfinServerConfiguration Represents the server configuration.
type JellyfinServerConfiguration struct {
	// Gets or sets the number of days we should retain log files.
	LogFileRetentionDays *int32 `json:"LogFileRetentionDays,omitempty"`
	// Gets or sets a value indicating whether this instance is first run.
	IsStartupWizardCompleted *bool `json:"IsStartupWizardCompleted,omitempty"`
	// Gets or sets the cache path.
	CachePath NullableString `json:"CachePath,omitempty"`
	// Gets or sets the last known version that was ran using the configuration.
	PreviousVersion NullableString `json:"PreviousVersion,omitempty"`
	// Gets or sets the stringified PreviousVersion to be stored/loaded,  because System.Version itself isn't xml-serializable.
	PreviousVersionStr NullableString `json:"PreviousVersionStr,omitempty"`
	// Gets or sets a value indicating whether to enable prometheus metrics exporting.
	EnableMetrics *bool `json:"EnableMetrics,omitempty"`
	EnableNormalizedItemByNameIds *bool `json:"EnableNormalizedItemByNameIds,omitempty"`
	// Gets or sets a value indicating whether this instance is port authorized.
	IsPortAuthorized *bool `json:"IsPortAuthorized,omitempty"`
	// Gets or sets a value indicating whether quick connect is available for use on this server.
	QuickConnectAvailable *bool `json:"QuickConnectAvailable,omitempty"`
	// Gets or sets a value indicating whether [enable case sensitive item ids].
	EnableCaseSensitiveItemIds *bool `json:"EnableCaseSensitiveItemIds,omitempty"`
	DisableLiveTvChannelUserDataName *bool `json:"DisableLiveTvChannelUserDataName,omitempty"`
	// Gets or sets the metadata path.
	MetadataPath *string `json:"MetadataPath,omitempty"`
	// Gets or sets the preferred metadata language.
	PreferredMetadataLanguage *string `json:"PreferredMetadataLanguage,omitempty"`
	// Gets or sets the metadata country code.
	MetadataCountryCode *string `json:"MetadataCountryCode,omitempty"`
	// Gets or sets characters to be replaced with a ' ' in strings to create a sort name.
	SortReplaceCharacters []string `json:"SortReplaceCharacters,omitempty"`
	// Gets or sets characters to be removed from strings to create a sort name.
	SortRemoveCharacters []string `json:"SortRemoveCharacters,omitempty"`
	// Gets or sets words to be removed from strings to create a sort name.
	SortRemoveWords []string `json:"SortRemoveWords,omitempty"`
	// Gets or sets the minimum percentage of an item that must be played in order for playstate to be updated.
	MinResumePct *int32 `json:"MinResumePct,omitempty"`
	// Gets or sets the maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
	MaxResumePct *int32 `json:"MaxResumePct,omitempty"`
	// Gets or sets the minimum duration that an item must have in order to be eligible for playstate updates..
	MinResumeDurationSeconds *int32 `json:"MinResumeDurationSeconds,omitempty"`
	// Gets or sets the minimum minutes of a book that must be played in order for playstate to be updated.
	MinAudiobookResume *int32 `json:"MinAudiobookResume,omitempty"`
	// Gets or sets the remaining minutes of a book that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
	MaxAudiobookResume *int32 `json:"MaxAudiobookResume,omitempty"`
	// Gets or sets the threshold in minutes after a inactive session gets closed automatically.  If set to 0 the check for inactive sessions gets disabled.
	InactiveSessionThreshold *int32 `json:"InactiveSessionThreshold,omitempty"`
	// Gets or sets the delay in seconds that we will wait after a file system change to try and discover what has been added/removed  Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several  different directories and files.
	LibraryMonitorDelay *int32 `json:"LibraryMonitorDelay,omitempty"`
	// Gets or sets the duration in seconds that we will wait after a library updated event before executing the library changed notification.
	LibraryUpdateDuration *int32 `json:"LibraryUpdateDuration,omitempty"`
	// Gets or sets the image saving convention.
	ImageSavingConvention *JellyfinImageSavingConvention `json:"ImageSavingConvention,omitempty"`
	MetadataOptions []JellyfinMetadataOptions `json:"MetadataOptions,omitempty"`
	SkipDeserializationForBasicTypes *bool `json:"SkipDeserializationForBasicTypes,omitempty"`
	ServerName *string `json:"ServerName,omitempty"`
	UICulture *string `json:"UICulture,omitempty"`
	SaveMetadataHidden *bool `json:"SaveMetadataHidden,omitempty"`
	ContentTypes []JellyfinNameValuePair `json:"ContentTypes,omitempty"`
	RemoteClientBitrateLimit *int32 `json:"RemoteClientBitrateLimit,omitempty"`
	EnableFolderView *bool `json:"EnableFolderView,omitempty"`
	EnableGroupingIntoCollections *bool `json:"EnableGroupingIntoCollections,omitempty"`
	DisplaySpecialsWithinSeasons *bool `json:"DisplaySpecialsWithinSeasons,omitempty"`
	CodecsUsed []string `json:"CodecsUsed,omitempty"`
	PluginRepositories []JellyfinRepositoryInfo `json:"PluginRepositories,omitempty"`
	EnableExternalContentInSuggestions *bool `json:"EnableExternalContentInSuggestions,omitempty"`
	ImageExtractionTimeoutMs *int32 `json:"ImageExtractionTimeoutMs,omitempty"`
	PathSubstitutions []JellyfinPathSubstitution `json:"PathSubstitutions,omitempty"`
	// Gets or sets a value indicating whether slow server responses should be logged as a warning.
	EnableSlowResponseWarning *bool `json:"EnableSlowResponseWarning,omitempty"`
	// Gets or sets the threshold for the slow response time warning in ms.
	SlowResponseThresholdMs *int64 `json:"SlowResponseThresholdMs,omitempty"`
	// Gets or sets the cors hosts.
	CorsHosts []string `json:"CorsHosts,omitempty"`
	// Gets or sets the number of days we should retain activity logs.
	ActivityLogRetentionDays NullableInt32 `json:"ActivityLogRetentionDays,omitempty"`
	// Gets or sets the how the library scan fans out.
	LibraryScanFanoutConcurrency *int32 `json:"LibraryScanFanoutConcurrency,omitempty"`
	// Gets or sets the how many metadata refreshes can run concurrently.
	LibraryMetadataRefreshConcurrency *int32 `json:"LibraryMetadataRefreshConcurrency,omitempty"`
	// Gets or sets a value indicating whether older plugins should automatically be deleted from the plugin folder.
	RemoveOldPlugins *bool `json:"RemoveOldPlugins,omitempty"`
	// Gets or sets a value indicating whether clients should be allowed to upload logs.
	AllowClientLogUpload *bool `json:"AllowClientLogUpload,omitempty"`
	// Gets or sets the dummy chapter duration in seconds, use 0 (zero) or less to disable generation alltogether.
	DummyChapterDuration *int32 `json:"DummyChapterDuration,omitempty"`
	// Gets or sets the chapter image resolution.
	ChapterImageResolution *JellyfinImageResolution `json:"ChapterImageResolution,omitempty"`
	// Gets or sets the limit for parallel image encoding.
	ParallelImageEncodingLimit *int32 `json:"ParallelImageEncodingLimit,omitempty"`
	// Gets or sets the list of cast receiver applications.
	CastReceiverApplications []JellyfinCastReceiverApplication `json:"CastReceiverApplications,omitempty"`
	// Gets or sets the trickplay options.
	TrickplayOptions *JellyfinTrickplayOptions `json:"TrickplayOptions,omitempty"`
}

// NewJellyfinServerConfiguration instantiates a new JellyfinServerConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinServerConfiguration() *JellyfinServerConfiguration {
	this := JellyfinServerConfiguration{}
	return &this
}

// NewJellyfinServerConfigurationWithDefaults instantiates a new JellyfinServerConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinServerConfigurationWithDefaults() *JellyfinServerConfiguration {
	this := JellyfinServerConfiguration{}
	return &this
}

// GetLogFileRetentionDays returns the LogFileRetentionDays field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetLogFileRetentionDays() int32 {
	if o == nil || IsNil(o.LogFileRetentionDays) {
		var ret int32
		return ret
	}
	return *o.LogFileRetentionDays
}

// GetLogFileRetentionDaysOk returns a tuple with the LogFileRetentionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetLogFileRetentionDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.LogFileRetentionDays) {
		return nil, false
	}
	return o.LogFileRetentionDays, true
}

// HasLogFileRetentionDays returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasLogFileRetentionDays() bool {
	if o != nil && !IsNil(o.LogFileRetentionDays) {
		return true
	}

	return false
}

// SetLogFileRetentionDays gets a reference to the given int32 and assigns it to the LogFileRetentionDays field.
func (o *JellyfinServerConfiguration) SetLogFileRetentionDays(v int32) {
	o.LogFileRetentionDays = &v
}

// GetIsStartupWizardCompleted returns the IsStartupWizardCompleted field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetIsStartupWizardCompleted() bool {
	if o == nil || IsNil(o.IsStartupWizardCompleted) {
		var ret bool
		return ret
	}
	return *o.IsStartupWizardCompleted
}

// GetIsStartupWizardCompletedOk returns a tuple with the IsStartupWizardCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetIsStartupWizardCompletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStartupWizardCompleted) {
		return nil, false
	}
	return o.IsStartupWizardCompleted, true
}

// HasIsStartupWizardCompleted returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasIsStartupWizardCompleted() bool {
	if o != nil && !IsNil(o.IsStartupWizardCompleted) {
		return true
	}

	return false
}

// SetIsStartupWizardCompleted gets a reference to the given bool and assigns it to the IsStartupWizardCompleted field.
func (o *JellyfinServerConfiguration) SetIsStartupWizardCompleted(v bool) {
	o.IsStartupWizardCompleted = &v
}

// GetCachePath returns the CachePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinServerConfiguration) GetCachePath() string {
	if o == nil || IsNil(o.CachePath.Get()) {
		var ret string
		return ret
	}
	return *o.CachePath.Get()
}

// GetCachePathOk returns a tuple with the CachePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinServerConfiguration) GetCachePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CachePath.Get(), o.CachePath.IsSet()
}

// HasCachePath returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasCachePath() bool {
	if o != nil && o.CachePath.IsSet() {
		return true
	}

	return false
}

// SetCachePath gets a reference to the given NullableString and assigns it to the CachePath field.
func (o *JellyfinServerConfiguration) SetCachePath(v string) {
	o.CachePath.Set(&v)
}
// SetCachePathNil sets the value for CachePath to be an explicit nil
func (o *JellyfinServerConfiguration) SetCachePathNil() {
	o.CachePath.Set(nil)
}

// UnsetCachePath ensures that no value is present for CachePath, not even an explicit nil
func (o *JellyfinServerConfiguration) UnsetCachePath() {
	o.CachePath.Unset()
}

// GetPreviousVersion returns the PreviousVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinServerConfiguration) GetPreviousVersion() string {
	if o == nil || IsNil(o.PreviousVersion.Get()) {
		var ret string
		return ret
	}
	return *o.PreviousVersion.Get()
}

// GetPreviousVersionOk returns a tuple with the PreviousVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinServerConfiguration) GetPreviousVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreviousVersion.Get(), o.PreviousVersion.IsSet()
}

// HasPreviousVersion returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasPreviousVersion() bool {
	if o != nil && o.PreviousVersion.IsSet() {
		return true
	}

	return false
}

// SetPreviousVersion gets a reference to the given NullableString and assigns it to the PreviousVersion field.
func (o *JellyfinServerConfiguration) SetPreviousVersion(v string) {
	o.PreviousVersion.Set(&v)
}
// SetPreviousVersionNil sets the value for PreviousVersion to be an explicit nil
func (o *JellyfinServerConfiguration) SetPreviousVersionNil() {
	o.PreviousVersion.Set(nil)
}

// UnsetPreviousVersion ensures that no value is present for PreviousVersion, not even an explicit nil
func (o *JellyfinServerConfiguration) UnsetPreviousVersion() {
	o.PreviousVersion.Unset()
}

// GetPreviousVersionStr returns the PreviousVersionStr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinServerConfiguration) GetPreviousVersionStr() string {
	if o == nil || IsNil(o.PreviousVersionStr.Get()) {
		var ret string
		return ret
	}
	return *o.PreviousVersionStr.Get()
}

// GetPreviousVersionStrOk returns a tuple with the PreviousVersionStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinServerConfiguration) GetPreviousVersionStrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreviousVersionStr.Get(), o.PreviousVersionStr.IsSet()
}

// HasPreviousVersionStr returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasPreviousVersionStr() bool {
	if o != nil && o.PreviousVersionStr.IsSet() {
		return true
	}

	return false
}

// SetPreviousVersionStr gets a reference to the given NullableString and assigns it to the PreviousVersionStr field.
func (o *JellyfinServerConfiguration) SetPreviousVersionStr(v string) {
	o.PreviousVersionStr.Set(&v)
}
// SetPreviousVersionStrNil sets the value for PreviousVersionStr to be an explicit nil
func (o *JellyfinServerConfiguration) SetPreviousVersionStrNil() {
	o.PreviousVersionStr.Set(nil)
}

// UnsetPreviousVersionStr ensures that no value is present for PreviousVersionStr, not even an explicit nil
func (o *JellyfinServerConfiguration) UnsetPreviousVersionStr() {
	o.PreviousVersionStr.Unset()
}

// GetEnableMetrics returns the EnableMetrics field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetEnableMetrics() bool {
	if o == nil || IsNil(o.EnableMetrics) {
		var ret bool
		return ret
	}
	return *o.EnableMetrics
}

// GetEnableMetricsOk returns a tuple with the EnableMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetEnableMetricsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMetrics) {
		return nil, false
	}
	return o.EnableMetrics, true
}

// HasEnableMetrics returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasEnableMetrics() bool {
	if o != nil && !IsNil(o.EnableMetrics) {
		return true
	}

	return false
}

// SetEnableMetrics gets a reference to the given bool and assigns it to the EnableMetrics field.
func (o *JellyfinServerConfiguration) SetEnableMetrics(v bool) {
	o.EnableMetrics = &v
}

// GetEnableNormalizedItemByNameIds returns the EnableNormalizedItemByNameIds field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetEnableNormalizedItemByNameIds() bool {
	if o == nil || IsNil(o.EnableNormalizedItemByNameIds) {
		var ret bool
		return ret
	}
	return *o.EnableNormalizedItemByNameIds
}

// GetEnableNormalizedItemByNameIdsOk returns a tuple with the EnableNormalizedItemByNameIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetEnableNormalizedItemByNameIdsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNormalizedItemByNameIds) {
		return nil, false
	}
	return o.EnableNormalizedItemByNameIds, true
}

// HasEnableNormalizedItemByNameIds returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasEnableNormalizedItemByNameIds() bool {
	if o != nil && !IsNil(o.EnableNormalizedItemByNameIds) {
		return true
	}

	return false
}

// SetEnableNormalizedItemByNameIds gets a reference to the given bool and assigns it to the EnableNormalizedItemByNameIds field.
func (o *JellyfinServerConfiguration) SetEnableNormalizedItemByNameIds(v bool) {
	o.EnableNormalizedItemByNameIds = &v
}

// GetIsPortAuthorized returns the IsPortAuthorized field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetIsPortAuthorized() bool {
	if o == nil || IsNil(o.IsPortAuthorized) {
		var ret bool
		return ret
	}
	return *o.IsPortAuthorized
}

// GetIsPortAuthorizedOk returns a tuple with the IsPortAuthorized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetIsPortAuthorizedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPortAuthorized) {
		return nil, false
	}
	return o.IsPortAuthorized, true
}

// HasIsPortAuthorized returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasIsPortAuthorized() bool {
	if o != nil && !IsNil(o.IsPortAuthorized) {
		return true
	}

	return false
}

// SetIsPortAuthorized gets a reference to the given bool and assigns it to the IsPortAuthorized field.
func (o *JellyfinServerConfiguration) SetIsPortAuthorized(v bool) {
	o.IsPortAuthorized = &v
}

// GetQuickConnectAvailable returns the QuickConnectAvailable field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetQuickConnectAvailable() bool {
	if o == nil || IsNil(o.QuickConnectAvailable) {
		var ret bool
		return ret
	}
	return *o.QuickConnectAvailable
}

// GetQuickConnectAvailableOk returns a tuple with the QuickConnectAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetQuickConnectAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.QuickConnectAvailable) {
		return nil, false
	}
	return o.QuickConnectAvailable, true
}

// HasQuickConnectAvailable returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasQuickConnectAvailable() bool {
	if o != nil && !IsNil(o.QuickConnectAvailable) {
		return true
	}

	return false
}

// SetQuickConnectAvailable gets a reference to the given bool and assigns it to the QuickConnectAvailable field.
func (o *JellyfinServerConfiguration) SetQuickConnectAvailable(v bool) {
	o.QuickConnectAvailable = &v
}

// GetEnableCaseSensitiveItemIds returns the EnableCaseSensitiveItemIds field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetEnableCaseSensitiveItemIds() bool {
	if o == nil || IsNil(o.EnableCaseSensitiveItemIds) {
		var ret bool
		return ret
	}
	return *o.EnableCaseSensitiveItemIds
}

// GetEnableCaseSensitiveItemIdsOk returns a tuple with the EnableCaseSensitiveItemIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetEnableCaseSensitiveItemIdsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCaseSensitiveItemIds) {
		return nil, false
	}
	return o.EnableCaseSensitiveItemIds, true
}

// HasEnableCaseSensitiveItemIds returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasEnableCaseSensitiveItemIds() bool {
	if o != nil && !IsNil(o.EnableCaseSensitiveItemIds) {
		return true
	}

	return false
}

// SetEnableCaseSensitiveItemIds gets a reference to the given bool and assigns it to the EnableCaseSensitiveItemIds field.
func (o *JellyfinServerConfiguration) SetEnableCaseSensitiveItemIds(v bool) {
	o.EnableCaseSensitiveItemIds = &v
}

// GetDisableLiveTvChannelUserDataName returns the DisableLiveTvChannelUserDataName field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetDisableLiveTvChannelUserDataName() bool {
	if o == nil || IsNil(o.DisableLiveTvChannelUserDataName) {
		var ret bool
		return ret
	}
	return *o.DisableLiveTvChannelUserDataName
}

// GetDisableLiveTvChannelUserDataNameOk returns a tuple with the DisableLiveTvChannelUserDataName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetDisableLiveTvChannelUserDataNameOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableLiveTvChannelUserDataName) {
		return nil, false
	}
	return o.DisableLiveTvChannelUserDataName, true
}

// HasDisableLiveTvChannelUserDataName returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasDisableLiveTvChannelUserDataName() bool {
	if o != nil && !IsNil(o.DisableLiveTvChannelUserDataName) {
		return true
	}

	return false
}

// SetDisableLiveTvChannelUserDataName gets a reference to the given bool and assigns it to the DisableLiveTvChannelUserDataName field.
func (o *JellyfinServerConfiguration) SetDisableLiveTvChannelUserDataName(v bool) {
	o.DisableLiveTvChannelUserDataName = &v
}

// GetMetadataPath returns the MetadataPath field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetMetadataPath() string {
	if o == nil || IsNil(o.MetadataPath) {
		var ret string
		return ret
	}
	return *o.MetadataPath
}

// GetMetadataPathOk returns a tuple with the MetadataPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetMetadataPathOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataPath) {
		return nil, false
	}
	return o.MetadataPath, true
}

// HasMetadataPath returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasMetadataPath() bool {
	if o != nil && !IsNil(o.MetadataPath) {
		return true
	}

	return false
}

// SetMetadataPath gets a reference to the given string and assigns it to the MetadataPath field.
func (o *JellyfinServerConfiguration) SetMetadataPath(v string) {
	o.MetadataPath = &v
}

// GetPreferredMetadataLanguage returns the PreferredMetadataLanguage field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetPreferredMetadataLanguage() string {
	if o == nil || IsNil(o.PreferredMetadataLanguage) {
		var ret string
		return ret
	}
	return *o.PreferredMetadataLanguage
}

// GetPreferredMetadataLanguageOk returns a tuple with the PreferredMetadataLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetPreferredMetadataLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredMetadataLanguage) {
		return nil, false
	}
	return o.PreferredMetadataLanguage, true
}

// HasPreferredMetadataLanguage returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasPreferredMetadataLanguage() bool {
	if o != nil && !IsNil(o.PreferredMetadataLanguage) {
		return true
	}

	return false
}

// SetPreferredMetadataLanguage gets a reference to the given string and assigns it to the PreferredMetadataLanguage field.
func (o *JellyfinServerConfiguration) SetPreferredMetadataLanguage(v string) {
	o.PreferredMetadataLanguage = &v
}

// GetMetadataCountryCode returns the MetadataCountryCode field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetMetadataCountryCode() string {
	if o == nil || IsNil(o.MetadataCountryCode) {
		var ret string
		return ret
	}
	return *o.MetadataCountryCode
}

// GetMetadataCountryCodeOk returns a tuple with the MetadataCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetMetadataCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataCountryCode) {
		return nil, false
	}
	return o.MetadataCountryCode, true
}

// HasMetadataCountryCode returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasMetadataCountryCode() bool {
	if o != nil && !IsNil(o.MetadataCountryCode) {
		return true
	}

	return false
}

// SetMetadataCountryCode gets a reference to the given string and assigns it to the MetadataCountryCode field.
func (o *JellyfinServerConfiguration) SetMetadataCountryCode(v string) {
	o.MetadataCountryCode = &v
}

// GetSortReplaceCharacters returns the SortReplaceCharacters field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetSortReplaceCharacters() []string {
	if o == nil || IsNil(o.SortReplaceCharacters) {
		var ret []string
		return ret
	}
	return o.SortReplaceCharacters
}

// GetSortReplaceCharactersOk returns a tuple with the SortReplaceCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetSortReplaceCharactersOk() ([]string, bool) {
	if o == nil || IsNil(o.SortReplaceCharacters) {
		return nil, false
	}
	return o.SortReplaceCharacters, true
}

// HasSortReplaceCharacters returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasSortReplaceCharacters() bool {
	if o != nil && !IsNil(o.SortReplaceCharacters) {
		return true
	}

	return false
}

// SetSortReplaceCharacters gets a reference to the given []string and assigns it to the SortReplaceCharacters field.
func (o *JellyfinServerConfiguration) SetSortReplaceCharacters(v []string) {
	o.SortReplaceCharacters = v
}

// GetSortRemoveCharacters returns the SortRemoveCharacters field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetSortRemoveCharacters() []string {
	if o == nil || IsNil(o.SortRemoveCharacters) {
		var ret []string
		return ret
	}
	return o.SortRemoveCharacters
}

// GetSortRemoveCharactersOk returns a tuple with the SortRemoveCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetSortRemoveCharactersOk() ([]string, bool) {
	if o == nil || IsNil(o.SortRemoveCharacters) {
		return nil, false
	}
	return o.SortRemoveCharacters, true
}

// HasSortRemoveCharacters returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasSortRemoveCharacters() bool {
	if o != nil && !IsNil(o.SortRemoveCharacters) {
		return true
	}

	return false
}

// SetSortRemoveCharacters gets a reference to the given []string and assigns it to the SortRemoveCharacters field.
func (o *JellyfinServerConfiguration) SetSortRemoveCharacters(v []string) {
	o.SortRemoveCharacters = v
}

// GetSortRemoveWords returns the SortRemoveWords field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetSortRemoveWords() []string {
	if o == nil || IsNil(o.SortRemoveWords) {
		var ret []string
		return ret
	}
	return o.SortRemoveWords
}

// GetSortRemoveWordsOk returns a tuple with the SortRemoveWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetSortRemoveWordsOk() ([]string, bool) {
	if o == nil || IsNil(o.SortRemoveWords) {
		return nil, false
	}
	return o.SortRemoveWords, true
}

// HasSortRemoveWords returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasSortRemoveWords() bool {
	if o != nil && !IsNil(o.SortRemoveWords) {
		return true
	}

	return false
}

// SetSortRemoveWords gets a reference to the given []string and assigns it to the SortRemoveWords field.
func (o *JellyfinServerConfiguration) SetSortRemoveWords(v []string) {
	o.SortRemoveWords = v
}

// GetMinResumePct returns the MinResumePct field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetMinResumePct() int32 {
	if o == nil || IsNil(o.MinResumePct) {
		var ret int32
		return ret
	}
	return *o.MinResumePct
}

// GetMinResumePctOk returns a tuple with the MinResumePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetMinResumePctOk() (*int32, bool) {
	if o == nil || IsNil(o.MinResumePct) {
		return nil, false
	}
	return o.MinResumePct, true
}

// HasMinResumePct returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasMinResumePct() bool {
	if o != nil && !IsNil(o.MinResumePct) {
		return true
	}

	return false
}

// SetMinResumePct gets a reference to the given int32 and assigns it to the MinResumePct field.
func (o *JellyfinServerConfiguration) SetMinResumePct(v int32) {
	o.MinResumePct = &v
}

// GetMaxResumePct returns the MaxResumePct field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetMaxResumePct() int32 {
	if o == nil || IsNil(o.MaxResumePct) {
		var ret int32
		return ret
	}
	return *o.MaxResumePct
}

// GetMaxResumePctOk returns a tuple with the MaxResumePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetMaxResumePctOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxResumePct) {
		return nil, false
	}
	return o.MaxResumePct, true
}

// HasMaxResumePct returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasMaxResumePct() bool {
	if o != nil && !IsNil(o.MaxResumePct) {
		return true
	}

	return false
}

// SetMaxResumePct gets a reference to the given int32 and assigns it to the MaxResumePct field.
func (o *JellyfinServerConfiguration) SetMaxResumePct(v int32) {
	o.MaxResumePct = &v
}

// GetMinResumeDurationSeconds returns the MinResumeDurationSeconds field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetMinResumeDurationSeconds() int32 {
	if o == nil || IsNil(o.MinResumeDurationSeconds) {
		var ret int32
		return ret
	}
	return *o.MinResumeDurationSeconds
}

// GetMinResumeDurationSecondsOk returns a tuple with the MinResumeDurationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetMinResumeDurationSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinResumeDurationSeconds) {
		return nil, false
	}
	return o.MinResumeDurationSeconds, true
}

// HasMinResumeDurationSeconds returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasMinResumeDurationSeconds() bool {
	if o != nil && !IsNil(o.MinResumeDurationSeconds) {
		return true
	}

	return false
}

// SetMinResumeDurationSeconds gets a reference to the given int32 and assigns it to the MinResumeDurationSeconds field.
func (o *JellyfinServerConfiguration) SetMinResumeDurationSeconds(v int32) {
	o.MinResumeDurationSeconds = &v
}

// GetMinAudiobookResume returns the MinAudiobookResume field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetMinAudiobookResume() int32 {
	if o == nil || IsNil(o.MinAudiobookResume) {
		var ret int32
		return ret
	}
	return *o.MinAudiobookResume
}

// GetMinAudiobookResumeOk returns a tuple with the MinAudiobookResume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetMinAudiobookResumeOk() (*int32, bool) {
	if o == nil || IsNil(o.MinAudiobookResume) {
		return nil, false
	}
	return o.MinAudiobookResume, true
}

// HasMinAudiobookResume returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasMinAudiobookResume() bool {
	if o != nil && !IsNil(o.MinAudiobookResume) {
		return true
	}

	return false
}

// SetMinAudiobookResume gets a reference to the given int32 and assigns it to the MinAudiobookResume field.
func (o *JellyfinServerConfiguration) SetMinAudiobookResume(v int32) {
	o.MinAudiobookResume = &v
}

// GetMaxAudiobookResume returns the MaxAudiobookResume field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetMaxAudiobookResume() int32 {
	if o == nil || IsNil(o.MaxAudiobookResume) {
		var ret int32
		return ret
	}
	return *o.MaxAudiobookResume
}

// GetMaxAudiobookResumeOk returns a tuple with the MaxAudiobookResume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetMaxAudiobookResumeOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAudiobookResume) {
		return nil, false
	}
	return o.MaxAudiobookResume, true
}

// HasMaxAudiobookResume returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasMaxAudiobookResume() bool {
	if o != nil && !IsNil(o.MaxAudiobookResume) {
		return true
	}

	return false
}

// SetMaxAudiobookResume gets a reference to the given int32 and assigns it to the MaxAudiobookResume field.
func (o *JellyfinServerConfiguration) SetMaxAudiobookResume(v int32) {
	o.MaxAudiobookResume = &v
}

// GetInactiveSessionThreshold returns the InactiveSessionThreshold field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetInactiveSessionThreshold() int32 {
	if o == nil || IsNil(o.InactiveSessionThreshold) {
		var ret int32
		return ret
	}
	return *o.InactiveSessionThreshold
}

// GetInactiveSessionThresholdOk returns a tuple with the InactiveSessionThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetInactiveSessionThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.InactiveSessionThreshold) {
		return nil, false
	}
	return o.InactiveSessionThreshold, true
}

// HasInactiveSessionThreshold returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasInactiveSessionThreshold() bool {
	if o != nil && !IsNil(o.InactiveSessionThreshold) {
		return true
	}

	return false
}

// SetInactiveSessionThreshold gets a reference to the given int32 and assigns it to the InactiveSessionThreshold field.
func (o *JellyfinServerConfiguration) SetInactiveSessionThreshold(v int32) {
	o.InactiveSessionThreshold = &v
}

// GetLibraryMonitorDelay returns the LibraryMonitorDelay field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetLibraryMonitorDelay() int32 {
	if o == nil || IsNil(o.LibraryMonitorDelay) {
		var ret int32
		return ret
	}
	return *o.LibraryMonitorDelay
}

// GetLibraryMonitorDelayOk returns a tuple with the LibraryMonitorDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetLibraryMonitorDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.LibraryMonitorDelay) {
		return nil, false
	}
	return o.LibraryMonitorDelay, true
}

// HasLibraryMonitorDelay returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasLibraryMonitorDelay() bool {
	if o != nil && !IsNil(o.LibraryMonitorDelay) {
		return true
	}

	return false
}

// SetLibraryMonitorDelay gets a reference to the given int32 and assigns it to the LibraryMonitorDelay field.
func (o *JellyfinServerConfiguration) SetLibraryMonitorDelay(v int32) {
	o.LibraryMonitorDelay = &v
}

// GetLibraryUpdateDuration returns the LibraryUpdateDuration field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetLibraryUpdateDuration() int32 {
	if o == nil || IsNil(o.LibraryUpdateDuration) {
		var ret int32
		return ret
	}
	return *o.LibraryUpdateDuration
}

// GetLibraryUpdateDurationOk returns a tuple with the LibraryUpdateDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetLibraryUpdateDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.LibraryUpdateDuration) {
		return nil, false
	}
	return o.LibraryUpdateDuration, true
}

// HasLibraryUpdateDuration returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasLibraryUpdateDuration() bool {
	if o != nil && !IsNil(o.LibraryUpdateDuration) {
		return true
	}

	return false
}

// SetLibraryUpdateDuration gets a reference to the given int32 and assigns it to the LibraryUpdateDuration field.
func (o *JellyfinServerConfiguration) SetLibraryUpdateDuration(v int32) {
	o.LibraryUpdateDuration = &v
}

// GetImageSavingConvention returns the ImageSavingConvention field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetImageSavingConvention() JellyfinImageSavingConvention {
	if o == nil || IsNil(o.ImageSavingConvention) {
		var ret JellyfinImageSavingConvention
		return ret
	}
	return *o.ImageSavingConvention
}

// GetImageSavingConventionOk returns a tuple with the ImageSavingConvention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetImageSavingConventionOk() (*JellyfinImageSavingConvention, bool) {
	if o == nil || IsNil(o.ImageSavingConvention) {
		return nil, false
	}
	return o.ImageSavingConvention, true
}

// HasImageSavingConvention returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasImageSavingConvention() bool {
	if o != nil && !IsNil(o.ImageSavingConvention) {
		return true
	}

	return false
}

// SetImageSavingConvention gets a reference to the given JellyfinImageSavingConvention and assigns it to the ImageSavingConvention field.
func (o *JellyfinServerConfiguration) SetImageSavingConvention(v JellyfinImageSavingConvention) {
	o.ImageSavingConvention = &v
}

// GetMetadataOptions returns the MetadataOptions field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetMetadataOptions() []JellyfinMetadataOptions {
	if o == nil || IsNil(o.MetadataOptions) {
		var ret []JellyfinMetadataOptions
		return ret
	}
	return o.MetadataOptions
}

// GetMetadataOptionsOk returns a tuple with the MetadataOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetMetadataOptionsOk() ([]JellyfinMetadataOptions, bool) {
	if o == nil || IsNil(o.MetadataOptions) {
		return nil, false
	}
	return o.MetadataOptions, true
}

// HasMetadataOptions returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasMetadataOptions() bool {
	if o != nil && !IsNil(o.MetadataOptions) {
		return true
	}

	return false
}

// SetMetadataOptions gets a reference to the given []JellyfinMetadataOptions and assigns it to the MetadataOptions field.
func (o *JellyfinServerConfiguration) SetMetadataOptions(v []JellyfinMetadataOptions) {
	o.MetadataOptions = v
}

// GetSkipDeserializationForBasicTypes returns the SkipDeserializationForBasicTypes field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetSkipDeserializationForBasicTypes() bool {
	if o == nil || IsNil(o.SkipDeserializationForBasicTypes) {
		var ret bool
		return ret
	}
	return *o.SkipDeserializationForBasicTypes
}

// GetSkipDeserializationForBasicTypesOk returns a tuple with the SkipDeserializationForBasicTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetSkipDeserializationForBasicTypesOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipDeserializationForBasicTypes) {
		return nil, false
	}
	return o.SkipDeserializationForBasicTypes, true
}

// HasSkipDeserializationForBasicTypes returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasSkipDeserializationForBasicTypes() bool {
	if o != nil && !IsNil(o.SkipDeserializationForBasicTypes) {
		return true
	}

	return false
}

// SetSkipDeserializationForBasicTypes gets a reference to the given bool and assigns it to the SkipDeserializationForBasicTypes field.
func (o *JellyfinServerConfiguration) SetSkipDeserializationForBasicTypes(v bool) {
	o.SkipDeserializationForBasicTypes = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *JellyfinServerConfiguration) SetServerName(v string) {
	o.ServerName = &v
}

// GetUICulture returns the UICulture field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetUICulture() string {
	if o == nil || IsNil(o.UICulture) {
		var ret string
		return ret
	}
	return *o.UICulture
}

// GetUICultureOk returns a tuple with the UICulture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetUICultureOk() (*string, bool) {
	if o == nil || IsNil(o.UICulture) {
		return nil, false
	}
	return o.UICulture, true
}

// HasUICulture returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasUICulture() bool {
	if o != nil && !IsNil(o.UICulture) {
		return true
	}

	return false
}

// SetUICulture gets a reference to the given string and assigns it to the UICulture field.
func (o *JellyfinServerConfiguration) SetUICulture(v string) {
	o.UICulture = &v
}

// GetSaveMetadataHidden returns the SaveMetadataHidden field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetSaveMetadataHidden() bool {
	if o == nil || IsNil(o.SaveMetadataHidden) {
		var ret bool
		return ret
	}
	return *o.SaveMetadataHidden
}

// GetSaveMetadataHiddenOk returns a tuple with the SaveMetadataHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetSaveMetadataHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveMetadataHidden) {
		return nil, false
	}
	return o.SaveMetadataHidden, true
}

// HasSaveMetadataHidden returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasSaveMetadataHidden() bool {
	if o != nil && !IsNil(o.SaveMetadataHidden) {
		return true
	}

	return false
}

// SetSaveMetadataHidden gets a reference to the given bool and assigns it to the SaveMetadataHidden field.
func (o *JellyfinServerConfiguration) SetSaveMetadataHidden(v bool) {
	o.SaveMetadataHidden = &v
}

// GetContentTypes returns the ContentTypes field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetContentTypes() []JellyfinNameValuePair {
	if o == nil || IsNil(o.ContentTypes) {
		var ret []JellyfinNameValuePair
		return ret
	}
	return o.ContentTypes
}

// GetContentTypesOk returns a tuple with the ContentTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetContentTypesOk() ([]JellyfinNameValuePair, bool) {
	if o == nil || IsNil(o.ContentTypes) {
		return nil, false
	}
	return o.ContentTypes, true
}

// HasContentTypes returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasContentTypes() bool {
	if o != nil && !IsNil(o.ContentTypes) {
		return true
	}

	return false
}

// SetContentTypes gets a reference to the given []JellyfinNameValuePair and assigns it to the ContentTypes field.
func (o *JellyfinServerConfiguration) SetContentTypes(v []JellyfinNameValuePair) {
	o.ContentTypes = v
}

// GetRemoteClientBitrateLimit returns the RemoteClientBitrateLimit field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetRemoteClientBitrateLimit() int32 {
	if o == nil || IsNil(o.RemoteClientBitrateLimit) {
		var ret int32
		return ret
	}
	return *o.RemoteClientBitrateLimit
}

// GetRemoteClientBitrateLimitOk returns a tuple with the RemoteClientBitrateLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetRemoteClientBitrateLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.RemoteClientBitrateLimit) {
		return nil, false
	}
	return o.RemoteClientBitrateLimit, true
}

// HasRemoteClientBitrateLimit returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasRemoteClientBitrateLimit() bool {
	if o != nil && !IsNil(o.RemoteClientBitrateLimit) {
		return true
	}

	return false
}

// SetRemoteClientBitrateLimit gets a reference to the given int32 and assigns it to the RemoteClientBitrateLimit field.
func (o *JellyfinServerConfiguration) SetRemoteClientBitrateLimit(v int32) {
	o.RemoteClientBitrateLimit = &v
}

// GetEnableFolderView returns the EnableFolderView field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetEnableFolderView() bool {
	if o == nil || IsNil(o.EnableFolderView) {
		var ret bool
		return ret
	}
	return *o.EnableFolderView
}

// GetEnableFolderViewOk returns a tuple with the EnableFolderView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetEnableFolderViewOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFolderView) {
		return nil, false
	}
	return o.EnableFolderView, true
}

// HasEnableFolderView returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasEnableFolderView() bool {
	if o != nil && !IsNil(o.EnableFolderView) {
		return true
	}

	return false
}

// SetEnableFolderView gets a reference to the given bool and assigns it to the EnableFolderView field.
func (o *JellyfinServerConfiguration) SetEnableFolderView(v bool) {
	o.EnableFolderView = &v
}

// GetEnableGroupingIntoCollections returns the EnableGroupingIntoCollections field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetEnableGroupingIntoCollections() bool {
	if o == nil || IsNil(o.EnableGroupingIntoCollections) {
		var ret bool
		return ret
	}
	return *o.EnableGroupingIntoCollections
}

// GetEnableGroupingIntoCollectionsOk returns a tuple with the EnableGroupingIntoCollections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetEnableGroupingIntoCollectionsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableGroupingIntoCollections) {
		return nil, false
	}
	return o.EnableGroupingIntoCollections, true
}

// HasEnableGroupingIntoCollections returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasEnableGroupingIntoCollections() bool {
	if o != nil && !IsNil(o.EnableGroupingIntoCollections) {
		return true
	}

	return false
}

// SetEnableGroupingIntoCollections gets a reference to the given bool and assigns it to the EnableGroupingIntoCollections field.
func (o *JellyfinServerConfiguration) SetEnableGroupingIntoCollections(v bool) {
	o.EnableGroupingIntoCollections = &v
}

// GetDisplaySpecialsWithinSeasons returns the DisplaySpecialsWithinSeasons field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetDisplaySpecialsWithinSeasons() bool {
	if o == nil || IsNil(o.DisplaySpecialsWithinSeasons) {
		var ret bool
		return ret
	}
	return *o.DisplaySpecialsWithinSeasons
}

// GetDisplaySpecialsWithinSeasonsOk returns a tuple with the DisplaySpecialsWithinSeasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetDisplaySpecialsWithinSeasonsOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplaySpecialsWithinSeasons) {
		return nil, false
	}
	return o.DisplaySpecialsWithinSeasons, true
}

// HasDisplaySpecialsWithinSeasons returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasDisplaySpecialsWithinSeasons() bool {
	if o != nil && !IsNil(o.DisplaySpecialsWithinSeasons) {
		return true
	}

	return false
}

// SetDisplaySpecialsWithinSeasons gets a reference to the given bool and assigns it to the DisplaySpecialsWithinSeasons field.
func (o *JellyfinServerConfiguration) SetDisplaySpecialsWithinSeasons(v bool) {
	o.DisplaySpecialsWithinSeasons = &v
}

// GetCodecsUsed returns the CodecsUsed field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetCodecsUsed() []string {
	if o == nil || IsNil(o.CodecsUsed) {
		var ret []string
		return ret
	}
	return o.CodecsUsed
}

// GetCodecsUsedOk returns a tuple with the CodecsUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetCodecsUsedOk() ([]string, bool) {
	if o == nil || IsNil(o.CodecsUsed) {
		return nil, false
	}
	return o.CodecsUsed, true
}

// HasCodecsUsed returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasCodecsUsed() bool {
	if o != nil && !IsNil(o.CodecsUsed) {
		return true
	}

	return false
}

// SetCodecsUsed gets a reference to the given []string and assigns it to the CodecsUsed field.
func (o *JellyfinServerConfiguration) SetCodecsUsed(v []string) {
	o.CodecsUsed = v
}

// GetPluginRepositories returns the PluginRepositories field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetPluginRepositories() []JellyfinRepositoryInfo {
	if o == nil || IsNil(o.PluginRepositories) {
		var ret []JellyfinRepositoryInfo
		return ret
	}
	return o.PluginRepositories
}

// GetPluginRepositoriesOk returns a tuple with the PluginRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetPluginRepositoriesOk() ([]JellyfinRepositoryInfo, bool) {
	if o == nil || IsNil(o.PluginRepositories) {
		return nil, false
	}
	return o.PluginRepositories, true
}

// HasPluginRepositories returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasPluginRepositories() bool {
	if o != nil && !IsNil(o.PluginRepositories) {
		return true
	}

	return false
}

// SetPluginRepositories gets a reference to the given []JellyfinRepositoryInfo and assigns it to the PluginRepositories field.
func (o *JellyfinServerConfiguration) SetPluginRepositories(v []JellyfinRepositoryInfo) {
	o.PluginRepositories = v
}

// GetEnableExternalContentInSuggestions returns the EnableExternalContentInSuggestions field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetEnableExternalContentInSuggestions() bool {
	if o == nil || IsNil(o.EnableExternalContentInSuggestions) {
		var ret bool
		return ret
	}
	return *o.EnableExternalContentInSuggestions
}

// GetEnableExternalContentInSuggestionsOk returns a tuple with the EnableExternalContentInSuggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetEnableExternalContentInSuggestionsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableExternalContentInSuggestions) {
		return nil, false
	}
	return o.EnableExternalContentInSuggestions, true
}

// HasEnableExternalContentInSuggestions returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasEnableExternalContentInSuggestions() bool {
	if o != nil && !IsNil(o.EnableExternalContentInSuggestions) {
		return true
	}

	return false
}

// SetEnableExternalContentInSuggestions gets a reference to the given bool and assigns it to the EnableExternalContentInSuggestions field.
func (o *JellyfinServerConfiguration) SetEnableExternalContentInSuggestions(v bool) {
	o.EnableExternalContentInSuggestions = &v
}

// GetImageExtractionTimeoutMs returns the ImageExtractionTimeoutMs field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetImageExtractionTimeoutMs() int32 {
	if o == nil || IsNil(o.ImageExtractionTimeoutMs) {
		var ret int32
		return ret
	}
	return *o.ImageExtractionTimeoutMs
}

// GetImageExtractionTimeoutMsOk returns a tuple with the ImageExtractionTimeoutMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetImageExtractionTimeoutMsOk() (*int32, bool) {
	if o == nil || IsNil(o.ImageExtractionTimeoutMs) {
		return nil, false
	}
	return o.ImageExtractionTimeoutMs, true
}

// HasImageExtractionTimeoutMs returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasImageExtractionTimeoutMs() bool {
	if o != nil && !IsNil(o.ImageExtractionTimeoutMs) {
		return true
	}

	return false
}

// SetImageExtractionTimeoutMs gets a reference to the given int32 and assigns it to the ImageExtractionTimeoutMs field.
func (o *JellyfinServerConfiguration) SetImageExtractionTimeoutMs(v int32) {
	o.ImageExtractionTimeoutMs = &v
}

// GetPathSubstitutions returns the PathSubstitutions field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetPathSubstitutions() []JellyfinPathSubstitution {
	if o == nil || IsNil(o.PathSubstitutions) {
		var ret []JellyfinPathSubstitution
		return ret
	}
	return o.PathSubstitutions
}

// GetPathSubstitutionsOk returns a tuple with the PathSubstitutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetPathSubstitutionsOk() ([]JellyfinPathSubstitution, bool) {
	if o == nil || IsNil(o.PathSubstitutions) {
		return nil, false
	}
	return o.PathSubstitutions, true
}

// HasPathSubstitutions returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasPathSubstitutions() bool {
	if o != nil && !IsNil(o.PathSubstitutions) {
		return true
	}

	return false
}

// SetPathSubstitutions gets a reference to the given []JellyfinPathSubstitution and assigns it to the PathSubstitutions field.
func (o *JellyfinServerConfiguration) SetPathSubstitutions(v []JellyfinPathSubstitution) {
	o.PathSubstitutions = v
}

// GetEnableSlowResponseWarning returns the EnableSlowResponseWarning field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetEnableSlowResponseWarning() bool {
	if o == nil || IsNil(o.EnableSlowResponseWarning) {
		var ret bool
		return ret
	}
	return *o.EnableSlowResponseWarning
}

// GetEnableSlowResponseWarningOk returns a tuple with the EnableSlowResponseWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetEnableSlowResponseWarningOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSlowResponseWarning) {
		return nil, false
	}
	return o.EnableSlowResponseWarning, true
}

// HasEnableSlowResponseWarning returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasEnableSlowResponseWarning() bool {
	if o != nil && !IsNil(o.EnableSlowResponseWarning) {
		return true
	}

	return false
}

// SetEnableSlowResponseWarning gets a reference to the given bool and assigns it to the EnableSlowResponseWarning field.
func (o *JellyfinServerConfiguration) SetEnableSlowResponseWarning(v bool) {
	o.EnableSlowResponseWarning = &v
}

// GetSlowResponseThresholdMs returns the SlowResponseThresholdMs field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetSlowResponseThresholdMs() int64 {
	if o == nil || IsNil(o.SlowResponseThresholdMs) {
		var ret int64
		return ret
	}
	return *o.SlowResponseThresholdMs
}

// GetSlowResponseThresholdMsOk returns a tuple with the SlowResponseThresholdMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetSlowResponseThresholdMsOk() (*int64, bool) {
	if o == nil || IsNil(o.SlowResponseThresholdMs) {
		return nil, false
	}
	return o.SlowResponseThresholdMs, true
}

// HasSlowResponseThresholdMs returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasSlowResponseThresholdMs() bool {
	if o != nil && !IsNil(o.SlowResponseThresholdMs) {
		return true
	}

	return false
}

// SetSlowResponseThresholdMs gets a reference to the given int64 and assigns it to the SlowResponseThresholdMs field.
func (o *JellyfinServerConfiguration) SetSlowResponseThresholdMs(v int64) {
	o.SlowResponseThresholdMs = &v
}

// GetCorsHosts returns the CorsHosts field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetCorsHosts() []string {
	if o == nil || IsNil(o.CorsHosts) {
		var ret []string
		return ret
	}
	return o.CorsHosts
}

// GetCorsHostsOk returns a tuple with the CorsHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetCorsHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.CorsHosts) {
		return nil, false
	}
	return o.CorsHosts, true
}

// HasCorsHosts returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasCorsHosts() bool {
	if o != nil && !IsNil(o.CorsHosts) {
		return true
	}

	return false
}

// SetCorsHosts gets a reference to the given []string and assigns it to the CorsHosts field.
func (o *JellyfinServerConfiguration) SetCorsHosts(v []string) {
	o.CorsHosts = v
}

// GetActivityLogRetentionDays returns the ActivityLogRetentionDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinServerConfiguration) GetActivityLogRetentionDays() int32 {
	if o == nil || IsNil(o.ActivityLogRetentionDays.Get()) {
		var ret int32
		return ret
	}
	return *o.ActivityLogRetentionDays.Get()
}

// GetActivityLogRetentionDaysOk returns a tuple with the ActivityLogRetentionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinServerConfiguration) GetActivityLogRetentionDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityLogRetentionDays.Get(), o.ActivityLogRetentionDays.IsSet()
}

// HasActivityLogRetentionDays returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasActivityLogRetentionDays() bool {
	if o != nil && o.ActivityLogRetentionDays.IsSet() {
		return true
	}

	return false
}

// SetActivityLogRetentionDays gets a reference to the given NullableInt32 and assigns it to the ActivityLogRetentionDays field.
func (o *JellyfinServerConfiguration) SetActivityLogRetentionDays(v int32) {
	o.ActivityLogRetentionDays.Set(&v)
}
// SetActivityLogRetentionDaysNil sets the value for ActivityLogRetentionDays to be an explicit nil
func (o *JellyfinServerConfiguration) SetActivityLogRetentionDaysNil() {
	o.ActivityLogRetentionDays.Set(nil)
}

// UnsetActivityLogRetentionDays ensures that no value is present for ActivityLogRetentionDays, not even an explicit nil
func (o *JellyfinServerConfiguration) UnsetActivityLogRetentionDays() {
	o.ActivityLogRetentionDays.Unset()
}

// GetLibraryScanFanoutConcurrency returns the LibraryScanFanoutConcurrency field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetLibraryScanFanoutConcurrency() int32 {
	if o == nil || IsNil(o.LibraryScanFanoutConcurrency) {
		var ret int32
		return ret
	}
	return *o.LibraryScanFanoutConcurrency
}

// GetLibraryScanFanoutConcurrencyOk returns a tuple with the LibraryScanFanoutConcurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetLibraryScanFanoutConcurrencyOk() (*int32, bool) {
	if o == nil || IsNil(o.LibraryScanFanoutConcurrency) {
		return nil, false
	}
	return o.LibraryScanFanoutConcurrency, true
}

// HasLibraryScanFanoutConcurrency returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasLibraryScanFanoutConcurrency() bool {
	if o != nil && !IsNil(o.LibraryScanFanoutConcurrency) {
		return true
	}

	return false
}

// SetLibraryScanFanoutConcurrency gets a reference to the given int32 and assigns it to the LibraryScanFanoutConcurrency field.
func (o *JellyfinServerConfiguration) SetLibraryScanFanoutConcurrency(v int32) {
	o.LibraryScanFanoutConcurrency = &v
}

// GetLibraryMetadataRefreshConcurrency returns the LibraryMetadataRefreshConcurrency field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetLibraryMetadataRefreshConcurrency() int32 {
	if o == nil || IsNil(o.LibraryMetadataRefreshConcurrency) {
		var ret int32
		return ret
	}
	return *o.LibraryMetadataRefreshConcurrency
}

// GetLibraryMetadataRefreshConcurrencyOk returns a tuple with the LibraryMetadataRefreshConcurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetLibraryMetadataRefreshConcurrencyOk() (*int32, bool) {
	if o == nil || IsNil(o.LibraryMetadataRefreshConcurrency) {
		return nil, false
	}
	return o.LibraryMetadataRefreshConcurrency, true
}

// HasLibraryMetadataRefreshConcurrency returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasLibraryMetadataRefreshConcurrency() bool {
	if o != nil && !IsNil(o.LibraryMetadataRefreshConcurrency) {
		return true
	}

	return false
}

// SetLibraryMetadataRefreshConcurrency gets a reference to the given int32 and assigns it to the LibraryMetadataRefreshConcurrency field.
func (o *JellyfinServerConfiguration) SetLibraryMetadataRefreshConcurrency(v int32) {
	o.LibraryMetadataRefreshConcurrency = &v
}

// GetRemoveOldPlugins returns the RemoveOldPlugins field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetRemoveOldPlugins() bool {
	if o == nil || IsNil(o.RemoveOldPlugins) {
		var ret bool
		return ret
	}
	return *o.RemoveOldPlugins
}

// GetRemoveOldPluginsOk returns a tuple with the RemoveOldPlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetRemoveOldPluginsOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoveOldPlugins) {
		return nil, false
	}
	return o.RemoveOldPlugins, true
}

// HasRemoveOldPlugins returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasRemoveOldPlugins() bool {
	if o != nil && !IsNil(o.RemoveOldPlugins) {
		return true
	}

	return false
}

// SetRemoveOldPlugins gets a reference to the given bool and assigns it to the RemoveOldPlugins field.
func (o *JellyfinServerConfiguration) SetRemoveOldPlugins(v bool) {
	o.RemoveOldPlugins = &v
}

// GetAllowClientLogUpload returns the AllowClientLogUpload field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetAllowClientLogUpload() bool {
	if o == nil || IsNil(o.AllowClientLogUpload) {
		var ret bool
		return ret
	}
	return *o.AllowClientLogUpload
}

// GetAllowClientLogUploadOk returns a tuple with the AllowClientLogUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetAllowClientLogUploadOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowClientLogUpload) {
		return nil, false
	}
	return o.AllowClientLogUpload, true
}

// HasAllowClientLogUpload returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasAllowClientLogUpload() bool {
	if o != nil && !IsNil(o.AllowClientLogUpload) {
		return true
	}

	return false
}

// SetAllowClientLogUpload gets a reference to the given bool and assigns it to the AllowClientLogUpload field.
func (o *JellyfinServerConfiguration) SetAllowClientLogUpload(v bool) {
	o.AllowClientLogUpload = &v
}

// GetDummyChapterDuration returns the DummyChapterDuration field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetDummyChapterDuration() int32 {
	if o == nil || IsNil(o.DummyChapterDuration) {
		var ret int32
		return ret
	}
	return *o.DummyChapterDuration
}

// GetDummyChapterDurationOk returns a tuple with the DummyChapterDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetDummyChapterDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.DummyChapterDuration) {
		return nil, false
	}
	return o.DummyChapterDuration, true
}

// HasDummyChapterDuration returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasDummyChapterDuration() bool {
	if o != nil && !IsNil(o.DummyChapterDuration) {
		return true
	}

	return false
}

// SetDummyChapterDuration gets a reference to the given int32 and assigns it to the DummyChapterDuration field.
func (o *JellyfinServerConfiguration) SetDummyChapterDuration(v int32) {
	o.DummyChapterDuration = &v
}

// GetChapterImageResolution returns the ChapterImageResolution field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetChapterImageResolution() JellyfinImageResolution {
	if o == nil || IsNil(o.ChapterImageResolution) {
		var ret JellyfinImageResolution
		return ret
	}
	return *o.ChapterImageResolution
}

// GetChapterImageResolutionOk returns a tuple with the ChapterImageResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetChapterImageResolutionOk() (*JellyfinImageResolution, bool) {
	if o == nil || IsNil(o.ChapterImageResolution) {
		return nil, false
	}
	return o.ChapterImageResolution, true
}

// HasChapterImageResolution returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasChapterImageResolution() bool {
	if o != nil && !IsNil(o.ChapterImageResolution) {
		return true
	}

	return false
}

// SetChapterImageResolution gets a reference to the given JellyfinImageResolution and assigns it to the ChapterImageResolution field.
func (o *JellyfinServerConfiguration) SetChapterImageResolution(v JellyfinImageResolution) {
	o.ChapterImageResolution = &v
}

// GetParallelImageEncodingLimit returns the ParallelImageEncodingLimit field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetParallelImageEncodingLimit() int32 {
	if o == nil || IsNil(o.ParallelImageEncodingLimit) {
		var ret int32
		return ret
	}
	return *o.ParallelImageEncodingLimit
}

// GetParallelImageEncodingLimitOk returns a tuple with the ParallelImageEncodingLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetParallelImageEncodingLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.ParallelImageEncodingLimit) {
		return nil, false
	}
	return o.ParallelImageEncodingLimit, true
}

// HasParallelImageEncodingLimit returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasParallelImageEncodingLimit() bool {
	if o != nil && !IsNil(o.ParallelImageEncodingLimit) {
		return true
	}

	return false
}

// SetParallelImageEncodingLimit gets a reference to the given int32 and assigns it to the ParallelImageEncodingLimit field.
func (o *JellyfinServerConfiguration) SetParallelImageEncodingLimit(v int32) {
	o.ParallelImageEncodingLimit = &v
}

// GetCastReceiverApplications returns the CastReceiverApplications field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetCastReceiverApplications() []JellyfinCastReceiverApplication {
	if o == nil || IsNil(o.CastReceiverApplications) {
		var ret []JellyfinCastReceiverApplication
		return ret
	}
	return o.CastReceiverApplications
}

// GetCastReceiverApplicationsOk returns a tuple with the CastReceiverApplications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetCastReceiverApplicationsOk() ([]JellyfinCastReceiverApplication, bool) {
	if o == nil || IsNil(o.CastReceiverApplications) {
		return nil, false
	}
	return o.CastReceiverApplications, true
}

// HasCastReceiverApplications returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasCastReceiverApplications() bool {
	if o != nil && !IsNil(o.CastReceiverApplications) {
		return true
	}

	return false
}

// SetCastReceiverApplications gets a reference to the given []JellyfinCastReceiverApplication and assigns it to the CastReceiverApplications field.
func (o *JellyfinServerConfiguration) SetCastReceiverApplications(v []JellyfinCastReceiverApplication) {
	o.CastReceiverApplications = v
}

// GetTrickplayOptions returns the TrickplayOptions field value if set, zero value otherwise.
func (o *JellyfinServerConfiguration) GetTrickplayOptions() JellyfinTrickplayOptions {
	if o == nil || IsNil(o.TrickplayOptions) {
		var ret JellyfinTrickplayOptions
		return ret
	}
	return *o.TrickplayOptions
}

// GetTrickplayOptionsOk returns a tuple with the TrickplayOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinServerConfiguration) GetTrickplayOptionsOk() (*JellyfinTrickplayOptions, bool) {
	if o == nil || IsNil(o.TrickplayOptions) {
		return nil, false
	}
	return o.TrickplayOptions, true
}

// HasTrickplayOptions returns a boolean if a field has been set.
func (o *JellyfinServerConfiguration) HasTrickplayOptions() bool {
	if o != nil && !IsNil(o.TrickplayOptions) {
		return true
	}

	return false
}

// SetTrickplayOptions gets a reference to the given JellyfinTrickplayOptions and assigns it to the TrickplayOptions field.
func (o *JellyfinServerConfiguration) SetTrickplayOptions(v JellyfinTrickplayOptions) {
	o.TrickplayOptions = &v
}

func (o JellyfinServerConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinServerConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogFileRetentionDays) {
		toSerialize["LogFileRetentionDays"] = o.LogFileRetentionDays
	}
	if !IsNil(o.IsStartupWizardCompleted) {
		toSerialize["IsStartupWizardCompleted"] = o.IsStartupWizardCompleted
	}
	if o.CachePath.IsSet() {
		toSerialize["CachePath"] = o.CachePath.Get()
	}
	if o.PreviousVersion.IsSet() {
		toSerialize["PreviousVersion"] = o.PreviousVersion.Get()
	}
	if o.PreviousVersionStr.IsSet() {
		toSerialize["PreviousVersionStr"] = o.PreviousVersionStr.Get()
	}
	if !IsNil(o.EnableMetrics) {
		toSerialize["EnableMetrics"] = o.EnableMetrics
	}
	if !IsNil(o.EnableNormalizedItemByNameIds) {
		toSerialize["EnableNormalizedItemByNameIds"] = o.EnableNormalizedItemByNameIds
	}
	if !IsNil(o.IsPortAuthorized) {
		toSerialize["IsPortAuthorized"] = o.IsPortAuthorized
	}
	if !IsNil(o.QuickConnectAvailable) {
		toSerialize["QuickConnectAvailable"] = o.QuickConnectAvailable
	}
	if !IsNil(o.EnableCaseSensitiveItemIds) {
		toSerialize["EnableCaseSensitiveItemIds"] = o.EnableCaseSensitiveItemIds
	}
	if !IsNil(o.DisableLiveTvChannelUserDataName) {
		toSerialize["DisableLiveTvChannelUserDataName"] = o.DisableLiveTvChannelUserDataName
	}
	if !IsNil(o.MetadataPath) {
		toSerialize["MetadataPath"] = o.MetadataPath
	}
	if !IsNil(o.PreferredMetadataLanguage) {
		toSerialize["PreferredMetadataLanguage"] = o.PreferredMetadataLanguage
	}
	if !IsNil(o.MetadataCountryCode) {
		toSerialize["MetadataCountryCode"] = o.MetadataCountryCode
	}
	if !IsNil(o.SortReplaceCharacters) {
		toSerialize["SortReplaceCharacters"] = o.SortReplaceCharacters
	}
	if !IsNil(o.SortRemoveCharacters) {
		toSerialize["SortRemoveCharacters"] = o.SortRemoveCharacters
	}
	if !IsNil(o.SortRemoveWords) {
		toSerialize["SortRemoveWords"] = o.SortRemoveWords
	}
	if !IsNil(o.MinResumePct) {
		toSerialize["MinResumePct"] = o.MinResumePct
	}
	if !IsNil(o.MaxResumePct) {
		toSerialize["MaxResumePct"] = o.MaxResumePct
	}
	if !IsNil(o.MinResumeDurationSeconds) {
		toSerialize["MinResumeDurationSeconds"] = o.MinResumeDurationSeconds
	}
	if !IsNil(o.MinAudiobookResume) {
		toSerialize["MinAudiobookResume"] = o.MinAudiobookResume
	}
	if !IsNil(o.MaxAudiobookResume) {
		toSerialize["MaxAudiobookResume"] = o.MaxAudiobookResume
	}
	if !IsNil(o.InactiveSessionThreshold) {
		toSerialize["InactiveSessionThreshold"] = o.InactiveSessionThreshold
	}
	if !IsNil(o.LibraryMonitorDelay) {
		toSerialize["LibraryMonitorDelay"] = o.LibraryMonitorDelay
	}
	if !IsNil(o.LibraryUpdateDuration) {
		toSerialize["LibraryUpdateDuration"] = o.LibraryUpdateDuration
	}
	if !IsNil(o.ImageSavingConvention) {
		toSerialize["ImageSavingConvention"] = o.ImageSavingConvention
	}
	if !IsNil(o.MetadataOptions) {
		toSerialize["MetadataOptions"] = o.MetadataOptions
	}
	if !IsNil(o.SkipDeserializationForBasicTypes) {
		toSerialize["SkipDeserializationForBasicTypes"] = o.SkipDeserializationForBasicTypes
	}
	if !IsNil(o.ServerName) {
		toSerialize["ServerName"] = o.ServerName
	}
	if !IsNil(o.UICulture) {
		toSerialize["UICulture"] = o.UICulture
	}
	if !IsNil(o.SaveMetadataHidden) {
		toSerialize["SaveMetadataHidden"] = o.SaveMetadataHidden
	}
	if !IsNil(o.ContentTypes) {
		toSerialize["ContentTypes"] = o.ContentTypes
	}
	if !IsNil(o.RemoteClientBitrateLimit) {
		toSerialize["RemoteClientBitrateLimit"] = o.RemoteClientBitrateLimit
	}
	if !IsNil(o.EnableFolderView) {
		toSerialize["EnableFolderView"] = o.EnableFolderView
	}
	if !IsNil(o.EnableGroupingIntoCollections) {
		toSerialize["EnableGroupingIntoCollections"] = o.EnableGroupingIntoCollections
	}
	if !IsNil(o.DisplaySpecialsWithinSeasons) {
		toSerialize["DisplaySpecialsWithinSeasons"] = o.DisplaySpecialsWithinSeasons
	}
	if !IsNil(o.CodecsUsed) {
		toSerialize["CodecsUsed"] = o.CodecsUsed
	}
	if !IsNil(o.PluginRepositories) {
		toSerialize["PluginRepositories"] = o.PluginRepositories
	}
	if !IsNil(o.EnableExternalContentInSuggestions) {
		toSerialize["EnableExternalContentInSuggestions"] = o.EnableExternalContentInSuggestions
	}
	if !IsNil(o.ImageExtractionTimeoutMs) {
		toSerialize["ImageExtractionTimeoutMs"] = o.ImageExtractionTimeoutMs
	}
	if !IsNil(o.PathSubstitutions) {
		toSerialize["PathSubstitutions"] = o.PathSubstitutions
	}
	if !IsNil(o.EnableSlowResponseWarning) {
		toSerialize["EnableSlowResponseWarning"] = o.EnableSlowResponseWarning
	}
	if !IsNil(o.SlowResponseThresholdMs) {
		toSerialize["SlowResponseThresholdMs"] = o.SlowResponseThresholdMs
	}
	if !IsNil(o.CorsHosts) {
		toSerialize["CorsHosts"] = o.CorsHosts
	}
	if o.ActivityLogRetentionDays.IsSet() {
		toSerialize["ActivityLogRetentionDays"] = o.ActivityLogRetentionDays.Get()
	}
	if !IsNil(o.LibraryScanFanoutConcurrency) {
		toSerialize["LibraryScanFanoutConcurrency"] = o.LibraryScanFanoutConcurrency
	}
	if !IsNil(o.LibraryMetadataRefreshConcurrency) {
		toSerialize["LibraryMetadataRefreshConcurrency"] = o.LibraryMetadataRefreshConcurrency
	}
	if !IsNil(o.RemoveOldPlugins) {
		toSerialize["RemoveOldPlugins"] = o.RemoveOldPlugins
	}
	if !IsNil(o.AllowClientLogUpload) {
		toSerialize["AllowClientLogUpload"] = o.AllowClientLogUpload
	}
	if !IsNil(o.DummyChapterDuration) {
		toSerialize["DummyChapterDuration"] = o.DummyChapterDuration
	}
	if !IsNil(o.ChapterImageResolution) {
		toSerialize["ChapterImageResolution"] = o.ChapterImageResolution
	}
	if !IsNil(o.ParallelImageEncodingLimit) {
		toSerialize["ParallelImageEncodingLimit"] = o.ParallelImageEncodingLimit
	}
	if !IsNil(o.CastReceiverApplications) {
		toSerialize["CastReceiverApplications"] = o.CastReceiverApplications
	}
	if !IsNil(o.TrickplayOptions) {
		toSerialize["TrickplayOptions"] = o.TrickplayOptions
	}
	return toSerialize, nil
}

type NullableJellyfinServerConfiguration struct {
	value *JellyfinServerConfiguration
	isSet bool
}

func (v NullableJellyfinServerConfiguration) Get() *JellyfinServerConfiguration {
	return v.value
}

func (v *NullableJellyfinServerConfiguration) Set(val *JellyfinServerConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinServerConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinServerConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinServerConfiguration(val *JellyfinServerConfiguration) *NullableJellyfinServerConfiguration {
	return &NullableJellyfinServerConfiguration{value: val, isSet: true}
}

func (v NullableJellyfinServerConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinServerConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


