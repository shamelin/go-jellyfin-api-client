/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinRatingType the model 'JellyfinRatingType'
type JellyfinRatingType string

// List of RatingType
const (
	SCORE JellyfinRatingType = "Score"
	LIKES JellyfinRatingType = "Likes"
)

// All allowed values of JellyfinRatingType enum
var AllowedJellyfinRatingTypeEnumValues = []JellyfinRatingType{
	"Score",
	"Likes",
}

func (v *JellyfinRatingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinRatingType(value)
	for _, existing := range AllowedJellyfinRatingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinRatingType", value)
}

// NewJellyfinRatingTypeFromValue returns a pointer to a valid JellyfinRatingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinRatingTypeFromValue(v string) (*JellyfinRatingType, error) {
	ev := JellyfinRatingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinRatingType: valid values are %v", v, AllowedJellyfinRatingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinRatingType) IsValid() bool {
	for _, existing := range AllowedJellyfinRatingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RatingType value
func (v JellyfinRatingType) Ptr() *JellyfinRatingType {
	return &v
}

type NullableJellyfinRatingType struct {
	value *JellyfinRatingType
	isSet bool
}

func (v NullableJellyfinRatingType) Get() *JellyfinRatingType {
	return v.value
}

func (v *NullableJellyfinRatingType) Set(val *JellyfinRatingType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinRatingType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinRatingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinRatingType(val *JellyfinRatingType) *NullableJellyfinRatingType {
	return &NullableJellyfinRatingType{value: val, isSet: true}
}

func (v NullableJellyfinRatingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinRatingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

