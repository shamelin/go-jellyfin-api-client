/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinDlnaProfileType the model 'JellyfinDlnaProfileType'
type JellyfinDlnaProfileType string

// List of DlnaProfileType
const (
	JELLYFINDLNAPROFILETYPE_AUDIO JellyfinDlnaProfileType = "Audio"
	JELLYFINDLNAPROFILETYPE_VIDEO JellyfinDlnaProfileType = "Video"
	JELLYFINDLNAPROFILETYPE_PHOTO JellyfinDlnaProfileType = "Photo"
	JELLYFINDLNAPROFILETYPE_SUBTITLE JellyfinDlnaProfileType = "Subtitle"
	JELLYFINDLNAPROFILETYPE_LYRIC JellyfinDlnaProfileType = "Lyric"
)

// All allowed values of JellyfinDlnaProfileType enum
var AllowedJellyfinDlnaProfileTypeEnumValues = []JellyfinDlnaProfileType{
	"Audio",
	"Video",
	"Photo",
	"Subtitle",
	"Lyric",
}

func (v *JellyfinDlnaProfileType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinDlnaProfileType(value)
	for _, existing := range AllowedJellyfinDlnaProfileTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinDlnaProfileType", value)
}

// NewJellyfinDlnaProfileTypeFromValue returns a pointer to a valid JellyfinDlnaProfileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinDlnaProfileTypeFromValue(v string) (*JellyfinDlnaProfileType, error) {
	ev := JellyfinDlnaProfileType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinDlnaProfileType: valid values are %v", v, AllowedJellyfinDlnaProfileTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinDlnaProfileType) IsValid() bool {
	for _, existing := range AllowedJellyfinDlnaProfileTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DlnaProfileType value
func (v JellyfinDlnaProfileType) Ptr() *JellyfinDlnaProfileType {
	return &v
}

type NullableJellyfinDlnaProfileType struct {
	value *JellyfinDlnaProfileType
	isSet bool
}

func (v NullableJellyfinDlnaProfileType) Get() *JellyfinDlnaProfileType {
	return v.value
}

func (v *NullableJellyfinDlnaProfileType) Set(val *JellyfinDlnaProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinDlnaProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinDlnaProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinDlnaProfileType(val *JellyfinDlnaProfileType) *NullableJellyfinDlnaProfileType {
	return &NullableJellyfinDlnaProfileType{value: val, isSet: true}
}

func (v NullableJellyfinDlnaProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinDlnaProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

