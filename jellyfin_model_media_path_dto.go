/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JellyfinMediaPathDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinMediaPathDto{}

// JellyfinMediaPathDto Media Path dto.
type JellyfinMediaPathDto struct {
	// Gets or sets the name of the library.
	Name string `json:"Name"`
	// Gets or sets the path to add.
	Path NullableString `json:"Path,omitempty"`
	// Gets or sets the path info.
	PathInfo NullableJellyfinMediaPathInfo `json:"PathInfo,omitempty"`
}

type _JellyfinMediaPathDto JellyfinMediaPathDto

// NewJellyfinMediaPathDto instantiates a new JellyfinMediaPathDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinMediaPathDto(name string) *JellyfinMediaPathDto {
	this := JellyfinMediaPathDto{}
	this.Name = name
	return &this
}

// NewJellyfinMediaPathDtoWithDefaults instantiates a new JellyfinMediaPathDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinMediaPathDtoWithDefaults() *JellyfinMediaPathDto {
	this := JellyfinMediaPathDto{}
	return &this
}

// GetName returns the Name field value
func (o *JellyfinMediaPathDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JellyfinMediaPathDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JellyfinMediaPathDto) SetName(v string) {
	o.Name = v
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinMediaPathDto) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinMediaPathDto) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *JellyfinMediaPathDto) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *JellyfinMediaPathDto) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *JellyfinMediaPathDto) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *JellyfinMediaPathDto) UnsetPath() {
	o.Path.Unset()
}

// GetPathInfo returns the PathInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinMediaPathDto) GetPathInfo() JellyfinMediaPathInfo {
	if o == nil || IsNil(o.PathInfo.Get()) {
		var ret JellyfinMediaPathInfo
		return ret
	}
	return *o.PathInfo.Get()
}

// GetPathInfoOk returns a tuple with the PathInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinMediaPathDto) GetPathInfoOk() (*JellyfinMediaPathInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.PathInfo.Get(), o.PathInfo.IsSet()
}

// HasPathInfo returns a boolean if a field has been set.
func (o *JellyfinMediaPathDto) HasPathInfo() bool {
	if o != nil && o.PathInfo.IsSet() {
		return true
	}

	return false
}

// SetPathInfo gets a reference to the given NullableJellyfinMediaPathInfo and assigns it to the PathInfo field.
func (o *JellyfinMediaPathDto) SetPathInfo(v JellyfinMediaPathInfo) {
	o.PathInfo.Set(&v)
}
// SetPathInfoNil sets the value for PathInfo to be an explicit nil
func (o *JellyfinMediaPathDto) SetPathInfoNil() {
	o.PathInfo.Set(nil)
}

// UnsetPathInfo ensures that no value is present for PathInfo, not even an explicit nil
func (o *JellyfinMediaPathDto) UnsetPathInfo() {
	o.PathInfo.Unset()
}

func (o JellyfinMediaPathDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinMediaPathDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Name"] = o.Name
	if o.Path.IsSet() {
		toSerialize["Path"] = o.Path.Get()
	}
	if o.PathInfo.IsSet() {
		toSerialize["PathInfo"] = o.PathInfo.Get()
	}
	return toSerialize, nil
}

func (o *JellyfinMediaPathDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJellyfinMediaPathDto := _JellyfinMediaPathDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJellyfinMediaPathDto)

	if err != nil {
		return err
	}

	*o = JellyfinMediaPathDto(varJellyfinMediaPathDto)

	return err
}

type NullableJellyfinMediaPathDto struct {
	value *JellyfinMediaPathDto
	isSet bool
}

func (v NullableJellyfinMediaPathDto) Get() *JellyfinMediaPathDto {
	return v.value
}

func (v *NullableJellyfinMediaPathDto) Set(val *JellyfinMediaPathDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinMediaPathDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinMediaPathDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinMediaPathDto(val *JellyfinMediaPathDto) *NullableJellyfinMediaPathDto {
	return &NullableJellyfinMediaPathDto{value: val, isSet: true}
}

func (v NullableJellyfinMediaPathDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinMediaPathDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


