/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinHardwareAccelerationType Enum containing hardware acceleration types.
type JellyfinHardwareAccelerationType string

// List of HardwareAccelerationType
const (
	JELLYFINHARDWAREACCELERATIONTYPE_NONE JellyfinHardwareAccelerationType = "none"
	JELLYFINHARDWAREACCELERATIONTYPE_AMF JellyfinHardwareAccelerationType = "amf"
	JELLYFINHARDWAREACCELERATIONTYPE_QSV JellyfinHardwareAccelerationType = "qsv"
	JELLYFINHARDWAREACCELERATIONTYPE_NVENC JellyfinHardwareAccelerationType = "nvenc"
	JELLYFINHARDWAREACCELERATIONTYPE_V4L2M2M JellyfinHardwareAccelerationType = "v4l2m2m"
	JELLYFINHARDWAREACCELERATIONTYPE_VAAPI JellyfinHardwareAccelerationType = "vaapi"
	JELLYFINHARDWAREACCELERATIONTYPE_VIDEOTOOLBOX JellyfinHardwareAccelerationType = "videotoolbox"
	JELLYFINHARDWAREACCELERATIONTYPE_RKMPP JellyfinHardwareAccelerationType = "rkmpp"
)

// All allowed values of JellyfinHardwareAccelerationType enum
var AllowedJellyfinHardwareAccelerationTypeEnumValues = []JellyfinHardwareAccelerationType{
	"none",
	"amf",
	"qsv",
	"nvenc",
	"v4l2m2m",
	"vaapi",
	"videotoolbox",
	"rkmpp",
}

func (v *JellyfinHardwareAccelerationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinHardwareAccelerationType(value)
	for _, existing := range AllowedJellyfinHardwareAccelerationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinHardwareAccelerationType", value)
}

// NewJellyfinHardwareAccelerationTypeFromValue returns a pointer to a valid JellyfinHardwareAccelerationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinHardwareAccelerationTypeFromValue(v string) (*JellyfinHardwareAccelerationType, error) {
	ev := JellyfinHardwareAccelerationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinHardwareAccelerationType: valid values are %v", v, AllowedJellyfinHardwareAccelerationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinHardwareAccelerationType) IsValid() bool {
	for _, existing := range AllowedJellyfinHardwareAccelerationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HardwareAccelerationType value
func (v JellyfinHardwareAccelerationType) Ptr() *JellyfinHardwareAccelerationType {
	return &v
}

type NullableJellyfinHardwareAccelerationType struct {
	value *JellyfinHardwareAccelerationType
	isSet bool
}

func (v NullableJellyfinHardwareAccelerationType) Get() *JellyfinHardwareAccelerationType {
	return v.value
}

func (v *NullableJellyfinHardwareAccelerationType) Set(val *JellyfinHardwareAccelerationType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinHardwareAccelerationType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinHardwareAccelerationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinHardwareAccelerationType(val *JellyfinHardwareAccelerationType) *NullableJellyfinHardwareAccelerationType {
	return &NullableJellyfinHardwareAccelerationType{value: val, isSet: true}
}

func (v NullableJellyfinHardwareAccelerationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinHardwareAccelerationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

