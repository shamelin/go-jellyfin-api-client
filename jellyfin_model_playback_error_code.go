/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinPlaybackErrorCode the model 'JellyfinPlaybackErrorCode'
type JellyfinPlaybackErrorCode string

// List of PlaybackErrorCode
const (
	JELLYFINPLAYBACKERRORCODE_NOT_ALLOWED JellyfinPlaybackErrorCode = "NotAllowed"
	JELLYFINPLAYBACKERRORCODE_NO_COMPATIBLE_STREAM JellyfinPlaybackErrorCode = "NoCompatibleStream"
	JELLYFINPLAYBACKERRORCODE_RATE_LIMIT_EXCEEDED JellyfinPlaybackErrorCode = "RateLimitExceeded"
)

// All allowed values of JellyfinPlaybackErrorCode enum
var AllowedJellyfinPlaybackErrorCodeEnumValues = []JellyfinPlaybackErrorCode{
	"NotAllowed",
	"NoCompatibleStream",
	"RateLimitExceeded",
}

func (v *JellyfinPlaybackErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinPlaybackErrorCode(value)
	for _, existing := range AllowedJellyfinPlaybackErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinPlaybackErrorCode", value)
}

// NewJellyfinPlaybackErrorCodeFromValue returns a pointer to a valid JellyfinPlaybackErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinPlaybackErrorCodeFromValue(v string) (*JellyfinPlaybackErrorCode, error) {
	ev := JellyfinPlaybackErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinPlaybackErrorCode: valid values are %v", v, AllowedJellyfinPlaybackErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinPlaybackErrorCode) IsValid() bool {
	for _, existing := range AllowedJellyfinPlaybackErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlaybackErrorCode value
func (v JellyfinPlaybackErrorCode) Ptr() *JellyfinPlaybackErrorCode {
	return &v
}

type NullableJellyfinPlaybackErrorCode struct {
	value *JellyfinPlaybackErrorCode
	isSet bool
}

func (v NullableJellyfinPlaybackErrorCode) Get() *JellyfinPlaybackErrorCode {
	return v.value
}

func (v *NullableJellyfinPlaybackErrorCode) Set(val *JellyfinPlaybackErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinPlaybackErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinPlaybackErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinPlaybackErrorCode(val *JellyfinPlaybackErrorCode) *NullableJellyfinPlaybackErrorCode {
	return &NullableJellyfinPlaybackErrorCode{value: val, isSet: true}
}

func (v NullableJellyfinPlaybackErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinPlaybackErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

