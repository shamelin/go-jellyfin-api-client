/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// LibraryStructureAPIService LibraryStructureAPI service
type LibraryStructureAPIService service

type LibraryStructureAPIAddMediaPathRequest struct {
	ctx context.Context
	ApiService *LibraryStructureAPIService
	jellyfinMediaPathDto *JellyfinMediaPathDto
	refreshLibrary *bool
}

// The media path dto.
func (r LibraryStructureAPIAddMediaPathRequest) JellyfinMediaPathDto(jellyfinMediaPathDto JellyfinMediaPathDto) LibraryStructureAPIAddMediaPathRequest {
	r.jellyfinMediaPathDto = &jellyfinMediaPathDto
	return r
}

// Whether to refresh the library.
func (r LibraryStructureAPIAddMediaPathRequest) RefreshLibrary(refreshLibrary bool) LibraryStructureAPIAddMediaPathRequest {
	r.refreshLibrary = &refreshLibrary
	return r
}

func (r LibraryStructureAPIAddMediaPathRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddMediaPathExecute(r)
}

/*
AddMediaPath Add a media path to a library.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureAPIAddMediaPathRequest
*/
func (a *LibraryStructureAPIService) AddMediaPath(ctx context.Context) LibraryStructureAPIAddMediaPathRequest {
	return LibraryStructureAPIAddMediaPathRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureAPIService) AddMediaPathExecute(r LibraryStructureAPIAddMediaPathRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureAPIService.AddMediaPath")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Paths"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jellyfinMediaPathDto == nil {
		return nil, reportError("jellyfinMediaPathDto is required and must be specified")
	}

	if r.refreshLibrary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "refreshLibrary", r.refreshLibrary, "form", "")
	} else {
		var defaultValue bool = false
		r.refreshLibrary = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinMediaPathDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureAPIAddVirtualFolderRequest struct {
	ctx context.Context
	ApiService *LibraryStructureAPIService
	name *string
	collectionType *JellyfinCollectionTypeOptions
	paths *[]string
	refreshLibrary *bool
	jellyfinAddVirtualFolderDto *JellyfinAddVirtualFolderDto
}

// The name of the virtual folder.
func (r LibraryStructureAPIAddVirtualFolderRequest) Name(name string) LibraryStructureAPIAddVirtualFolderRequest {
	r.name = &name
	return r
}

// The type of the collection.
func (r LibraryStructureAPIAddVirtualFolderRequest) CollectionType(collectionType JellyfinCollectionTypeOptions) LibraryStructureAPIAddVirtualFolderRequest {
	r.collectionType = &collectionType
	return r
}

// The paths of the virtual folder.
func (r LibraryStructureAPIAddVirtualFolderRequest) Paths(paths []string) LibraryStructureAPIAddVirtualFolderRequest {
	r.paths = &paths
	return r
}

// Whether to refresh the library.
func (r LibraryStructureAPIAddVirtualFolderRequest) RefreshLibrary(refreshLibrary bool) LibraryStructureAPIAddVirtualFolderRequest {
	r.refreshLibrary = &refreshLibrary
	return r
}

// The library options.
func (r LibraryStructureAPIAddVirtualFolderRequest) JellyfinAddVirtualFolderDto(jellyfinAddVirtualFolderDto JellyfinAddVirtualFolderDto) LibraryStructureAPIAddVirtualFolderRequest {
	r.jellyfinAddVirtualFolderDto = &jellyfinAddVirtualFolderDto
	return r
}

func (r LibraryStructureAPIAddVirtualFolderRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddVirtualFolderExecute(r)
}

/*
AddVirtualFolder Adds a virtual folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureAPIAddVirtualFolderRequest
*/
func (a *LibraryStructureAPIService) AddVirtualFolder(ctx context.Context) LibraryStructureAPIAddVirtualFolderRequest {
	return LibraryStructureAPIAddVirtualFolderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureAPIService) AddVirtualFolderExecute(r LibraryStructureAPIAddVirtualFolderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureAPIService.AddVirtualFolder")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.collectionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "collectionType", r.collectionType, "form", "")
	}
	if r.paths != nil {
		t := *r.paths
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "paths", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "paths", t, "form", "multi")
		}
	}
	if r.refreshLibrary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "refreshLibrary", r.refreshLibrary, "form", "")
	} else {
		var defaultValue bool = false
		r.refreshLibrary = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinAddVirtualFolderDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureAPIGetVirtualFoldersRequest struct {
	ctx context.Context
	ApiService *LibraryStructureAPIService
}

func (r LibraryStructureAPIGetVirtualFoldersRequest) Execute() ([]JellyfinVirtualFolderInfo, *http.Response, error) {
	return r.ApiService.GetVirtualFoldersExecute(r)
}

/*
GetVirtualFolders Gets all virtual folders.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureAPIGetVirtualFoldersRequest
*/
func (a *LibraryStructureAPIService) GetVirtualFolders(ctx context.Context) LibraryStructureAPIGetVirtualFoldersRequest {
	return LibraryStructureAPIGetVirtualFoldersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JellyfinVirtualFolderInfo
func (a *LibraryStructureAPIService) GetVirtualFoldersExecute(r LibraryStructureAPIGetVirtualFoldersRequest) ([]JellyfinVirtualFolderInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JellyfinVirtualFolderInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureAPIService.GetVirtualFolders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LibraryStructureAPIRemoveMediaPathRequest struct {
	ctx context.Context
	ApiService *LibraryStructureAPIService
	name *string
	path *string
	refreshLibrary *bool
}

// The name of the library.
func (r LibraryStructureAPIRemoveMediaPathRequest) Name(name string) LibraryStructureAPIRemoveMediaPathRequest {
	r.name = &name
	return r
}

// The path to remove.
func (r LibraryStructureAPIRemoveMediaPathRequest) Path(path string) LibraryStructureAPIRemoveMediaPathRequest {
	r.path = &path
	return r
}

// Whether to refresh the library.
func (r LibraryStructureAPIRemoveMediaPathRequest) RefreshLibrary(refreshLibrary bool) LibraryStructureAPIRemoveMediaPathRequest {
	r.refreshLibrary = &refreshLibrary
	return r
}

func (r LibraryStructureAPIRemoveMediaPathRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveMediaPathExecute(r)
}

/*
RemoveMediaPath Remove a media path.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureAPIRemoveMediaPathRequest
*/
func (a *LibraryStructureAPIService) RemoveMediaPath(ctx context.Context) LibraryStructureAPIRemoveMediaPathRequest {
	return LibraryStructureAPIRemoveMediaPathRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureAPIService) RemoveMediaPathExecute(r LibraryStructureAPIRemoveMediaPathRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureAPIService.RemoveMediaPath")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Paths"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "form", "")
	}
	if r.refreshLibrary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "refreshLibrary", r.refreshLibrary, "form", "")
	} else {
		var defaultValue bool = false
		r.refreshLibrary = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureAPIRemoveVirtualFolderRequest struct {
	ctx context.Context
	ApiService *LibraryStructureAPIService
	name *string
	refreshLibrary *bool
}

// The name of the folder.
func (r LibraryStructureAPIRemoveVirtualFolderRequest) Name(name string) LibraryStructureAPIRemoveVirtualFolderRequest {
	r.name = &name
	return r
}

// Whether to refresh the library.
func (r LibraryStructureAPIRemoveVirtualFolderRequest) RefreshLibrary(refreshLibrary bool) LibraryStructureAPIRemoveVirtualFolderRequest {
	r.refreshLibrary = &refreshLibrary
	return r
}

func (r LibraryStructureAPIRemoveVirtualFolderRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveVirtualFolderExecute(r)
}

/*
RemoveVirtualFolder Removes a virtual folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureAPIRemoveVirtualFolderRequest
*/
func (a *LibraryStructureAPIService) RemoveVirtualFolder(ctx context.Context) LibraryStructureAPIRemoveVirtualFolderRequest {
	return LibraryStructureAPIRemoveVirtualFolderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureAPIService) RemoveVirtualFolderExecute(r LibraryStructureAPIRemoveVirtualFolderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureAPIService.RemoveVirtualFolder")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.refreshLibrary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "refreshLibrary", r.refreshLibrary, "form", "")
	} else {
		var defaultValue bool = false
		r.refreshLibrary = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureAPIRenameVirtualFolderRequest struct {
	ctx context.Context
	ApiService *LibraryStructureAPIService
	name *string
	newName *string
	refreshLibrary *bool
}

// The name of the virtual folder.
func (r LibraryStructureAPIRenameVirtualFolderRequest) Name(name string) LibraryStructureAPIRenameVirtualFolderRequest {
	r.name = &name
	return r
}

// The new name.
func (r LibraryStructureAPIRenameVirtualFolderRequest) NewName(newName string) LibraryStructureAPIRenameVirtualFolderRequest {
	r.newName = &newName
	return r
}

// Whether to refresh the library.
func (r LibraryStructureAPIRenameVirtualFolderRequest) RefreshLibrary(refreshLibrary bool) LibraryStructureAPIRenameVirtualFolderRequest {
	r.refreshLibrary = &refreshLibrary
	return r
}

func (r LibraryStructureAPIRenameVirtualFolderRequest) Execute() (*http.Response, error) {
	return r.ApiService.RenameVirtualFolderExecute(r)
}

/*
RenameVirtualFolder Renames a virtual folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureAPIRenameVirtualFolderRequest
*/
func (a *LibraryStructureAPIService) RenameVirtualFolder(ctx context.Context) LibraryStructureAPIRenameVirtualFolderRequest {
	return LibraryStructureAPIRenameVirtualFolderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureAPIService) RenameVirtualFolderExecute(r LibraryStructureAPIRenameVirtualFolderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureAPIService.RenameVirtualFolder")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Name"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.newName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "newName", r.newName, "form", "")
	}
	if r.refreshLibrary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "refreshLibrary", r.refreshLibrary, "form", "")
	} else {
		var defaultValue bool = false
		r.refreshLibrary = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureAPIUpdateLibraryOptionsRequest struct {
	ctx context.Context
	ApiService *LibraryStructureAPIService
	jellyfinUpdateLibraryOptionsDto *JellyfinUpdateLibraryOptionsDto
}

// The library name and options.
func (r LibraryStructureAPIUpdateLibraryOptionsRequest) JellyfinUpdateLibraryOptionsDto(jellyfinUpdateLibraryOptionsDto JellyfinUpdateLibraryOptionsDto) LibraryStructureAPIUpdateLibraryOptionsRequest {
	r.jellyfinUpdateLibraryOptionsDto = &jellyfinUpdateLibraryOptionsDto
	return r
}

func (r LibraryStructureAPIUpdateLibraryOptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateLibraryOptionsExecute(r)
}

/*
UpdateLibraryOptions Update library options.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureAPIUpdateLibraryOptionsRequest
*/
func (a *LibraryStructureAPIService) UpdateLibraryOptions(ctx context.Context) LibraryStructureAPIUpdateLibraryOptionsRequest {
	return LibraryStructureAPIUpdateLibraryOptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureAPIService) UpdateLibraryOptionsExecute(r LibraryStructureAPIUpdateLibraryOptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureAPIService.UpdateLibraryOptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/LibraryOptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinUpdateLibraryOptionsDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureAPIUpdateMediaPathRequest struct {
	ctx context.Context
	ApiService *LibraryStructureAPIService
	jellyfinUpdateMediaPathRequestDto *JellyfinUpdateMediaPathRequestDto
}

// The name of the library and path infos.
func (r LibraryStructureAPIUpdateMediaPathRequest) JellyfinUpdateMediaPathRequestDto(jellyfinUpdateMediaPathRequestDto JellyfinUpdateMediaPathRequestDto) LibraryStructureAPIUpdateMediaPathRequest {
	r.jellyfinUpdateMediaPathRequestDto = &jellyfinUpdateMediaPathRequestDto
	return r
}

func (r LibraryStructureAPIUpdateMediaPathRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateMediaPathExecute(r)
}

/*
UpdateMediaPath Updates a media path.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureAPIUpdateMediaPathRequest
*/
func (a *LibraryStructureAPIService) UpdateMediaPath(ctx context.Context) LibraryStructureAPIUpdateMediaPathRequest {
	return LibraryStructureAPIUpdateMediaPathRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureAPIService) UpdateMediaPathExecute(r LibraryStructureAPIUpdateMediaPathRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureAPIService.UpdateMediaPath")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Paths/Update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jellyfinUpdateMediaPathRequestDto == nil {
		return nil, reportError("jellyfinUpdateMediaPathRequestDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinUpdateMediaPathRequestDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
