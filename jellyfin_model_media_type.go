/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinMediaType Media types.
type JellyfinMediaType string

// List of MediaType
const (
	UNKNOWN JellyfinMediaType = "Unknown"
	VIDEO JellyfinMediaType = "Video"
	AUDIO JellyfinMediaType = "Audio"
	PHOTO JellyfinMediaType = "Photo"
	BOOK JellyfinMediaType = "Book"
)

// All allowed values of JellyfinMediaType enum
var AllowedJellyfinMediaTypeEnumValues = []JellyfinMediaType{
	"Unknown",
	"Video",
	"Audio",
	"Photo",
	"Book",
}

func (v *JellyfinMediaType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinMediaType(value)
	for _, existing := range AllowedJellyfinMediaTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinMediaType", value)
}

// NewJellyfinMediaTypeFromValue returns a pointer to a valid JellyfinMediaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinMediaTypeFromValue(v string) (*JellyfinMediaType, error) {
	ev := JellyfinMediaType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinMediaType: valid values are %v", v, AllowedJellyfinMediaTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinMediaType) IsValid() bool {
	for _, existing := range AllowedJellyfinMediaTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MediaType value
func (v JellyfinMediaType) Ptr() *JellyfinMediaType {
	return &v
}

type NullableJellyfinMediaType struct {
	value *JellyfinMediaType
	isSet bool
}

func (v NullableJellyfinMediaType) Get() *JellyfinMediaType {
	return v.value
}

func (v *NullableJellyfinMediaType) Set(val *JellyfinMediaType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinMediaType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinMediaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinMediaType(val *JellyfinMediaType) *NullableJellyfinMediaType {
	return &NullableJellyfinMediaType{value: val, isSet: true}
}

func (v NullableJellyfinMediaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinMediaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

