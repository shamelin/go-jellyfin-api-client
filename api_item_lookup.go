/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ItemLookupAPIService ItemLookupAPI service
type ItemLookupAPIService service

type ItemLookupAPIApplySearchCriteriaRequest struct {
	ctx context.Context
	ApiService *ItemLookupAPIService
	itemId string
	jellyfinRemoteSearchResult *JellyfinRemoteSearchResult
	replaceAllImages *bool
}

// The remote search result.
func (r ItemLookupAPIApplySearchCriteriaRequest) JellyfinRemoteSearchResult(jellyfinRemoteSearchResult JellyfinRemoteSearchResult) ItemLookupAPIApplySearchCriteriaRequest {
	r.jellyfinRemoteSearchResult = &jellyfinRemoteSearchResult
	return r
}

// Optional. Whether or not to replace all images. Default: True.
func (r ItemLookupAPIApplySearchCriteriaRequest) ReplaceAllImages(replaceAllImages bool) ItemLookupAPIApplySearchCriteriaRequest {
	r.replaceAllImages = &replaceAllImages
	return r
}

func (r ItemLookupAPIApplySearchCriteriaRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApplySearchCriteriaExecute(r)
}

/*
ApplySearchCriteria Applies search criteria to an item and refreshes metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId Item id.
 @return ItemLookupAPIApplySearchCriteriaRequest
*/
func (a *ItemLookupAPIService) ApplySearchCriteria(ctx context.Context, itemId string) ItemLookupAPIApplySearchCriteriaRequest {
	return ItemLookupAPIApplySearchCriteriaRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
func (a *ItemLookupAPIService) ApplySearchCriteriaExecute(r ItemLookupAPIApplySearchCriteriaRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupAPIService.ApplySearchCriteria")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Apply/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jellyfinRemoteSearchResult == nil {
		return nil, reportError("jellyfinRemoteSearchResult is required and must be specified")
	}

	if r.replaceAllImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "replaceAllImages", r.replaceAllImages, "form", "")
	} else {
		var defaultValue bool = true
		r.replaceAllImages = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinRemoteSearchResult
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ItemLookupAPIGetBookRemoteSearchResultsRequest struct {
	ctx context.Context
	ApiService *ItemLookupAPIService
	jellyfinBookInfoRemoteSearchQuery *JellyfinBookInfoRemoteSearchQuery
}

// Remote search query.
func (r ItemLookupAPIGetBookRemoteSearchResultsRequest) JellyfinBookInfoRemoteSearchQuery(jellyfinBookInfoRemoteSearchQuery JellyfinBookInfoRemoteSearchQuery) ItemLookupAPIGetBookRemoteSearchResultsRequest {
	r.jellyfinBookInfoRemoteSearchQuery = &jellyfinBookInfoRemoteSearchQuery
	return r
}

func (r ItemLookupAPIGetBookRemoteSearchResultsRequest) Execute() ([]JellyfinRemoteSearchResult, *http.Response, error) {
	return r.ApiService.GetBookRemoteSearchResultsExecute(r)
}

/*
GetBookRemoteSearchResults Get book remote search.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ItemLookupAPIGetBookRemoteSearchResultsRequest
*/
func (a *ItemLookupAPIService) GetBookRemoteSearchResults(ctx context.Context) ItemLookupAPIGetBookRemoteSearchResultsRequest {
	return ItemLookupAPIGetBookRemoteSearchResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JellyfinRemoteSearchResult
func (a *ItemLookupAPIService) GetBookRemoteSearchResultsExecute(r ItemLookupAPIGetBookRemoteSearchResultsRequest) ([]JellyfinRemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JellyfinRemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupAPIService.GetBookRemoteSearchResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Book"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jellyfinBookInfoRemoteSearchQuery == nil {
		return localVarReturnValue, nil, reportError("jellyfinBookInfoRemoteSearchQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinBookInfoRemoteSearchQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ItemLookupAPIGetBoxSetRemoteSearchResultsRequest struct {
	ctx context.Context
	ApiService *ItemLookupAPIService
	jellyfinBoxSetInfoRemoteSearchQuery *JellyfinBoxSetInfoRemoteSearchQuery
}

// Remote search query.
func (r ItemLookupAPIGetBoxSetRemoteSearchResultsRequest) JellyfinBoxSetInfoRemoteSearchQuery(jellyfinBoxSetInfoRemoteSearchQuery JellyfinBoxSetInfoRemoteSearchQuery) ItemLookupAPIGetBoxSetRemoteSearchResultsRequest {
	r.jellyfinBoxSetInfoRemoteSearchQuery = &jellyfinBoxSetInfoRemoteSearchQuery
	return r
}

func (r ItemLookupAPIGetBoxSetRemoteSearchResultsRequest) Execute() ([]JellyfinRemoteSearchResult, *http.Response, error) {
	return r.ApiService.GetBoxSetRemoteSearchResultsExecute(r)
}

/*
GetBoxSetRemoteSearchResults Get box set remote search.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ItemLookupAPIGetBoxSetRemoteSearchResultsRequest
*/
func (a *ItemLookupAPIService) GetBoxSetRemoteSearchResults(ctx context.Context) ItemLookupAPIGetBoxSetRemoteSearchResultsRequest {
	return ItemLookupAPIGetBoxSetRemoteSearchResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JellyfinRemoteSearchResult
func (a *ItemLookupAPIService) GetBoxSetRemoteSearchResultsExecute(r ItemLookupAPIGetBoxSetRemoteSearchResultsRequest) ([]JellyfinRemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JellyfinRemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupAPIService.GetBoxSetRemoteSearchResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/BoxSet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jellyfinBoxSetInfoRemoteSearchQuery == nil {
		return localVarReturnValue, nil, reportError("jellyfinBoxSetInfoRemoteSearchQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinBoxSetInfoRemoteSearchQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ItemLookupAPIGetExternalIdInfosRequest struct {
	ctx context.Context
	ApiService *ItemLookupAPIService
	itemId string
}

func (r ItemLookupAPIGetExternalIdInfosRequest) Execute() ([]JellyfinExternalIdInfo, *http.Response, error) {
	return r.ApiService.GetExternalIdInfosExecute(r)
}

/*
GetExternalIdInfos Get the item's external id info.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId Item id.
 @return ItemLookupAPIGetExternalIdInfosRequest
*/
func (a *ItemLookupAPIService) GetExternalIdInfos(ctx context.Context, itemId string) ItemLookupAPIGetExternalIdInfosRequest {
	return ItemLookupAPIGetExternalIdInfosRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return []JellyfinExternalIdInfo
func (a *ItemLookupAPIService) GetExternalIdInfosExecute(r ItemLookupAPIGetExternalIdInfosRequest) ([]JellyfinExternalIdInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JellyfinExternalIdInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupAPIService.GetExternalIdInfos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{itemId}/ExternalIdInfos"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v JellyfinProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ItemLookupAPIGetMovieRemoteSearchResultsRequest struct {
	ctx context.Context
	ApiService *ItemLookupAPIService
	jellyfinMovieInfoRemoteSearchQuery *JellyfinMovieInfoRemoteSearchQuery
}

// Remote search query.
func (r ItemLookupAPIGetMovieRemoteSearchResultsRequest) JellyfinMovieInfoRemoteSearchQuery(jellyfinMovieInfoRemoteSearchQuery JellyfinMovieInfoRemoteSearchQuery) ItemLookupAPIGetMovieRemoteSearchResultsRequest {
	r.jellyfinMovieInfoRemoteSearchQuery = &jellyfinMovieInfoRemoteSearchQuery
	return r
}

func (r ItemLookupAPIGetMovieRemoteSearchResultsRequest) Execute() ([]JellyfinRemoteSearchResult, *http.Response, error) {
	return r.ApiService.GetMovieRemoteSearchResultsExecute(r)
}

/*
GetMovieRemoteSearchResults Get movie remote search.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ItemLookupAPIGetMovieRemoteSearchResultsRequest
*/
func (a *ItemLookupAPIService) GetMovieRemoteSearchResults(ctx context.Context) ItemLookupAPIGetMovieRemoteSearchResultsRequest {
	return ItemLookupAPIGetMovieRemoteSearchResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JellyfinRemoteSearchResult
func (a *ItemLookupAPIService) GetMovieRemoteSearchResultsExecute(r ItemLookupAPIGetMovieRemoteSearchResultsRequest) ([]JellyfinRemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JellyfinRemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupAPIService.GetMovieRemoteSearchResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Movie"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jellyfinMovieInfoRemoteSearchQuery == nil {
		return localVarReturnValue, nil, reportError("jellyfinMovieInfoRemoteSearchQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinMovieInfoRemoteSearchQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ItemLookupAPIGetMusicAlbumRemoteSearchResultsRequest struct {
	ctx context.Context
	ApiService *ItemLookupAPIService
	jellyfinAlbumInfoRemoteSearchQuery *JellyfinAlbumInfoRemoteSearchQuery
}

// Remote search query.
func (r ItemLookupAPIGetMusicAlbumRemoteSearchResultsRequest) JellyfinAlbumInfoRemoteSearchQuery(jellyfinAlbumInfoRemoteSearchQuery JellyfinAlbumInfoRemoteSearchQuery) ItemLookupAPIGetMusicAlbumRemoteSearchResultsRequest {
	r.jellyfinAlbumInfoRemoteSearchQuery = &jellyfinAlbumInfoRemoteSearchQuery
	return r
}

func (r ItemLookupAPIGetMusicAlbumRemoteSearchResultsRequest) Execute() ([]JellyfinRemoteSearchResult, *http.Response, error) {
	return r.ApiService.GetMusicAlbumRemoteSearchResultsExecute(r)
}

/*
GetMusicAlbumRemoteSearchResults Get music album remote search.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ItemLookupAPIGetMusicAlbumRemoteSearchResultsRequest
*/
func (a *ItemLookupAPIService) GetMusicAlbumRemoteSearchResults(ctx context.Context) ItemLookupAPIGetMusicAlbumRemoteSearchResultsRequest {
	return ItemLookupAPIGetMusicAlbumRemoteSearchResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JellyfinRemoteSearchResult
func (a *ItemLookupAPIService) GetMusicAlbumRemoteSearchResultsExecute(r ItemLookupAPIGetMusicAlbumRemoteSearchResultsRequest) ([]JellyfinRemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JellyfinRemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupAPIService.GetMusicAlbumRemoteSearchResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/MusicAlbum"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jellyfinAlbumInfoRemoteSearchQuery == nil {
		return localVarReturnValue, nil, reportError("jellyfinAlbumInfoRemoteSearchQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinAlbumInfoRemoteSearchQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ItemLookupAPIGetMusicArtistRemoteSearchResultsRequest struct {
	ctx context.Context
	ApiService *ItemLookupAPIService
	jellyfinArtistInfoRemoteSearchQuery *JellyfinArtistInfoRemoteSearchQuery
}

// Remote search query.
func (r ItemLookupAPIGetMusicArtistRemoteSearchResultsRequest) JellyfinArtistInfoRemoteSearchQuery(jellyfinArtistInfoRemoteSearchQuery JellyfinArtistInfoRemoteSearchQuery) ItemLookupAPIGetMusicArtistRemoteSearchResultsRequest {
	r.jellyfinArtistInfoRemoteSearchQuery = &jellyfinArtistInfoRemoteSearchQuery
	return r
}

func (r ItemLookupAPIGetMusicArtistRemoteSearchResultsRequest) Execute() ([]JellyfinRemoteSearchResult, *http.Response, error) {
	return r.ApiService.GetMusicArtistRemoteSearchResultsExecute(r)
}

/*
GetMusicArtistRemoteSearchResults Get music artist remote search.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ItemLookupAPIGetMusicArtistRemoteSearchResultsRequest
*/
func (a *ItemLookupAPIService) GetMusicArtistRemoteSearchResults(ctx context.Context) ItemLookupAPIGetMusicArtistRemoteSearchResultsRequest {
	return ItemLookupAPIGetMusicArtistRemoteSearchResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JellyfinRemoteSearchResult
func (a *ItemLookupAPIService) GetMusicArtistRemoteSearchResultsExecute(r ItemLookupAPIGetMusicArtistRemoteSearchResultsRequest) ([]JellyfinRemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JellyfinRemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupAPIService.GetMusicArtistRemoteSearchResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/MusicArtist"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jellyfinArtistInfoRemoteSearchQuery == nil {
		return localVarReturnValue, nil, reportError("jellyfinArtistInfoRemoteSearchQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinArtistInfoRemoteSearchQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ItemLookupAPIGetMusicVideoRemoteSearchResultsRequest struct {
	ctx context.Context
	ApiService *ItemLookupAPIService
	jellyfinMusicVideoInfoRemoteSearchQuery *JellyfinMusicVideoInfoRemoteSearchQuery
}

// Remote search query.
func (r ItemLookupAPIGetMusicVideoRemoteSearchResultsRequest) JellyfinMusicVideoInfoRemoteSearchQuery(jellyfinMusicVideoInfoRemoteSearchQuery JellyfinMusicVideoInfoRemoteSearchQuery) ItemLookupAPIGetMusicVideoRemoteSearchResultsRequest {
	r.jellyfinMusicVideoInfoRemoteSearchQuery = &jellyfinMusicVideoInfoRemoteSearchQuery
	return r
}

func (r ItemLookupAPIGetMusicVideoRemoteSearchResultsRequest) Execute() ([]JellyfinRemoteSearchResult, *http.Response, error) {
	return r.ApiService.GetMusicVideoRemoteSearchResultsExecute(r)
}

/*
GetMusicVideoRemoteSearchResults Get music video remote search.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ItemLookupAPIGetMusicVideoRemoteSearchResultsRequest
*/
func (a *ItemLookupAPIService) GetMusicVideoRemoteSearchResults(ctx context.Context) ItemLookupAPIGetMusicVideoRemoteSearchResultsRequest {
	return ItemLookupAPIGetMusicVideoRemoteSearchResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JellyfinRemoteSearchResult
func (a *ItemLookupAPIService) GetMusicVideoRemoteSearchResultsExecute(r ItemLookupAPIGetMusicVideoRemoteSearchResultsRequest) ([]JellyfinRemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JellyfinRemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupAPIService.GetMusicVideoRemoteSearchResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/MusicVideo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jellyfinMusicVideoInfoRemoteSearchQuery == nil {
		return localVarReturnValue, nil, reportError("jellyfinMusicVideoInfoRemoteSearchQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinMusicVideoInfoRemoteSearchQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ItemLookupAPIGetPersonRemoteSearchResultsRequest struct {
	ctx context.Context
	ApiService *ItemLookupAPIService
	jellyfinPersonLookupInfoRemoteSearchQuery *JellyfinPersonLookupInfoRemoteSearchQuery
}

// Remote search query.
func (r ItemLookupAPIGetPersonRemoteSearchResultsRequest) JellyfinPersonLookupInfoRemoteSearchQuery(jellyfinPersonLookupInfoRemoteSearchQuery JellyfinPersonLookupInfoRemoteSearchQuery) ItemLookupAPIGetPersonRemoteSearchResultsRequest {
	r.jellyfinPersonLookupInfoRemoteSearchQuery = &jellyfinPersonLookupInfoRemoteSearchQuery
	return r
}

func (r ItemLookupAPIGetPersonRemoteSearchResultsRequest) Execute() ([]JellyfinRemoteSearchResult, *http.Response, error) {
	return r.ApiService.GetPersonRemoteSearchResultsExecute(r)
}

/*
GetPersonRemoteSearchResults Get person remote search.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ItemLookupAPIGetPersonRemoteSearchResultsRequest
*/
func (a *ItemLookupAPIService) GetPersonRemoteSearchResults(ctx context.Context) ItemLookupAPIGetPersonRemoteSearchResultsRequest {
	return ItemLookupAPIGetPersonRemoteSearchResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JellyfinRemoteSearchResult
func (a *ItemLookupAPIService) GetPersonRemoteSearchResultsExecute(r ItemLookupAPIGetPersonRemoteSearchResultsRequest) ([]JellyfinRemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JellyfinRemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupAPIService.GetPersonRemoteSearchResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Person"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jellyfinPersonLookupInfoRemoteSearchQuery == nil {
		return localVarReturnValue, nil, reportError("jellyfinPersonLookupInfoRemoteSearchQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinPersonLookupInfoRemoteSearchQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ItemLookupAPIGetSeriesRemoteSearchResultsRequest struct {
	ctx context.Context
	ApiService *ItemLookupAPIService
	jellyfinSeriesInfoRemoteSearchQuery *JellyfinSeriesInfoRemoteSearchQuery
}

// Remote search query.
func (r ItemLookupAPIGetSeriesRemoteSearchResultsRequest) JellyfinSeriesInfoRemoteSearchQuery(jellyfinSeriesInfoRemoteSearchQuery JellyfinSeriesInfoRemoteSearchQuery) ItemLookupAPIGetSeriesRemoteSearchResultsRequest {
	r.jellyfinSeriesInfoRemoteSearchQuery = &jellyfinSeriesInfoRemoteSearchQuery
	return r
}

func (r ItemLookupAPIGetSeriesRemoteSearchResultsRequest) Execute() ([]JellyfinRemoteSearchResult, *http.Response, error) {
	return r.ApiService.GetSeriesRemoteSearchResultsExecute(r)
}

/*
GetSeriesRemoteSearchResults Get series remote search.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ItemLookupAPIGetSeriesRemoteSearchResultsRequest
*/
func (a *ItemLookupAPIService) GetSeriesRemoteSearchResults(ctx context.Context) ItemLookupAPIGetSeriesRemoteSearchResultsRequest {
	return ItemLookupAPIGetSeriesRemoteSearchResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JellyfinRemoteSearchResult
func (a *ItemLookupAPIService) GetSeriesRemoteSearchResultsExecute(r ItemLookupAPIGetSeriesRemoteSearchResultsRequest) ([]JellyfinRemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JellyfinRemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupAPIService.GetSeriesRemoteSearchResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Series"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jellyfinSeriesInfoRemoteSearchQuery == nil {
		return localVarReturnValue, nil, reportError("jellyfinSeriesInfoRemoteSearchQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinSeriesInfoRemoteSearchQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ItemLookupAPIGetTrailerRemoteSearchResultsRequest struct {
	ctx context.Context
	ApiService *ItemLookupAPIService
	jellyfinTrailerInfoRemoteSearchQuery *JellyfinTrailerInfoRemoteSearchQuery
}

// Remote search query.
func (r ItemLookupAPIGetTrailerRemoteSearchResultsRequest) JellyfinTrailerInfoRemoteSearchQuery(jellyfinTrailerInfoRemoteSearchQuery JellyfinTrailerInfoRemoteSearchQuery) ItemLookupAPIGetTrailerRemoteSearchResultsRequest {
	r.jellyfinTrailerInfoRemoteSearchQuery = &jellyfinTrailerInfoRemoteSearchQuery
	return r
}

func (r ItemLookupAPIGetTrailerRemoteSearchResultsRequest) Execute() ([]JellyfinRemoteSearchResult, *http.Response, error) {
	return r.ApiService.GetTrailerRemoteSearchResultsExecute(r)
}

/*
GetTrailerRemoteSearchResults Get trailer remote search.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ItemLookupAPIGetTrailerRemoteSearchResultsRequest
*/
func (a *ItemLookupAPIService) GetTrailerRemoteSearchResults(ctx context.Context) ItemLookupAPIGetTrailerRemoteSearchResultsRequest {
	return ItemLookupAPIGetTrailerRemoteSearchResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []JellyfinRemoteSearchResult
func (a *ItemLookupAPIService) GetTrailerRemoteSearchResultsExecute(r ItemLookupAPIGetTrailerRemoteSearchResultsRequest) ([]JellyfinRemoteSearchResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []JellyfinRemoteSearchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemLookupAPIService.GetTrailerRemoteSearchResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/RemoteSearch/Trailer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jellyfinTrailerInfoRemoteSearchQuery == nil {
		return localVarReturnValue, nil, reportError("jellyfinTrailerInfoRemoteSearchQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jellyfinTrailerInfoRemoteSearchQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
