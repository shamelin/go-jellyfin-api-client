/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinCollectionTypeOptions The collection type options.
type JellyfinCollectionTypeOptions string

// List of CollectionTypeOptions
const (
	JELLYFINCOLLECTIONTYPEOPTIONS_MOVIES JellyfinCollectionTypeOptions = "movies"
	JELLYFINCOLLECTIONTYPEOPTIONS_TVSHOWS JellyfinCollectionTypeOptions = "tvshows"
	JELLYFINCOLLECTIONTYPEOPTIONS_MUSIC JellyfinCollectionTypeOptions = "music"
	JELLYFINCOLLECTIONTYPEOPTIONS_MUSICVIDEOS JellyfinCollectionTypeOptions = "musicvideos"
	JELLYFINCOLLECTIONTYPEOPTIONS_HOMEVIDEOS JellyfinCollectionTypeOptions = "homevideos"
	JELLYFINCOLLECTIONTYPEOPTIONS_BOXSETS JellyfinCollectionTypeOptions = "boxsets"
	JELLYFINCOLLECTIONTYPEOPTIONS_BOOKS JellyfinCollectionTypeOptions = "books"
	JELLYFINCOLLECTIONTYPEOPTIONS_MIXED JellyfinCollectionTypeOptions = "mixed"
)

// All allowed values of JellyfinCollectionTypeOptions enum
var AllowedJellyfinCollectionTypeOptionsEnumValues = []JellyfinCollectionTypeOptions{
	"movies",
	"tvshows",
	"music",
	"musicvideos",
	"homevideos",
	"boxsets",
	"books",
	"mixed",
}

func (v *JellyfinCollectionTypeOptions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinCollectionTypeOptions(value)
	for _, existing := range AllowedJellyfinCollectionTypeOptionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinCollectionTypeOptions", value)
}

// NewJellyfinCollectionTypeOptionsFromValue returns a pointer to a valid JellyfinCollectionTypeOptions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinCollectionTypeOptionsFromValue(v string) (*JellyfinCollectionTypeOptions, error) {
	ev := JellyfinCollectionTypeOptions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinCollectionTypeOptions: valid values are %v", v, AllowedJellyfinCollectionTypeOptionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinCollectionTypeOptions) IsValid() bool {
	for _, existing := range AllowedJellyfinCollectionTypeOptionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CollectionTypeOptions value
func (v JellyfinCollectionTypeOptions) Ptr() *JellyfinCollectionTypeOptions {
	return &v
}

type NullableJellyfinCollectionTypeOptions struct {
	value *JellyfinCollectionTypeOptions
	isSet bool
}

func (v NullableJellyfinCollectionTypeOptions) Get() *JellyfinCollectionTypeOptions {
	return v.value
}

func (v *NullableJellyfinCollectionTypeOptions) Set(val *JellyfinCollectionTypeOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinCollectionTypeOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinCollectionTypeOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinCollectionTypeOptions(val *JellyfinCollectionTypeOptions) *NullableJellyfinCollectionTypeOptions {
	return &NullableJellyfinCollectionTypeOptions{value: val, isSet: true}
}

func (v NullableJellyfinCollectionTypeOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinCollectionTypeOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

