/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinLibraryTypeOptionsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinLibraryTypeOptionsDto{}

// JellyfinLibraryTypeOptionsDto Library type options dto.
type JellyfinLibraryTypeOptionsDto struct {
	// Gets or sets the type.
	Type NullableString `json:"Type,omitempty"`
	// Gets or sets the metadata fetchers.
	MetadataFetchers []JellyfinLibraryOptionInfoDto `json:"MetadataFetchers,omitempty"`
	// Gets or sets the image fetchers.
	ImageFetchers []JellyfinLibraryOptionInfoDto `json:"ImageFetchers,omitempty"`
	// Gets or sets the supported image types.
	SupportedImageTypes []JellyfinImageType `json:"SupportedImageTypes,omitempty"`
	// Gets or sets the default image options.
	DefaultImageOptions []JellyfinImageOption `json:"DefaultImageOptions,omitempty"`
}

// NewJellyfinLibraryTypeOptionsDto instantiates a new JellyfinLibraryTypeOptionsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinLibraryTypeOptionsDto() *JellyfinLibraryTypeOptionsDto {
	this := JellyfinLibraryTypeOptionsDto{}
	return &this
}

// NewJellyfinLibraryTypeOptionsDtoWithDefaults instantiates a new JellyfinLibraryTypeOptionsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinLibraryTypeOptionsDtoWithDefaults() *JellyfinLibraryTypeOptionsDto {
	this := JellyfinLibraryTypeOptionsDto{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinLibraryTypeOptionsDto) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinLibraryTypeOptionsDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *JellyfinLibraryTypeOptionsDto) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *JellyfinLibraryTypeOptionsDto) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *JellyfinLibraryTypeOptionsDto) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *JellyfinLibraryTypeOptionsDto) UnsetType() {
	o.Type.Unset()
}

// GetMetadataFetchers returns the MetadataFetchers field value if set, zero value otherwise.
func (o *JellyfinLibraryTypeOptionsDto) GetMetadataFetchers() []JellyfinLibraryOptionInfoDto {
	if o == nil || IsNil(o.MetadataFetchers) {
		var ret []JellyfinLibraryOptionInfoDto
		return ret
	}
	return o.MetadataFetchers
}

// GetMetadataFetchersOk returns a tuple with the MetadataFetchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinLibraryTypeOptionsDto) GetMetadataFetchersOk() ([]JellyfinLibraryOptionInfoDto, bool) {
	if o == nil || IsNil(o.MetadataFetchers) {
		return nil, false
	}
	return o.MetadataFetchers, true
}

// HasMetadataFetchers returns a boolean if a field has been set.
func (o *JellyfinLibraryTypeOptionsDto) HasMetadataFetchers() bool {
	if o != nil && !IsNil(o.MetadataFetchers) {
		return true
	}

	return false
}

// SetMetadataFetchers gets a reference to the given []JellyfinLibraryOptionInfoDto and assigns it to the MetadataFetchers field.
func (o *JellyfinLibraryTypeOptionsDto) SetMetadataFetchers(v []JellyfinLibraryOptionInfoDto) {
	o.MetadataFetchers = v
}

// GetImageFetchers returns the ImageFetchers field value if set, zero value otherwise.
func (o *JellyfinLibraryTypeOptionsDto) GetImageFetchers() []JellyfinLibraryOptionInfoDto {
	if o == nil || IsNil(o.ImageFetchers) {
		var ret []JellyfinLibraryOptionInfoDto
		return ret
	}
	return o.ImageFetchers
}

// GetImageFetchersOk returns a tuple with the ImageFetchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinLibraryTypeOptionsDto) GetImageFetchersOk() ([]JellyfinLibraryOptionInfoDto, bool) {
	if o == nil || IsNil(o.ImageFetchers) {
		return nil, false
	}
	return o.ImageFetchers, true
}

// HasImageFetchers returns a boolean if a field has been set.
func (o *JellyfinLibraryTypeOptionsDto) HasImageFetchers() bool {
	if o != nil && !IsNil(o.ImageFetchers) {
		return true
	}

	return false
}

// SetImageFetchers gets a reference to the given []JellyfinLibraryOptionInfoDto and assigns it to the ImageFetchers field.
func (o *JellyfinLibraryTypeOptionsDto) SetImageFetchers(v []JellyfinLibraryOptionInfoDto) {
	o.ImageFetchers = v
}

// GetSupportedImageTypes returns the SupportedImageTypes field value if set, zero value otherwise.
func (o *JellyfinLibraryTypeOptionsDto) GetSupportedImageTypes() []JellyfinImageType {
	if o == nil || IsNil(o.SupportedImageTypes) {
		var ret []JellyfinImageType
		return ret
	}
	return o.SupportedImageTypes
}

// GetSupportedImageTypesOk returns a tuple with the SupportedImageTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinLibraryTypeOptionsDto) GetSupportedImageTypesOk() ([]JellyfinImageType, bool) {
	if o == nil || IsNil(o.SupportedImageTypes) {
		return nil, false
	}
	return o.SupportedImageTypes, true
}

// HasSupportedImageTypes returns a boolean if a field has been set.
func (o *JellyfinLibraryTypeOptionsDto) HasSupportedImageTypes() bool {
	if o != nil && !IsNil(o.SupportedImageTypes) {
		return true
	}

	return false
}

// SetSupportedImageTypes gets a reference to the given []JellyfinImageType and assigns it to the SupportedImageTypes field.
func (o *JellyfinLibraryTypeOptionsDto) SetSupportedImageTypes(v []JellyfinImageType) {
	o.SupportedImageTypes = v
}

// GetDefaultImageOptions returns the DefaultImageOptions field value if set, zero value otherwise.
func (o *JellyfinLibraryTypeOptionsDto) GetDefaultImageOptions() []JellyfinImageOption {
	if o == nil || IsNil(o.DefaultImageOptions) {
		var ret []JellyfinImageOption
		return ret
	}
	return o.DefaultImageOptions
}

// GetDefaultImageOptionsOk returns a tuple with the DefaultImageOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinLibraryTypeOptionsDto) GetDefaultImageOptionsOk() ([]JellyfinImageOption, bool) {
	if o == nil || IsNil(o.DefaultImageOptions) {
		return nil, false
	}
	return o.DefaultImageOptions, true
}

// HasDefaultImageOptions returns a boolean if a field has been set.
func (o *JellyfinLibraryTypeOptionsDto) HasDefaultImageOptions() bool {
	if o != nil && !IsNil(o.DefaultImageOptions) {
		return true
	}

	return false
}

// SetDefaultImageOptions gets a reference to the given []JellyfinImageOption and assigns it to the DefaultImageOptions field.
func (o *JellyfinLibraryTypeOptionsDto) SetDefaultImageOptions(v []JellyfinImageOption) {
	o.DefaultImageOptions = v
}

func (o JellyfinLibraryTypeOptionsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinLibraryTypeOptionsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["Type"] = o.Type.Get()
	}
	if !IsNil(o.MetadataFetchers) {
		toSerialize["MetadataFetchers"] = o.MetadataFetchers
	}
	if !IsNil(o.ImageFetchers) {
		toSerialize["ImageFetchers"] = o.ImageFetchers
	}
	if !IsNil(o.SupportedImageTypes) {
		toSerialize["SupportedImageTypes"] = o.SupportedImageTypes
	}
	if !IsNil(o.DefaultImageOptions) {
		toSerialize["DefaultImageOptions"] = o.DefaultImageOptions
	}
	return toSerialize, nil
}

type NullableJellyfinLibraryTypeOptionsDto struct {
	value *JellyfinLibraryTypeOptionsDto
	isSet bool
}

func (v NullableJellyfinLibraryTypeOptionsDto) Get() *JellyfinLibraryTypeOptionsDto {
	return v.value
}

func (v *NullableJellyfinLibraryTypeOptionsDto) Set(val *JellyfinLibraryTypeOptionsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinLibraryTypeOptionsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinLibraryTypeOptionsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinLibraryTypeOptionsDto(val *JellyfinLibraryTypeOptionsDto) *NullableJellyfinLibraryTypeOptionsDto {
	return &NullableJellyfinLibraryTypeOptionsDto{value: val, isSet: true}
}

func (v NullableJellyfinLibraryTypeOptionsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinLibraryTypeOptionsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


