/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinListingsProviderInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinListingsProviderInfo{}

// JellyfinListingsProviderInfo struct for JellyfinListingsProviderInfo
type JellyfinListingsProviderInfo struct {
	Id NullableString `json:"Id,omitempty"`
	Type NullableString `json:"Type,omitempty"`
	Username NullableString `json:"Username,omitempty"`
	Password NullableString `json:"Password,omitempty"`
	ListingsId NullableString `json:"ListingsId,omitempty"`
	ZipCode NullableString `json:"ZipCode,omitempty"`
	Country NullableString `json:"Country,omitempty"`
	Path NullableString `json:"Path,omitempty"`
	EnabledTuners []string `json:"EnabledTuners,omitempty"`
	EnableAllTuners *bool `json:"EnableAllTuners,omitempty"`
	NewsCategories []string `json:"NewsCategories,omitempty"`
	SportsCategories []string `json:"SportsCategories,omitempty"`
	KidsCategories []string `json:"KidsCategories,omitempty"`
	MovieCategories []string `json:"MovieCategories,omitempty"`
	ChannelMappings []JellyfinNameValuePair `json:"ChannelMappings,omitempty"`
	MoviePrefix NullableString `json:"MoviePrefix,omitempty"`
	PreferredLanguage NullableString `json:"PreferredLanguage,omitempty"`
	UserAgent NullableString `json:"UserAgent,omitempty"`
}

// NewJellyfinListingsProviderInfo instantiates a new JellyfinListingsProviderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinListingsProviderInfo() *JellyfinListingsProviderInfo {
	this := JellyfinListingsProviderInfo{}
	return &this
}

// NewJellyfinListingsProviderInfoWithDefaults instantiates a new JellyfinListingsProviderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinListingsProviderInfoWithDefaults() *JellyfinListingsProviderInfo {
	this := JellyfinListingsProviderInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *JellyfinListingsProviderInfo) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *JellyfinListingsProviderInfo) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *JellyfinListingsProviderInfo) UnsetId() {
	o.Id.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *JellyfinListingsProviderInfo) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *JellyfinListingsProviderInfo) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *JellyfinListingsProviderInfo) UnsetType() {
	o.Type.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *JellyfinListingsProviderInfo) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *JellyfinListingsProviderInfo) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *JellyfinListingsProviderInfo) UnsetUsername() {
	o.Username.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *JellyfinListingsProviderInfo) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *JellyfinListingsProviderInfo) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *JellyfinListingsProviderInfo) UnsetPassword() {
	o.Password.Unset()
}

// GetListingsId returns the ListingsId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetListingsId() string {
	if o == nil || IsNil(o.ListingsId.Get()) {
		var ret string
		return ret
	}
	return *o.ListingsId.Get()
}

// GetListingsIdOk returns a tuple with the ListingsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetListingsIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ListingsId.Get(), o.ListingsId.IsSet()
}

// HasListingsId returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasListingsId() bool {
	if o != nil && o.ListingsId.IsSet() {
		return true
	}

	return false
}

// SetListingsId gets a reference to the given NullableString and assigns it to the ListingsId field.
func (o *JellyfinListingsProviderInfo) SetListingsId(v string) {
	o.ListingsId.Set(&v)
}
// SetListingsIdNil sets the value for ListingsId to be an explicit nil
func (o *JellyfinListingsProviderInfo) SetListingsIdNil() {
	o.ListingsId.Set(nil)
}

// UnsetListingsId ensures that no value is present for ListingsId, not even an explicit nil
func (o *JellyfinListingsProviderInfo) UnsetListingsId() {
	o.ListingsId.Unset()
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetZipCode() string {
	if o == nil || IsNil(o.ZipCode.Get()) {
		var ret string
		return ret
	}
	return *o.ZipCode.Get()
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetZipCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZipCode.Get(), o.ZipCode.IsSet()
}

// HasZipCode returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasZipCode() bool {
	if o != nil && o.ZipCode.IsSet() {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given NullableString and assigns it to the ZipCode field.
func (o *JellyfinListingsProviderInfo) SetZipCode(v string) {
	o.ZipCode.Set(&v)
}
// SetZipCodeNil sets the value for ZipCode to be an explicit nil
func (o *JellyfinListingsProviderInfo) SetZipCodeNil() {
	o.ZipCode.Set(nil)
}

// UnsetZipCode ensures that no value is present for ZipCode, not even an explicit nil
func (o *JellyfinListingsProviderInfo) UnsetZipCode() {
	o.ZipCode.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetCountry() string {
	if o == nil || IsNil(o.Country.Get()) {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *JellyfinListingsProviderInfo) SetCountry(v string) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *JellyfinListingsProviderInfo) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *JellyfinListingsProviderInfo) UnsetCountry() {
	o.Country.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *JellyfinListingsProviderInfo) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *JellyfinListingsProviderInfo) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *JellyfinListingsProviderInfo) UnsetPath() {
	o.Path.Unset()
}

// GetEnabledTuners returns the EnabledTuners field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetEnabledTuners() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.EnabledTuners
}

// GetEnabledTunersOk returns a tuple with the EnabledTuners field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetEnabledTunersOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledTuners) {
		return nil, false
	}
	return o.EnabledTuners, true
}

// HasEnabledTuners returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasEnabledTuners() bool {
	if o != nil && !IsNil(o.EnabledTuners) {
		return true
	}

	return false
}

// SetEnabledTuners gets a reference to the given []string and assigns it to the EnabledTuners field.
func (o *JellyfinListingsProviderInfo) SetEnabledTuners(v []string) {
	o.EnabledTuners = v
}

// GetEnableAllTuners returns the EnableAllTuners field value if set, zero value otherwise.
func (o *JellyfinListingsProviderInfo) GetEnableAllTuners() bool {
	if o == nil || IsNil(o.EnableAllTuners) {
		var ret bool
		return ret
	}
	return *o.EnableAllTuners
}

// GetEnableAllTunersOk returns a tuple with the EnableAllTuners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinListingsProviderInfo) GetEnableAllTunersOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAllTuners) {
		return nil, false
	}
	return o.EnableAllTuners, true
}

// HasEnableAllTuners returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasEnableAllTuners() bool {
	if o != nil && !IsNil(o.EnableAllTuners) {
		return true
	}

	return false
}

// SetEnableAllTuners gets a reference to the given bool and assigns it to the EnableAllTuners field.
func (o *JellyfinListingsProviderInfo) SetEnableAllTuners(v bool) {
	o.EnableAllTuners = &v
}

// GetNewsCategories returns the NewsCategories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetNewsCategories() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NewsCategories
}

// GetNewsCategoriesOk returns a tuple with the NewsCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetNewsCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.NewsCategories) {
		return nil, false
	}
	return o.NewsCategories, true
}

// HasNewsCategories returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasNewsCategories() bool {
	if o != nil && !IsNil(o.NewsCategories) {
		return true
	}

	return false
}

// SetNewsCategories gets a reference to the given []string and assigns it to the NewsCategories field.
func (o *JellyfinListingsProviderInfo) SetNewsCategories(v []string) {
	o.NewsCategories = v
}

// GetSportsCategories returns the SportsCategories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetSportsCategories() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SportsCategories
}

// GetSportsCategoriesOk returns a tuple with the SportsCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetSportsCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.SportsCategories) {
		return nil, false
	}
	return o.SportsCategories, true
}

// HasSportsCategories returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasSportsCategories() bool {
	if o != nil && !IsNil(o.SportsCategories) {
		return true
	}

	return false
}

// SetSportsCategories gets a reference to the given []string and assigns it to the SportsCategories field.
func (o *JellyfinListingsProviderInfo) SetSportsCategories(v []string) {
	o.SportsCategories = v
}

// GetKidsCategories returns the KidsCategories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetKidsCategories() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.KidsCategories
}

// GetKidsCategoriesOk returns a tuple with the KidsCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetKidsCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.KidsCategories) {
		return nil, false
	}
	return o.KidsCategories, true
}

// HasKidsCategories returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasKidsCategories() bool {
	if o != nil && !IsNil(o.KidsCategories) {
		return true
	}

	return false
}

// SetKidsCategories gets a reference to the given []string and assigns it to the KidsCategories field.
func (o *JellyfinListingsProviderInfo) SetKidsCategories(v []string) {
	o.KidsCategories = v
}

// GetMovieCategories returns the MovieCategories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetMovieCategories() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.MovieCategories
}

// GetMovieCategoriesOk returns a tuple with the MovieCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetMovieCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.MovieCategories) {
		return nil, false
	}
	return o.MovieCategories, true
}

// HasMovieCategories returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasMovieCategories() bool {
	if o != nil && !IsNil(o.MovieCategories) {
		return true
	}

	return false
}

// SetMovieCategories gets a reference to the given []string and assigns it to the MovieCategories field.
func (o *JellyfinListingsProviderInfo) SetMovieCategories(v []string) {
	o.MovieCategories = v
}

// GetChannelMappings returns the ChannelMappings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetChannelMappings() []JellyfinNameValuePair {
	if o == nil {
		var ret []JellyfinNameValuePair
		return ret
	}
	return o.ChannelMappings
}

// GetChannelMappingsOk returns a tuple with the ChannelMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetChannelMappingsOk() ([]JellyfinNameValuePair, bool) {
	if o == nil || IsNil(o.ChannelMappings) {
		return nil, false
	}
	return o.ChannelMappings, true
}

// HasChannelMappings returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasChannelMappings() bool {
	if o != nil && !IsNil(o.ChannelMappings) {
		return true
	}

	return false
}

// SetChannelMappings gets a reference to the given []JellyfinNameValuePair and assigns it to the ChannelMappings field.
func (o *JellyfinListingsProviderInfo) SetChannelMappings(v []JellyfinNameValuePair) {
	o.ChannelMappings = v
}

// GetMoviePrefix returns the MoviePrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetMoviePrefix() string {
	if o == nil || IsNil(o.MoviePrefix.Get()) {
		var ret string
		return ret
	}
	return *o.MoviePrefix.Get()
}

// GetMoviePrefixOk returns a tuple with the MoviePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetMoviePrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MoviePrefix.Get(), o.MoviePrefix.IsSet()
}

// HasMoviePrefix returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasMoviePrefix() bool {
	if o != nil && o.MoviePrefix.IsSet() {
		return true
	}

	return false
}

// SetMoviePrefix gets a reference to the given NullableString and assigns it to the MoviePrefix field.
func (o *JellyfinListingsProviderInfo) SetMoviePrefix(v string) {
	o.MoviePrefix.Set(&v)
}
// SetMoviePrefixNil sets the value for MoviePrefix to be an explicit nil
func (o *JellyfinListingsProviderInfo) SetMoviePrefixNil() {
	o.MoviePrefix.Set(nil)
}

// UnsetMoviePrefix ensures that no value is present for MoviePrefix, not even an explicit nil
func (o *JellyfinListingsProviderInfo) UnsetMoviePrefix() {
	o.MoviePrefix.Unset()
}

// GetPreferredLanguage returns the PreferredLanguage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetPreferredLanguage() string {
	if o == nil || IsNil(o.PreferredLanguage.Get()) {
		var ret string
		return ret
	}
	return *o.PreferredLanguage.Get()
}

// GetPreferredLanguageOk returns a tuple with the PreferredLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetPreferredLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreferredLanguage.Get(), o.PreferredLanguage.IsSet()
}

// HasPreferredLanguage returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasPreferredLanguage() bool {
	if o != nil && o.PreferredLanguage.IsSet() {
		return true
	}

	return false
}

// SetPreferredLanguage gets a reference to the given NullableString and assigns it to the PreferredLanguage field.
func (o *JellyfinListingsProviderInfo) SetPreferredLanguage(v string) {
	o.PreferredLanguage.Set(&v)
}
// SetPreferredLanguageNil sets the value for PreferredLanguage to be an explicit nil
func (o *JellyfinListingsProviderInfo) SetPreferredLanguageNil() {
	o.PreferredLanguage.Set(nil)
}

// UnsetPreferredLanguage ensures that no value is present for PreferredLanguage, not even an explicit nil
func (o *JellyfinListingsProviderInfo) UnsetPreferredLanguage() {
	o.PreferredLanguage.Unset()
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JellyfinListingsProviderInfo) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent.Get()) {
		var ret string
		return ret
	}
	return *o.UserAgent.Get()
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JellyfinListingsProviderInfo) GetUserAgentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserAgent.Get(), o.UserAgent.IsSet()
}

// HasUserAgent returns a boolean if a field has been set.
func (o *JellyfinListingsProviderInfo) HasUserAgent() bool {
	if o != nil && o.UserAgent.IsSet() {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given NullableString and assigns it to the UserAgent field.
func (o *JellyfinListingsProviderInfo) SetUserAgent(v string) {
	o.UserAgent.Set(&v)
}
// SetUserAgentNil sets the value for UserAgent to be an explicit nil
func (o *JellyfinListingsProviderInfo) SetUserAgentNil() {
	o.UserAgent.Set(nil)
}

// UnsetUserAgent ensures that no value is present for UserAgent, not even an explicit nil
func (o *JellyfinListingsProviderInfo) UnsetUserAgent() {
	o.UserAgent.Unset()
}

func (o JellyfinListingsProviderInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinListingsProviderInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if o.Type.IsSet() {
		toSerialize["Type"] = o.Type.Get()
	}
	if o.Username.IsSet() {
		toSerialize["Username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["Password"] = o.Password.Get()
	}
	if o.ListingsId.IsSet() {
		toSerialize["ListingsId"] = o.ListingsId.Get()
	}
	if o.ZipCode.IsSet() {
		toSerialize["ZipCode"] = o.ZipCode.Get()
	}
	if o.Country.IsSet() {
		toSerialize["Country"] = o.Country.Get()
	}
	if o.Path.IsSet() {
		toSerialize["Path"] = o.Path.Get()
	}
	if o.EnabledTuners != nil {
		toSerialize["EnabledTuners"] = o.EnabledTuners
	}
	if !IsNil(o.EnableAllTuners) {
		toSerialize["EnableAllTuners"] = o.EnableAllTuners
	}
	if o.NewsCategories != nil {
		toSerialize["NewsCategories"] = o.NewsCategories
	}
	if o.SportsCategories != nil {
		toSerialize["SportsCategories"] = o.SportsCategories
	}
	if o.KidsCategories != nil {
		toSerialize["KidsCategories"] = o.KidsCategories
	}
	if o.MovieCategories != nil {
		toSerialize["MovieCategories"] = o.MovieCategories
	}
	if o.ChannelMappings != nil {
		toSerialize["ChannelMappings"] = o.ChannelMappings
	}
	if o.MoviePrefix.IsSet() {
		toSerialize["MoviePrefix"] = o.MoviePrefix.Get()
	}
	if o.PreferredLanguage.IsSet() {
		toSerialize["PreferredLanguage"] = o.PreferredLanguage.Get()
	}
	if o.UserAgent.IsSet() {
		toSerialize["UserAgent"] = o.UserAgent.Get()
	}
	return toSerialize, nil
}

type NullableJellyfinListingsProviderInfo struct {
	value *JellyfinListingsProviderInfo
	isSet bool
}

func (v NullableJellyfinListingsProviderInfo) Get() *JellyfinListingsProviderInfo {
	return v.value
}

func (v *NullableJellyfinListingsProviderInfo) Set(val *JellyfinListingsProviderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinListingsProviderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinListingsProviderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinListingsProviderInfo(val *JellyfinListingsProviderInfo) *NullableJellyfinListingsProviderInfo {
	return &NullableJellyfinListingsProviderInfo{value: val, isSet: true}
}

func (v NullableJellyfinListingsProviderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinListingsProviderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


