/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinEncoderPreset Enum containing encoder presets.
type JellyfinEncoderPreset string

// List of EncoderPreset
const (
	JELLYFINENCODERPRESET_AUTO JellyfinEncoderPreset = "auto"
	JELLYFINENCODERPRESET_PLACEBO JellyfinEncoderPreset = "placebo"
	JELLYFINENCODERPRESET_VERYSLOW JellyfinEncoderPreset = "veryslow"
	JELLYFINENCODERPRESET_SLOWER JellyfinEncoderPreset = "slower"
	JELLYFINENCODERPRESET_SLOW JellyfinEncoderPreset = "slow"
	JELLYFINENCODERPRESET_MEDIUM JellyfinEncoderPreset = "medium"
	JELLYFINENCODERPRESET_FAST JellyfinEncoderPreset = "fast"
	JELLYFINENCODERPRESET_FASTER JellyfinEncoderPreset = "faster"
	JELLYFINENCODERPRESET_VERYFAST JellyfinEncoderPreset = "veryfast"
	JELLYFINENCODERPRESET_SUPERFAST JellyfinEncoderPreset = "superfast"
	JELLYFINENCODERPRESET_ULTRAFAST JellyfinEncoderPreset = "ultrafast"
)

// All allowed values of JellyfinEncoderPreset enum
var AllowedJellyfinEncoderPresetEnumValues = []JellyfinEncoderPreset{
	"auto",
	"placebo",
	"veryslow",
	"slower",
	"slow",
	"medium",
	"fast",
	"faster",
	"veryfast",
	"superfast",
	"ultrafast",
}

func (v *JellyfinEncoderPreset) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinEncoderPreset(value)
	for _, existing := range AllowedJellyfinEncoderPresetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinEncoderPreset", value)
}

// NewJellyfinEncoderPresetFromValue returns a pointer to a valid JellyfinEncoderPreset
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinEncoderPresetFromValue(v string) (*JellyfinEncoderPreset, error) {
	ev := JellyfinEncoderPreset(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinEncoderPreset: valid values are %v", v, AllowedJellyfinEncoderPresetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinEncoderPreset) IsValid() bool {
	for _, existing := range AllowedJellyfinEncoderPresetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EncoderPreset value
func (v JellyfinEncoderPreset) Ptr() *JellyfinEncoderPreset {
	return &v
}

type NullableJellyfinEncoderPreset struct {
	value *JellyfinEncoderPreset
	isSet bool
}

func (v NullableJellyfinEncoderPreset) Get() *JellyfinEncoderPreset {
	return v.value
}

func (v *NullableJellyfinEncoderPreset) Set(val *JellyfinEncoderPreset) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinEncoderPreset) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinEncoderPreset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinEncoderPreset(val *JellyfinEncoderPreset) *NullableJellyfinEncoderPreset {
	return &NullableJellyfinEncoderPreset{value: val, isSet: true}
}

func (v NullableJellyfinEncoderPreset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinEncoderPreset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

