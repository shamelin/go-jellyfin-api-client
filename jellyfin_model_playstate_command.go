/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinPlaystateCommand Enum PlaystateCommand.
type JellyfinPlaystateCommand string

// List of PlaystateCommand
const (
	STOP JellyfinPlaystateCommand = "Stop"
	PAUSE JellyfinPlaystateCommand = "Pause"
	UNPAUSE JellyfinPlaystateCommand = "Unpause"
	NEXT_TRACK JellyfinPlaystateCommand = "NextTrack"
	PREVIOUS_TRACK JellyfinPlaystateCommand = "PreviousTrack"
	SEEK JellyfinPlaystateCommand = "Seek"
	REWIND JellyfinPlaystateCommand = "Rewind"
	FAST_FORWARD JellyfinPlaystateCommand = "FastForward"
	PLAY_PAUSE JellyfinPlaystateCommand = "PlayPause"
)

// All allowed values of JellyfinPlaystateCommand enum
var AllowedJellyfinPlaystateCommandEnumValues = []JellyfinPlaystateCommand{
	"Stop",
	"Pause",
	"Unpause",
	"NextTrack",
	"PreviousTrack",
	"Seek",
	"Rewind",
	"FastForward",
	"PlayPause",
}

func (v *JellyfinPlaystateCommand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinPlaystateCommand(value)
	for _, existing := range AllowedJellyfinPlaystateCommandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinPlaystateCommand", value)
}

// NewJellyfinPlaystateCommandFromValue returns a pointer to a valid JellyfinPlaystateCommand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinPlaystateCommandFromValue(v string) (*JellyfinPlaystateCommand, error) {
	ev := JellyfinPlaystateCommand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinPlaystateCommand: valid values are %v", v, AllowedJellyfinPlaystateCommandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinPlaystateCommand) IsValid() bool {
	for _, existing := range AllowedJellyfinPlaystateCommandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlaystateCommand value
func (v JellyfinPlaystateCommand) Ptr() *JellyfinPlaystateCommand {
	return &v
}

type NullableJellyfinPlaystateCommand struct {
	value *JellyfinPlaystateCommand
	isSet bool
}

func (v NullableJellyfinPlaystateCommand) Get() *JellyfinPlaystateCommand {
	return v.value
}

func (v *NullableJellyfinPlaystateCommand) Set(val *JellyfinPlaystateCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinPlaystateCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinPlaystateCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinPlaystateCommand(val *JellyfinPlaystateCommand) *NullableJellyfinPlaystateCommand {
	return &NullableJellyfinPlaystateCommand{value: val, isSet: true}
}

func (v NullableJellyfinPlaystateCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinPlaystateCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

