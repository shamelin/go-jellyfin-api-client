/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinItemSortBy These represent sort orders.
type JellyfinItemSortBy string

// List of ItemSortBy
const (
	DEFAULT JellyfinItemSortBy = "Default"
	AIRED_EPISODE_ORDER JellyfinItemSortBy = "AiredEpisodeOrder"
	ALBUM JellyfinItemSortBy = "Album"
	ALBUM_ARTIST JellyfinItemSortBy = "AlbumArtist"
	ARTIST JellyfinItemSortBy = "Artist"
	DATE_CREATED JellyfinItemSortBy = "DateCreated"
	OFFICIAL_RATING JellyfinItemSortBy = "OfficialRating"
	DATE_PLAYED JellyfinItemSortBy = "DatePlayed"
	PREMIERE_DATE JellyfinItemSortBy = "PremiereDate"
	START_DATE JellyfinItemSortBy = "StartDate"
	SORT_NAME JellyfinItemSortBy = "SortName"
	NAME JellyfinItemSortBy = "Name"
	RANDOM JellyfinItemSortBy = "Random"
	RUNTIME JellyfinItemSortBy = "Runtime"
	COMMUNITY_RATING JellyfinItemSortBy = "CommunityRating"
	PRODUCTION_YEAR JellyfinItemSortBy = "ProductionYear"
	PLAY_COUNT JellyfinItemSortBy = "PlayCount"
	CRITIC_RATING JellyfinItemSortBy = "CriticRating"
	IS_FOLDER JellyfinItemSortBy = "IsFolder"
	IS_UNPLAYED JellyfinItemSortBy = "IsUnplayed"
	IS_PLAYED JellyfinItemSortBy = "IsPlayed"
	SERIES_SORT_NAME JellyfinItemSortBy = "SeriesSortName"
	VIDEO_BIT_RATE JellyfinItemSortBy = "VideoBitRate"
	AIR_TIME JellyfinItemSortBy = "AirTime"
	STUDIO JellyfinItemSortBy = "Studio"
	IS_FAVORITE_OR_LIKED JellyfinItemSortBy = "IsFavoriteOrLiked"
	DATE_LAST_CONTENT_ADDED JellyfinItemSortBy = "DateLastContentAdded"
	SERIES_DATE_PLAYED JellyfinItemSortBy = "SeriesDatePlayed"
	PARENT_INDEX_NUMBER JellyfinItemSortBy = "ParentIndexNumber"
	INDEX_NUMBER JellyfinItemSortBy = "IndexNumber"
	SIMILARITY_SCORE JellyfinItemSortBy = "SimilarityScore"
	SEARCH_SCORE JellyfinItemSortBy = "SearchScore"
)

// All allowed values of JellyfinItemSortBy enum
var AllowedJellyfinItemSortByEnumValues = []JellyfinItemSortBy{
	"Default",
	"AiredEpisodeOrder",
	"Album",
	"AlbumArtist",
	"Artist",
	"DateCreated",
	"OfficialRating",
	"DatePlayed",
	"PremiereDate",
	"StartDate",
	"SortName",
	"Name",
	"Random",
	"Runtime",
	"CommunityRating",
	"ProductionYear",
	"PlayCount",
	"CriticRating",
	"IsFolder",
	"IsUnplayed",
	"IsPlayed",
	"SeriesSortName",
	"VideoBitRate",
	"AirTime",
	"Studio",
	"IsFavoriteOrLiked",
	"DateLastContentAdded",
	"SeriesDatePlayed",
	"ParentIndexNumber",
	"IndexNumber",
	"SimilarityScore",
	"SearchScore",
}

func (v *JellyfinItemSortBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinItemSortBy(value)
	for _, existing := range AllowedJellyfinItemSortByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinItemSortBy", value)
}

// NewJellyfinItemSortByFromValue returns a pointer to a valid JellyfinItemSortBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinItemSortByFromValue(v string) (*JellyfinItemSortBy, error) {
	ev := JellyfinItemSortBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinItemSortBy: valid values are %v", v, AllowedJellyfinItemSortByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinItemSortBy) IsValid() bool {
	for _, existing := range AllowedJellyfinItemSortByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ItemSortBy value
func (v JellyfinItemSortBy) Ptr() *JellyfinItemSortBy {
	return &v
}

type NullableJellyfinItemSortBy struct {
	value *JellyfinItemSortBy
	isSet bool
}

func (v NullableJellyfinItemSortBy) Get() *JellyfinItemSortBy {
	return v.value
}

func (v *NullableJellyfinItemSortBy) Set(val *JellyfinItemSortBy) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinItemSortBy) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinItemSortBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinItemSortBy(val *JellyfinItemSortBy) *NullableJellyfinItemSortBy {
	return &NullableJellyfinItemSortBy{value: val, isSet: true}
}

func (v NullableJellyfinItemSortBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinItemSortBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

