/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinDeinterlaceMethod Enum containing deinterlace methods.
type JellyfinDeinterlaceMethod string

// List of DeinterlaceMethod
const (
	JELLYFINDEINTERLACEMETHOD_YADIF JellyfinDeinterlaceMethod = "yadif"
	JELLYFINDEINTERLACEMETHOD_BWDIF JellyfinDeinterlaceMethod = "bwdif"
)

// All allowed values of JellyfinDeinterlaceMethod enum
var AllowedJellyfinDeinterlaceMethodEnumValues = []JellyfinDeinterlaceMethod{
	"yadif",
	"bwdif",
}

func (v *JellyfinDeinterlaceMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinDeinterlaceMethod(value)
	for _, existing := range AllowedJellyfinDeinterlaceMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinDeinterlaceMethod", value)
}

// NewJellyfinDeinterlaceMethodFromValue returns a pointer to a valid JellyfinDeinterlaceMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinDeinterlaceMethodFromValue(v string) (*JellyfinDeinterlaceMethod, error) {
	ev := JellyfinDeinterlaceMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinDeinterlaceMethod: valid values are %v", v, AllowedJellyfinDeinterlaceMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinDeinterlaceMethod) IsValid() bool {
	for _, existing := range AllowedJellyfinDeinterlaceMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeinterlaceMethod value
func (v JellyfinDeinterlaceMethod) Ptr() *JellyfinDeinterlaceMethod {
	return &v
}

type NullableJellyfinDeinterlaceMethod struct {
	value *JellyfinDeinterlaceMethod
	isSet bool
}

func (v NullableJellyfinDeinterlaceMethod) Get() *JellyfinDeinterlaceMethod {
	return v.value
}

func (v *NullableJellyfinDeinterlaceMethod) Set(val *JellyfinDeinterlaceMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinDeinterlaceMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinDeinterlaceMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinDeinterlaceMethod(val *JellyfinDeinterlaceMethod) *NullableJellyfinDeinterlaceMethod {
	return &NullableJellyfinDeinterlaceMethod{value: val, isSet: true}
}

func (v NullableJellyfinDeinterlaceMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinDeinterlaceMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

