/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JellyfinUpdateMediaPathRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinUpdateMediaPathRequestDto{}

// JellyfinUpdateMediaPathRequestDto Update library options dto.
type JellyfinUpdateMediaPathRequestDto struct {
	// Gets or sets the library name.
	Name string `json:"Name"`
	// Gets or sets library folder path information.
	PathInfo JellyfinMediaPathInfo `json:"PathInfo"`
}

type _JellyfinUpdateMediaPathRequestDto JellyfinUpdateMediaPathRequestDto

// NewJellyfinUpdateMediaPathRequestDto instantiates a new JellyfinUpdateMediaPathRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinUpdateMediaPathRequestDto(name string, pathInfo JellyfinMediaPathInfo) *JellyfinUpdateMediaPathRequestDto {
	this := JellyfinUpdateMediaPathRequestDto{}
	this.Name = name
	this.PathInfo = pathInfo
	return &this
}

// NewJellyfinUpdateMediaPathRequestDtoWithDefaults instantiates a new JellyfinUpdateMediaPathRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinUpdateMediaPathRequestDtoWithDefaults() *JellyfinUpdateMediaPathRequestDto {
	this := JellyfinUpdateMediaPathRequestDto{}
	return &this
}

// GetName returns the Name field value
func (o *JellyfinUpdateMediaPathRequestDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JellyfinUpdateMediaPathRequestDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JellyfinUpdateMediaPathRequestDto) SetName(v string) {
	o.Name = v
}

// GetPathInfo returns the PathInfo field value
func (o *JellyfinUpdateMediaPathRequestDto) GetPathInfo() JellyfinMediaPathInfo {
	if o == nil {
		var ret JellyfinMediaPathInfo
		return ret
	}

	return o.PathInfo
}

// GetPathInfoOk returns a tuple with the PathInfo field value
// and a boolean to check if the value has been set.
func (o *JellyfinUpdateMediaPathRequestDto) GetPathInfoOk() (*JellyfinMediaPathInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PathInfo, true
}

// SetPathInfo sets field value
func (o *JellyfinUpdateMediaPathRequestDto) SetPathInfo(v JellyfinMediaPathInfo) {
	o.PathInfo = v
}

func (o JellyfinUpdateMediaPathRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinUpdateMediaPathRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Name"] = o.Name
	toSerialize["PathInfo"] = o.PathInfo
	return toSerialize, nil
}

func (o *JellyfinUpdateMediaPathRequestDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Name",
		"PathInfo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJellyfinUpdateMediaPathRequestDto := _JellyfinUpdateMediaPathRequestDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJellyfinUpdateMediaPathRequestDto)

	if err != nil {
		return err
	}

	*o = JellyfinUpdateMediaPathRequestDto(varJellyfinUpdateMediaPathRequestDto)

	return err
}

type NullableJellyfinUpdateMediaPathRequestDto struct {
	value *JellyfinUpdateMediaPathRequestDto
	isSet bool
}

func (v NullableJellyfinUpdateMediaPathRequestDto) Get() *JellyfinUpdateMediaPathRequestDto {
	return v.value
}

func (v *NullableJellyfinUpdateMediaPathRequestDto) Set(val *JellyfinUpdateMediaPathRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinUpdateMediaPathRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinUpdateMediaPathRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinUpdateMediaPathRequestDto(val *JellyfinUpdateMediaPathRequestDto) *NullableJellyfinUpdateMediaPathRequestDto {
	return &NullableJellyfinUpdateMediaPathRequestDto{value: val, isSet: true}
}

func (v NullableJellyfinUpdateMediaPathRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinUpdateMediaPathRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


