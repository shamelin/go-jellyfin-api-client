/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinImageOrientation the model 'JellyfinImageOrientation'
type JellyfinImageOrientation string

// List of ImageOrientation
const (
	JELLYFINIMAGEORIENTATION_TOP_LEFT JellyfinImageOrientation = "TopLeft"
	JELLYFINIMAGEORIENTATION_TOP_RIGHT JellyfinImageOrientation = "TopRight"
	JELLYFINIMAGEORIENTATION_BOTTOM_RIGHT JellyfinImageOrientation = "BottomRight"
	JELLYFINIMAGEORIENTATION_BOTTOM_LEFT JellyfinImageOrientation = "BottomLeft"
	JELLYFINIMAGEORIENTATION_LEFT_TOP JellyfinImageOrientation = "LeftTop"
	JELLYFINIMAGEORIENTATION_RIGHT_TOP JellyfinImageOrientation = "RightTop"
	JELLYFINIMAGEORIENTATION_RIGHT_BOTTOM JellyfinImageOrientation = "RightBottom"
	JELLYFINIMAGEORIENTATION_LEFT_BOTTOM JellyfinImageOrientation = "LeftBottom"
)

// All allowed values of JellyfinImageOrientation enum
var AllowedJellyfinImageOrientationEnumValues = []JellyfinImageOrientation{
	"TopLeft",
	"TopRight",
	"BottomRight",
	"BottomLeft",
	"LeftTop",
	"RightTop",
	"RightBottom",
	"LeftBottom",
}

func (v *JellyfinImageOrientation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinImageOrientation(value)
	for _, existing := range AllowedJellyfinImageOrientationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinImageOrientation", value)
}

// NewJellyfinImageOrientationFromValue returns a pointer to a valid JellyfinImageOrientation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinImageOrientationFromValue(v string) (*JellyfinImageOrientation, error) {
	ev := JellyfinImageOrientation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinImageOrientation: valid values are %v", v, AllowedJellyfinImageOrientationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinImageOrientation) IsValid() bool {
	for _, existing := range AllowedJellyfinImageOrientationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageOrientation value
func (v JellyfinImageOrientation) Ptr() *JellyfinImageOrientation {
	return &v
}

type NullableJellyfinImageOrientation struct {
	value *JellyfinImageOrientation
	isSet bool
}

func (v NullableJellyfinImageOrientation) Get() *JellyfinImageOrientation {
	return v.value
}

func (v *NullableJellyfinImageOrientation) Set(val *JellyfinImageOrientation) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinImageOrientation) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinImageOrientation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinImageOrientation(val *JellyfinImageOrientation) *NullableJellyfinImageOrientation {
	return &NullableJellyfinImageOrientation{value: val, isSet: true}
}

func (v NullableJellyfinImageOrientation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinImageOrientation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

