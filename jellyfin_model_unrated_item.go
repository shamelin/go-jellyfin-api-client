/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinUnratedItem An enum representing an unrated item.
type JellyfinUnratedItem string

// List of UnratedItem
const (
	JELLYFINUNRATEDITEM_MOVIE JellyfinUnratedItem = "Movie"
	JELLYFINUNRATEDITEM_TRAILER JellyfinUnratedItem = "Trailer"
	JELLYFINUNRATEDITEM_SERIES JellyfinUnratedItem = "Series"
	JELLYFINUNRATEDITEM_MUSIC JellyfinUnratedItem = "Music"
	JELLYFINUNRATEDITEM_BOOK JellyfinUnratedItem = "Book"
	JELLYFINUNRATEDITEM_LIVE_TV_CHANNEL JellyfinUnratedItem = "LiveTvChannel"
	JELLYFINUNRATEDITEM_LIVE_TV_PROGRAM JellyfinUnratedItem = "LiveTvProgram"
	JELLYFINUNRATEDITEM_CHANNEL_CONTENT JellyfinUnratedItem = "ChannelContent"
	JELLYFINUNRATEDITEM_OTHER JellyfinUnratedItem = "Other"
)

// All allowed values of JellyfinUnratedItem enum
var AllowedJellyfinUnratedItemEnumValues = []JellyfinUnratedItem{
	"Movie",
	"Trailer",
	"Series",
	"Music",
	"Book",
	"LiveTvChannel",
	"LiveTvProgram",
	"ChannelContent",
	"Other",
}

func (v *JellyfinUnratedItem) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinUnratedItem(value)
	for _, existing := range AllowedJellyfinUnratedItemEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinUnratedItem", value)
}

// NewJellyfinUnratedItemFromValue returns a pointer to a valid JellyfinUnratedItem
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinUnratedItemFromValue(v string) (*JellyfinUnratedItem, error) {
	ev := JellyfinUnratedItem(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinUnratedItem: valid values are %v", v, AllowedJellyfinUnratedItemEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinUnratedItem) IsValid() bool {
	for _, existing := range AllowedJellyfinUnratedItemEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UnratedItem value
func (v JellyfinUnratedItem) Ptr() *JellyfinUnratedItem {
	return &v
}

type NullableJellyfinUnratedItem struct {
	value *JellyfinUnratedItem
	isSet bool
}

func (v NullableJellyfinUnratedItem) Get() *JellyfinUnratedItem {
	return v.value
}

func (v *NullableJellyfinUnratedItem) Set(val *JellyfinUnratedItem) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinUnratedItem) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinUnratedItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinUnratedItem(val *JellyfinUnratedItem) *NullableJellyfinUnratedItem {
	return &NullableJellyfinUnratedItem{value: val, isSet: true}
}

func (v NullableJellyfinUnratedItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinUnratedItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

