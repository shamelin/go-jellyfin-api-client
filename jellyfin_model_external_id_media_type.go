/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
	"fmt"
)

// JellyfinExternalIdMediaType The specific media type of an MediaBrowser.Model.Providers.ExternalIdInfo.
type JellyfinExternalIdMediaType string

// List of ExternalIdMediaType
const (
	ALBUM JellyfinExternalIdMediaType = "Album"
	ALBUM_ARTIST JellyfinExternalIdMediaType = "AlbumArtist"
	ARTIST JellyfinExternalIdMediaType = "Artist"
	BOX_SET JellyfinExternalIdMediaType = "BoxSet"
	EPISODE JellyfinExternalIdMediaType = "Episode"
	MOVIE JellyfinExternalIdMediaType = "Movie"
	OTHER_ARTIST JellyfinExternalIdMediaType = "OtherArtist"
	PERSON JellyfinExternalIdMediaType = "Person"
	RELEASE_GROUP JellyfinExternalIdMediaType = "ReleaseGroup"
	SEASON JellyfinExternalIdMediaType = "Season"
	SERIES JellyfinExternalIdMediaType = "Series"
	TRACK JellyfinExternalIdMediaType = "Track"
	BOOK JellyfinExternalIdMediaType = "Book"
)

// All allowed values of JellyfinExternalIdMediaType enum
var AllowedJellyfinExternalIdMediaTypeEnumValues = []JellyfinExternalIdMediaType{
	"Album",
	"AlbumArtist",
	"Artist",
	"BoxSet",
	"Episode",
	"Movie",
	"OtherArtist",
	"Person",
	"ReleaseGroup",
	"Season",
	"Series",
	"Track",
	"Book",
}

func (v *JellyfinExternalIdMediaType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JellyfinExternalIdMediaType(value)
	for _, existing := range AllowedJellyfinExternalIdMediaTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JellyfinExternalIdMediaType", value)
}

// NewJellyfinExternalIdMediaTypeFromValue returns a pointer to a valid JellyfinExternalIdMediaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJellyfinExternalIdMediaTypeFromValue(v string) (*JellyfinExternalIdMediaType, error) {
	ev := JellyfinExternalIdMediaType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JellyfinExternalIdMediaType: valid values are %v", v, AllowedJellyfinExternalIdMediaTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JellyfinExternalIdMediaType) IsValid() bool {
	for _, existing := range AllowedJellyfinExternalIdMediaTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExternalIdMediaType value
func (v JellyfinExternalIdMediaType) Ptr() *JellyfinExternalIdMediaType {
	return &v
}

type NullableJellyfinExternalIdMediaType struct {
	value *JellyfinExternalIdMediaType
	isSet bool
}

func (v NullableJellyfinExternalIdMediaType) Get() *JellyfinExternalIdMediaType {
	return v.value
}

func (v *NullableJellyfinExternalIdMediaType) Set(val *JellyfinExternalIdMediaType) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinExternalIdMediaType) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinExternalIdMediaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinExternalIdMediaType(val *JellyfinExternalIdMediaType) *NullableJellyfinExternalIdMediaType {
	return &NullableJellyfinExternalIdMediaType{value: val, isSet: true}
}

func (v NullableJellyfinExternalIdMediaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinExternalIdMediaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

