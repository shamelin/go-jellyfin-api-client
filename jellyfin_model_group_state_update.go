/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"encoding/json"
)

// checks if the JellyfinGroupStateUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinGroupStateUpdate{}

// JellyfinGroupStateUpdate Class GroupStateUpdate.
type JellyfinGroupStateUpdate struct {
	// Gets the state of the group.
	State *JellyfinGroupStateType `json:"State,omitempty"`
	// Gets the reason of the state change.
	Reason *JellyfinPlaybackRequestType `json:"Reason,omitempty"`
}

// NewJellyfinGroupStateUpdate instantiates a new JellyfinGroupStateUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinGroupStateUpdate() *JellyfinGroupStateUpdate {
	this := JellyfinGroupStateUpdate{}
	return &this
}

// NewJellyfinGroupStateUpdateWithDefaults instantiates a new JellyfinGroupStateUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinGroupStateUpdateWithDefaults() *JellyfinGroupStateUpdate {
	this := JellyfinGroupStateUpdate{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *JellyfinGroupStateUpdate) GetState() JellyfinGroupStateType {
	if o == nil || IsNil(o.State) {
		var ret JellyfinGroupStateType
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinGroupStateUpdate) GetStateOk() (*JellyfinGroupStateType, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *JellyfinGroupStateUpdate) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given JellyfinGroupStateType and assigns it to the State field.
func (o *JellyfinGroupStateUpdate) SetState(v JellyfinGroupStateType) {
	o.State = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *JellyfinGroupStateUpdate) GetReason() JellyfinPlaybackRequestType {
	if o == nil || IsNil(o.Reason) {
		var ret JellyfinPlaybackRequestType
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinGroupStateUpdate) GetReasonOk() (*JellyfinPlaybackRequestType, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *JellyfinGroupStateUpdate) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given JellyfinPlaybackRequestType and assigns it to the Reason field.
func (o *JellyfinGroupStateUpdate) SetReason(v JellyfinPlaybackRequestType) {
	o.Reason = &v
}

func (o JellyfinGroupStateUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinGroupStateUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["State"] = o.State
	}
	if !IsNil(o.Reason) {
		toSerialize["Reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableJellyfinGroupStateUpdate struct {
	value *JellyfinGroupStateUpdate
	isSet bool
}

func (v NullableJellyfinGroupStateUpdate) Get() *JellyfinGroupStateUpdate {
	return v.value
}

func (v *NullableJellyfinGroupStateUpdate) Set(val *JellyfinGroupStateUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinGroupStateUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinGroupStateUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinGroupStateUpdate(val *JellyfinGroupStateUpdate) *NullableJellyfinGroupStateUpdate {
	return &NullableJellyfinGroupStateUpdate{value: val, isSet: true}
}

func (v NullableJellyfinGroupStateUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinGroupStateUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


