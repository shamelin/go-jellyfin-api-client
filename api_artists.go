/*
Jellyfin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 10.10.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyfin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ArtistsAPIService ArtistsAPI service
type ArtistsAPIService service

type ArtistsAPIGetAlbumArtistsRequest struct {
	ctx context.Context
	ApiService *ArtistsAPIService
	minCommunityRating *float64
	startIndex *int32
	limit *int32
	searchTerm *string
	parentId *string
	fields *[]JellyfinItemFields
	excludeItemTypes *[]JellyfinBaseItemKind
	includeItemTypes *[]JellyfinBaseItemKind
	filters *[]JellyfinItemFilter
	isFavorite *bool
	mediaTypes *[]JellyfinMediaType
	genres *[]string
	genreIds *[]string
	officialRatings *[]string
	tags *[]string
	years *[]int32
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]JellyfinImageType
	person *string
	personIds *[]string
	personTypes *[]string
	studios *[]string
	studioIds *[]string
	userId *string
	nameStartsWithOrGreater *string
	nameStartsWith *string
	nameLessThan *string
	sortBy *[]JellyfinItemSortBy
	sortOrder *[]JellyfinSortOrder
	enableImages *bool
	enableTotalRecordCount *bool
}

// Optional filter by minimum community rating.
func (r ArtistsAPIGetAlbumArtistsRequest) MinCommunityRating(minCommunityRating float64) ArtistsAPIGetAlbumArtistsRequest {
	r.minCommunityRating = &minCommunityRating
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ArtistsAPIGetAlbumArtistsRequest) StartIndex(startIndex int32) ArtistsAPIGetAlbumArtistsRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return.
func (r ArtistsAPIGetAlbumArtistsRequest) Limit(limit int32) ArtistsAPIGetAlbumArtistsRequest {
	r.limit = &limit
	return r
}

// Optional. Search term.
func (r ArtistsAPIGetAlbumArtistsRequest) SearchTerm(searchTerm string) ArtistsAPIGetAlbumArtistsRequest {
	r.searchTerm = &searchTerm
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root.
func (r ArtistsAPIGetAlbumArtistsRequest) ParentId(parentId string) ArtistsAPIGetAlbumArtistsRequest {
	r.parentId = &parentId
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r ArtistsAPIGetAlbumArtistsRequest) Fields(fields []JellyfinItemFields) ArtistsAPIGetAlbumArtistsRequest {
	r.fields = &fields
	return r
}

// Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
func (r ArtistsAPIGetAlbumArtistsRequest) ExcludeItemTypes(excludeItemTypes []JellyfinBaseItemKind) ArtistsAPIGetAlbumArtistsRequest {
	r.excludeItemTypes = &excludeItemTypes
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
func (r ArtistsAPIGetAlbumArtistsRequest) IncludeItemTypes(includeItemTypes []JellyfinBaseItemKind) ArtistsAPIGetAlbumArtistsRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional. Specify additional filters to apply.
func (r ArtistsAPIGetAlbumArtistsRequest) Filters(filters []JellyfinItemFilter) ArtistsAPIGetAlbumArtistsRequest {
	r.filters = &filters
	return r
}

// Optional filter by items that are marked as favorite, or not.
func (r ArtistsAPIGetAlbumArtistsRequest) IsFavorite(isFavorite bool) ArtistsAPIGetAlbumArtistsRequest {
	r.isFavorite = &isFavorite
	return r
}

// Optional filter by MediaType. Allows multiple, comma delimited.
func (r ArtistsAPIGetAlbumArtistsRequest) MediaTypes(mediaTypes []JellyfinMediaType) ArtistsAPIGetAlbumArtistsRequest {
	r.mediaTypes = &mediaTypes
	return r
}

// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
func (r ArtistsAPIGetAlbumArtistsRequest) Genres(genres []string) ArtistsAPIGetAlbumArtistsRequest {
	r.genres = &genres
	return r
}

// Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
func (r ArtistsAPIGetAlbumArtistsRequest) GenreIds(genreIds []string) ArtistsAPIGetAlbumArtistsRequest {
	r.genreIds = &genreIds
	return r
}

// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
func (r ArtistsAPIGetAlbumArtistsRequest) OfficialRatings(officialRatings []string) ArtistsAPIGetAlbumArtistsRequest {
	r.officialRatings = &officialRatings
	return r
}

// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
func (r ArtistsAPIGetAlbumArtistsRequest) Tags(tags []string) ArtistsAPIGetAlbumArtistsRequest {
	r.tags = &tags
	return r
}

// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
func (r ArtistsAPIGetAlbumArtistsRequest) Years(years []int32) ArtistsAPIGetAlbumArtistsRequest {
	r.years = &years
	return r
}

// Optional, include user data.
func (r ArtistsAPIGetAlbumArtistsRequest) EnableUserData(enableUserData bool) ArtistsAPIGetAlbumArtistsRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type.
func (r ArtistsAPIGetAlbumArtistsRequest) ImageTypeLimit(imageTypeLimit int32) ArtistsAPIGetAlbumArtistsRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ArtistsAPIGetAlbumArtistsRequest) EnableImageTypes(enableImageTypes []JellyfinImageType) ArtistsAPIGetAlbumArtistsRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ArtistsAPIGetAlbumArtistsRequest) Person(person string) ArtistsAPIGetAlbumArtistsRequest {
	r.person = &person
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person ids.
func (r ArtistsAPIGetAlbumArtistsRequest) PersonIds(personIds []string) ArtistsAPIGetAlbumArtistsRequest {
	r.personIds = &personIds
	return r
}

// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
func (r ArtistsAPIGetAlbumArtistsRequest) PersonTypes(personTypes []string) ArtistsAPIGetAlbumArtistsRequest {
	r.personTypes = &personTypes
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
func (r ArtistsAPIGetAlbumArtistsRequest) Studios(studios []string) ArtistsAPIGetAlbumArtistsRequest {
	r.studios = &studios
	return r
}

// Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
func (r ArtistsAPIGetAlbumArtistsRequest) StudioIds(studioIds []string) ArtistsAPIGetAlbumArtistsRequest {
	r.studioIds = &studioIds
	return r
}

// User id.
func (r ArtistsAPIGetAlbumArtistsRequest) UserId(userId string) ArtistsAPIGetAlbumArtistsRequest {
	r.userId = &userId
	return r
}

// Optional filter by items whose name is sorted equally or greater than a given input string.
func (r ArtistsAPIGetAlbumArtistsRequest) NameStartsWithOrGreater(nameStartsWithOrGreater string) ArtistsAPIGetAlbumArtistsRequest {
	r.nameStartsWithOrGreater = &nameStartsWithOrGreater
	return r
}

// Optional filter by items whose name is sorted equally than a given input string.
func (r ArtistsAPIGetAlbumArtistsRequest) NameStartsWith(nameStartsWith string) ArtistsAPIGetAlbumArtistsRequest {
	r.nameStartsWith = &nameStartsWith
	return r
}

// Optional filter by items whose name is equally or lesser than a given input string.
func (r ArtistsAPIGetAlbumArtistsRequest) NameLessThan(nameLessThan string) ArtistsAPIGetAlbumArtistsRequest {
	r.nameLessThan = &nameLessThan
	return r
}

// Optional. Specify one or more sort orders, comma delimited.
func (r ArtistsAPIGetAlbumArtistsRequest) SortBy(sortBy []JellyfinItemSortBy) ArtistsAPIGetAlbumArtistsRequest {
	r.sortBy = &sortBy
	return r
}

// Sort Order - Ascending,Descending.
func (r ArtistsAPIGetAlbumArtistsRequest) SortOrder(sortOrder []JellyfinSortOrder) ArtistsAPIGetAlbumArtistsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Optional, include image information in output.
func (r ArtistsAPIGetAlbumArtistsRequest) EnableImages(enableImages bool) ArtistsAPIGetAlbumArtistsRequest {
	r.enableImages = &enableImages
	return r
}

// Total record count.
func (r ArtistsAPIGetAlbumArtistsRequest) EnableTotalRecordCount(enableTotalRecordCount bool) ArtistsAPIGetAlbumArtistsRequest {
	r.enableTotalRecordCount = &enableTotalRecordCount
	return r
}

func (r ArtistsAPIGetAlbumArtistsRequest) Execute() (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetAlbumArtistsExecute(r)
}

/*
GetAlbumArtists Gets all album artists from a given item, folder, or the entire library.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ArtistsAPIGetAlbumArtistsRequest
*/
func (a *ArtistsAPIService) GetAlbumArtists(ctx context.Context) ArtistsAPIGetAlbumArtistsRequest {
	return ArtistsAPIGetAlbumArtistsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JellyfinBaseItemDtoQueryResult
func (a *ArtistsAPIService) GetAlbumArtistsExecute(r ArtistsAPIGetAlbumArtistsRequest) (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinBaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ArtistsAPIService.GetAlbumArtists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists/AlbumArtists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.minCommunityRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCommunityRating", r.minCommunityRating, "form", "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.searchTerm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchTerm", r.searchTerm, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parentId", r.parentId, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeItemTypes != nil {
		t := *r.excludeItemTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeItemTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeItemTypes", t, "form", "multi")
		}
	}
	if r.includeItemTypes != nil {
		t := *r.includeItemTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "includeItemTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "includeItemTypes", t, "form", "multi")
		}
	}
	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filters", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filters", t, "form", "multi")
		}
	}
	if r.isFavorite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isFavorite", r.isFavorite, "form", "")
	}
	if r.mediaTypes != nil {
		t := *r.mediaTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mediaTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mediaTypes", t, "form", "multi")
		}
	}
	if r.genres != nil {
		t := *r.genres
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "genres", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "genres", t, "form", "multi")
		}
	}
	if r.genreIds != nil {
		t := *r.genreIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "genreIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "genreIds", t, "form", "multi")
		}
	}
	if r.officialRatings != nil {
		t := *r.officialRatings
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "officialRatings", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "officialRatings", t, "form", "multi")
		}
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.years != nil {
		t := *r.years
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "years", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "years", t, "form", "multi")
		}
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	if r.person != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "person", r.person, "form", "")
	}
	if r.personIds != nil {
		t := *r.personIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "personIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "personIds", t, "form", "multi")
		}
	}
	if r.personTypes != nil {
		t := *r.personTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "personTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "personTypes", t, "form", "multi")
		}
	}
	if r.studios != nil {
		t := *r.studios
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "studios", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "studios", t, "form", "multi")
		}
	}
	if r.studioIds != nil {
		t := *r.studioIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "studioIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "studioIds", t, "form", "multi")
		}
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.nameStartsWithOrGreater != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameStartsWithOrGreater", r.nameStartsWithOrGreater, "form", "")
	}
	if r.nameStartsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameStartsWith", r.nameStartsWith, "form", "")
	}
	if r.nameLessThan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameLessThan", r.nameLessThan, "form", "")
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.sortOrder != nil {
		t := *r.sortOrder
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	} else {
		var defaultValue bool = true
		r.enableImages = &defaultValue
	}
	if r.enableTotalRecordCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableTotalRecordCount", r.enableTotalRecordCount, "form", "")
	} else {
		var defaultValue bool = true
		r.enableTotalRecordCount = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ArtistsAPIGetArtistByNameRequest struct {
	ctx context.Context
	ApiService *ArtistsAPIService
	name string
	userId *string
}

// Optional. Filter by user id, and attach user data.
func (r ArtistsAPIGetArtistByNameRequest) UserId(userId string) ArtistsAPIGetArtistByNameRequest {
	r.userId = &userId
	return r
}

func (r ArtistsAPIGetArtistByNameRequest) Execute() (*JellyfinBaseItemDto, *http.Response, error) {
	return r.ApiService.GetArtistByNameExecute(r)
}

/*
GetArtistByName Gets an artist by name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Studio name.
 @return ArtistsAPIGetArtistByNameRequest
*/
func (a *ArtistsAPIService) GetArtistByName(ctx context.Context, name string) ArtistsAPIGetArtistByNameRequest {
	return ArtistsAPIGetArtistByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return JellyfinBaseItemDto
func (a *ArtistsAPIService) GetArtistByNameExecute(r ArtistsAPIGetArtistByNameRequest) (*JellyfinBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ArtistsAPIService.GetArtistByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ArtistsAPIGetArtistsRequest struct {
	ctx context.Context
	ApiService *ArtistsAPIService
	minCommunityRating *float64
	startIndex *int32
	limit *int32
	searchTerm *string
	parentId *string
	fields *[]JellyfinItemFields
	excludeItemTypes *[]JellyfinBaseItemKind
	includeItemTypes *[]JellyfinBaseItemKind
	filters *[]JellyfinItemFilter
	isFavorite *bool
	mediaTypes *[]JellyfinMediaType
	genres *[]string
	genreIds *[]string
	officialRatings *[]string
	tags *[]string
	years *[]int32
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *[]JellyfinImageType
	person *string
	personIds *[]string
	personTypes *[]string
	studios *[]string
	studioIds *[]string
	userId *string
	nameStartsWithOrGreater *string
	nameStartsWith *string
	nameLessThan *string
	sortBy *[]JellyfinItemSortBy
	sortOrder *[]JellyfinSortOrder
	enableImages *bool
	enableTotalRecordCount *bool
}

// Optional filter by minimum community rating.
func (r ArtistsAPIGetArtistsRequest) MinCommunityRating(minCommunityRating float64) ArtistsAPIGetArtistsRequest {
	r.minCommunityRating = &minCommunityRating
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ArtistsAPIGetArtistsRequest) StartIndex(startIndex int32) ArtistsAPIGetArtistsRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return.
func (r ArtistsAPIGetArtistsRequest) Limit(limit int32) ArtistsAPIGetArtistsRequest {
	r.limit = &limit
	return r
}

// Optional. Search term.
func (r ArtistsAPIGetArtistsRequest) SearchTerm(searchTerm string) ArtistsAPIGetArtistsRequest {
	r.searchTerm = &searchTerm
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root.
func (r ArtistsAPIGetArtistsRequest) ParentId(parentId string) ArtistsAPIGetArtistsRequest {
	r.parentId = &parentId
	return r
}

// Optional. Specify additional fields of information to return in the output.
func (r ArtistsAPIGetArtistsRequest) Fields(fields []JellyfinItemFields) ArtistsAPIGetArtistsRequest {
	r.fields = &fields
	return r
}

// Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
func (r ArtistsAPIGetArtistsRequest) ExcludeItemTypes(excludeItemTypes []JellyfinBaseItemKind) ArtistsAPIGetArtistsRequest {
	r.excludeItemTypes = &excludeItemTypes
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
func (r ArtistsAPIGetArtistsRequest) IncludeItemTypes(includeItemTypes []JellyfinBaseItemKind) ArtistsAPIGetArtistsRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional. Specify additional filters to apply.
func (r ArtistsAPIGetArtistsRequest) Filters(filters []JellyfinItemFilter) ArtistsAPIGetArtistsRequest {
	r.filters = &filters
	return r
}

// Optional filter by items that are marked as favorite, or not.
func (r ArtistsAPIGetArtistsRequest) IsFavorite(isFavorite bool) ArtistsAPIGetArtistsRequest {
	r.isFavorite = &isFavorite
	return r
}

// Optional filter by MediaType. Allows multiple, comma delimited.
func (r ArtistsAPIGetArtistsRequest) MediaTypes(mediaTypes []JellyfinMediaType) ArtistsAPIGetArtistsRequest {
	r.mediaTypes = &mediaTypes
	return r
}

// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
func (r ArtistsAPIGetArtistsRequest) Genres(genres []string) ArtistsAPIGetArtistsRequest {
	r.genres = &genres
	return r
}

// Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
func (r ArtistsAPIGetArtistsRequest) GenreIds(genreIds []string) ArtistsAPIGetArtistsRequest {
	r.genreIds = &genreIds
	return r
}

// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
func (r ArtistsAPIGetArtistsRequest) OfficialRatings(officialRatings []string) ArtistsAPIGetArtistsRequest {
	r.officialRatings = &officialRatings
	return r
}

// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
func (r ArtistsAPIGetArtistsRequest) Tags(tags []string) ArtistsAPIGetArtistsRequest {
	r.tags = &tags
	return r
}

// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
func (r ArtistsAPIGetArtistsRequest) Years(years []int32) ArtistsAPIGetArtistsRequest {
	r.years = &years
	return r
}

// Optional, include user data.
func (r ArtistsAPIGetArtistsRequest) EnableUserData(enableUserData bool) ArtistsAPIGetArtistsRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type.
func (r ArtistsAPIGetArtistsRequest) ImageTypeLimit(imageTypeLimit int32) ArtistsAPIGetArtistsRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r ArtistsAPIGetArtistsRequest) EnableImageTypes(enableImageTypes []JellyfinImageType) ArtistsAPIGetArtistsRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person.
func (r ArtistsAPIGetArtistsRequest) Person(person string) ArtistsAPIGetArtistsRequest {
	r.person = &person
	return r
}

// Optional. If specified, results will be filtered to include only those containing the specified person ids.
func (r ArtistsAPIGetArtistsRequest) PersonIds(personIds []string) ArtistsAPIGetArtistsRequest {
	r.personIds = &personIds
	return r
}

// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
func (r ArtistsAPIGetArtistsRequest) PersonTypes(personTypes []string) ArtistsAPIGetArtistsRequest {
	r.personTypes = &personTypes
	return r
}

// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
func (r ArtistsAPIGetArtistsRequest) Studios(studios []string) ArtistsAPIGetArtistsRequest {
	r.studios = &studios
	return r
}

// Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
func (r ArtistsAPIGetArtistsRequest) StudioIds(studioIds []string) ArtistsAPIGetArtistsRequest {
	r.studioIds = &studioIds
	return r
}

// User id.
func (r ArtistsAPIGetArtistsRequest) UserId(userId string) ArtistsAPIGetArtistsRequest {
	r.userId = &userId
	return r
}

// Optional filter by items whose name is sorted equally or greater than a given input string.
func (r ArtistsAPIGetArtistsRequest) NameStartsWithOrGreater(nameStartsWithOrGreater string) ArtistsAPIGetArtistsRequest {
	r.nameStartsWithOrGreater = &nameStartsWithOrGreater
	return r
}

// Optional filter by items whose name is sorted equally than a given input string.
func (r ArtistsAPIGetArtistsRequest) NameStartsWith(nameStartsWith string) ArtistsAPIGetArtistsRequest {
	r.nameStartsWith = &nameStartsWith
	return r
}

// Optional filter by items whose name is equally or lesser than a given input string.
func (r ArtistsAPIGetArtistsRequest) NameLessThan(nameLessThan string) ArtistsAPIGetArtistsRequest {
	r.nameLessThan = &nameLessThan
	return r
}

// Optional. Specify one or more sort orders, comma delimited.
func (r ArtistsAPIGetArtistsRequest) SortBy(sortBy []JellyfinItemSortBy) ArtistsAPIGetArtistsRequest {
	r.sortBy = &sortBy
	return r
}

// Sort Order - Ascending,Descending.
func (r ArtistsAPIGetArtistsRequest) SortOrder(sortOrder []JellyfinSortOrder) ArtistsAPIGetArtistsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Optional, include image information in output.
func (r ArtistsAPIGetArtistsRequest) EnableImages(enableImages bool) ArtistsAPIGetArtistsRequest {
	r.enableImages = &enableImages
	return r
}

// Total record count.
func (r ArtistsAPIGetArtistsRequest) EnableTotalRecordCount(enableTotalRecordCount bool) ArtistsAPIGetArtistsRequest {
	r.enableTotalRecordCount = &enableTotalRecordCount
	return r
}

func (r ArtistsAPIGetArtistsRequest) Execute() (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	return r.ApiService.GetArtistsExecute(r)
}

/*
GetArtists Gets all artists from a given item, folder, or the entire library.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ArtistsAPIGetArtistsRequest
*/
func (a *ArtistsAPIService) GetArtists(ctx context.Context) ArtistsAPIGetArtistsRequest {
	return ArtistsAPIGetArtistsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JellyfinBaseItemDtoQueryResult
func (a *ArtistsAPIService) GetArtistsExecute(r ArtistsAPIGetArtistsRequest) (*JellyfinBaseItemDtoQueryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JellyfinBaseItemDtoQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ArtistsAPIService.GetArtists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.minCommunityRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCommunityRating", r.minCommunityRating, "form", "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startIndex", r.startIndex, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.searchTerm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchTerm", r.searchTerm, "form", "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parentId", r.parentId, "form", "")
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fields", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fields", t, "form", "multi")
		}
	}
	if r.excludeItemTypes != nil {
		t := *r.excludeItemTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeItemTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeItemTypes", t, "form", "multi")
		}
	}
	if r.includeItemTypes != nil {
		t := *r.includeItemTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "includeItemTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "includeItemTypes", t, "form", "multi")
		}
	}
	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filters", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filters", t, "form", "multi")
		}
	}
	if r.isFavorite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isFavorite", r.isFavorite, "form", "")
	}
	if r.mediaTypes != nil {
		t := *r.mediaTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mediaTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mediaTypes", t, "form", "multi")
		}
	}
	if r.genres != nil {
		t := *r.genres
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "genres", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "genres", t, "form", "multi")
		}
	}
	if r.genreIds != nil {
		t := *r.genreIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "genreIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "genreIds", t, "form", "multi")
		}
	}
	if r.officialRatings != nil {
		t := *r.officialRatings
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "officialRatings", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "officialRatings", t, "form", "multi")
		}
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.years != nil {
		t := *r.years
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "years", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "years", t, "form", "multi")
		}
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableUserData", r.enableUserData, "form", "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "imageTypeLimit", r.imageTypeLimit, "form", "")
	}
	if r.enableImageTypes != nil {
		t := *r.enableImageTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "enableImageTypes", t, "form", "multi")
		}
	}
	if r.person != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "person", r.person, "form", "")
	}
	if r.personIds != nil {
		t := *r.personIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "personIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "personIds", t, "form", "multi")
		}
	}
	if r.personTypes != nil {
		t := *r.personTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "personTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "personTypes", t, "form", "multi")
		}
	}
	if r.studios != nil {
		t := *r.studios
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "studios", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "studios", t, "form", "multi")
		}
	}
	if r.studioIds != nil {
		t := *r.studioIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "studioIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "studioIds", t, "form", "multi")
		}
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.nameStartsWithOrGreater != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameStartsWithOrGreater", r.nameStartsWithOrGreater, "form", "")
	}
	if r.nameStartsWith != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameStartsWith", r.nameStartsWith, "form", "")
	}
	if r.nameLessThan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameLessThan", r.nameLessThan, "form", "")
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.sortOrder != nil {
		t := *r.sortOrder
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", t, "form", "multi")
		}
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableImages", r.enableImages, "form", "")
	} else {
		var defaultValue bool = true
		r.enableImages = &defaultValue
	}
	if r.enableTotalRecordCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enableTotalRecordCount", r.enableTotalRecordCount, "form", "")
	} else {
		var defaultValue bool = true
		r.enableTotalRecordCount = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CustomAuthentication"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
